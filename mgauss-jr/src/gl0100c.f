C     GL0100C      06 JUN 92                                         MRP
      SUBROUTINE CHAIN
C*
C     --------------
C     U OF T VERSION
C     JUNE 1992
C     --------------
C*
C     CHAIN LOADS THE NEXT ROUTINE TO BE EXECUTED
C
C     THIS ROUTINE WORKS FROM THE INFORMATION IN COMMON /A/,
C     ARRAY LNK ... SEE ROUTINE LNK1 FOR A DETAILED DESCRIPTION.
C*
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C#
C     PARAMETER (NA=#NA)
C##
      PARAMETER (NA= 36)
C###
C     NOVER IS THE NUMBER OF OVERLAYS DEFINED.
C
      PARAMETER (NOVER=55)
      PARAMETER (ZERO=0.0D0, SIXTY=60.0D0, HUNDRD=100.0D0)
C
      COMMON /A/ IOP(99)
      COMMON /A/ NATOMS,ICHARG,MULTIP,IAN(NA),NAE,NBE,NE,NBASIS,C(NA,3)
      COMMON /A/ FCONST(4)
      COMMON /A/ LNK(100),NLINK,JOP(10,30)
C
      COMMON/GEN/E1,E2,E3,E(3),DCONV,SPIN(2),FIELD(3),FE,EMOL,ESOL,
     1 DPOLE(4),VCM
C
C     USE OF COMMON /GLDDATA/ (GOULD COMPUTER ONLY):
C     MYID(1): TASK NUMBER (HEXADECIMAL).
C     MYID(2)-MYID(3): LOAD MODULE NAME (ASCII).
C     MYID(4)-MYID(5): TASK OWNER NAME (ASCII).
C     MYID(6)-MYID(7): TASK PSEUDONYM (ASCII).
C     MYID(8)-MYID(9): TASK USER NAME (ASCII).
C     MYID(10): SAVES DIRECT ACCESS RECORD LENGTH IN DOUBLE WORDS.
C     MYID(11): PROGRAM OPTIONS ($OPTION).
C     MYID(12): MAP BLOCK SIZE IN DOUBLE WORDS.
C?GLD/GBR
C     COMMON /GLDDATA/ MYID(12)
C??
      COMMON/IO/IN,IOUT,IODUM(215)
C?GLD
C     INTEGER*8 IOVLAY
C     INTEGER*1 ITIME(4), I1BLK/' '/, I1ZERO/'0'/,
C    1 IWRITE(57)/2Z0D,2Z0A,55*2Z20/
C*
C     CHARACTER*8 ZOVLAY, ZOLDOVER
C??
C?GBR
C     INTEGER ICNP(6)
C*
C     LOGICAL CONSOLENOWAIT
C*
C     CHARACTER*8 ZOVLAY, ZOLDOVER, HEXTOASC, ZMYID(12)*4, ZTASKNO,
C    1 ZDIRECTORY*35, ZDATE*7, ZTIME*6, ZOUT*57, ZIN*2
C??
C?VAX
C     CHARACTER TYME*8
C??
C?CDC
C     CHARACTER*10 TIME, TYME
C??
C?UNX
      INTEGER IARRAY(3)
C*
      REAL DTIME, ETIME, TARRAY(2), CTIME
C??
      DIMENSION N(8)
C*
C     THE BASIC STRUCTURE OF MONSTERGAUSS IS GIVEN BELOW - THE
C     RESPECTIVE GOULD AND CDC OVERLAY 'CODES' ARE GIVEN FOLLOWING
C     THE LINK NUMBERS. NOTE THAT THESE EXTERNAL OVERLAYS ARE
C     VERY SIMILAR TO THE MONSTERGAUSS INTERNAL 'LINKS'.
C
C     LINK       SOURCE     GLD/GBR     CDC
C     ------     ------     -------     ---
C     GAUSS      GL0100     GAUSS         0
C     SETUP      GL0100     GAU0100       1
C     LNK1       GL0100     GAU0101       2
C     STDGEO     GL0201     GAU0201       3
C     VGEOM      GL0202     GAU0202       4
C     GINPUT     GL0301     GAU0301       5
C     STVINT     GL0302     GAU0302       6
C     DIPOLE     GL0303     GAU0303       7
C     DUMMYI     GL0100     GAU0300      10   *** SPECIAL TREATMENT ***
C     DUMMYI     GL0100     GAU0300      11   *** SPECIAL TREATMENT ***
C     DUMMYI     GL0100     GAU0300      12   *** SPECIAL TREATMENT ***
C     DSTVWT     GL0309     GAU0309      13
C     DPHNXW     GL0310     GAU0310      14
C     SECINT     GL0311     GAU0311      15
C     RHFIN      GL0401     GAU0401      16
C     GUESS      GL0402     GAU0402      17
C     SECORT     GL0403     GAU0403      18
C     CLOSED     GL0501     GAU0501      19
C     UHFOPN     GL0502     GAU0502      20
C     GSCF       GL0503     GAU0503      21
C     ZCLOSE     GL0505     GAU0505      23
C     ZUHF       GL0506     GAU0506      24
C     ZRHF       GL0507     GAU0507      25
C     POPGEN     GL0601     GAU0601      26
C     PMO        GL0602     GAU0602      27
C     ZMOROK     GL0603     GAU0603      28
C     FORCEB     GL0701     GAU0701      29
C     FORCE      GL0702     GAU0702      30
C     DTWOL      GL0703     GAU0703      31
C     DPHNIX     GL0704     GAU0704      32
C     CPHF       GL0708     GAU0708      36
C     DD1E       GL0709     GAU0709      37
C     DD2E       GL0710     GAU0710      38
C     GBOPT      GL0711     GAU0711      39
C     BOYLOC     GL0801     GAU0801      40
C     OEPROP     GL0802     GAU0802      41
C     DIPSQ      GL0803     GAU0803      42
C     INTRAN     GL0901     GAU0901      43
C     COUPLE     GL0902     GAU0902      44
C     CONFIG     GL0903     GAU0903      45
C     INTSRT     GL0904     GAU0904      46
C     FORMTP     GL0905     GAU0905      47
C     CIROOT     GL0906     GAU0906      48
C     OEPMO      GL0907     GAU0907      49
C*
C     SINCE SUBROUTINES AND COMMON AREAS ARE SHARED IN THE INTEGRAL
C     SECTIONS, SECONDARY OVERLAYS ARE USED VIA SUBROUTINE DUMMYI.
C     OVERLAY CALLS TO THESE LINKS ARE AUTOMATICALLY TRAPPED BY
C     CHAIN AND CONVERTED TO OVERLAY CALL TO DUMMYI.
C
C     DUMMYI DECIDES BETWEEN THE FOLLOWING LINKS:
C
C     LINK       SOURCE     GLD/GBR     CDC
C     ------     ------     -------     ----
C     SHELL      GL0306     GAU0306     10,1
C     UNCON      GL0307     GAU0307     10,2
C     PHOENX     GL0308     GAU0308     10,3
C*
      DIMENSION LINKNO(NOVER)
C?GLD
C     EQUIVALENCE (IOVLAY, ZOVLAY)
C??
C?GBR
C     EQUIVALENCE (MYID(1),ZMYID(1))
C??
C     LINKNO CONTAINS ALL THE POSSIBLE LINK NUMBERS.
C
      DATA LINKNO/100,101,201,202,
     1 301,302,303,0,0,306,307,308,309,310,311,
     2 401,402,403,501,502,503,0,505,506,507,601,602,603,
     3 701,702,703,704,3*0,708,709,710,711,
     4 801,802,803,901,902,903,904,905,906,907,6*0/
C?GBR DEFINE THE DISK AND DIRECTORY CONTAINING THE EXECUTABLE IMAGE.
C     DATA ZDIRECTORY/'@D2(GAU)'/
C     DATA ICNP/1, 0, Z'80000000', 3*0/
C     DATA CONSOLENOWAIT /.TRUE./
C??
C?GLD/GBR INITIALIZE LINK TIMER.
C     DATA ISAVET/0/
C??
C?CDC INITIALIZE LINK TIMER.
C     DATA SAVET/0.0E0/
C??
C     INITIALIZE TOTAL JOB TIMERS (THE TOTAL JOB TIME IN MINUTES IS
C     PASSED TO LNK1 IN VARIABLE E(1) IN COMMON /GEN/).
C
      DATA OJTIME/0.0D0/, TJTIME/0.0D0/, OCTIME/0.0D0/
C
C     ARRAY N AIDS IN THE EXTRACTION OF SUCCESIVE 4 BIT DIGITS FROM
C     A FULL WORD
C
      DATA N/268435456,16777216,1048576,65536,4096,256,16,1/
C*
C     JNUMB IS THE NUMBER OF THE GROUP/LINK CARD WHICH HAS JUST FINISHED
C     EXECUTING.
C
      DATA JNUMB/0/
C*
C     AVOID RE-LOADING AN OVERLAY IF POSSIBLE.
C     ZOLDOVER KEEPS TRACK OF THE EXTERNAL OVERLAY NUMBER LAST USED.
C?GLD/GBR
C     DATA ZOLDOVER/'       '/
C??
 1000 FORMAT('0LINK',I6,' NOT FOUND')
C?GLD
C1010 FORMAT('0*** ',I2,2(':',I2.2),' (ELAPSED CPU+IPU TIME',I7,
C    1 ' S)   ENTER LINK',I5,' ***')
C1020 FORMAT(1X,Z8,1X,2A4,' (',A3,') ',2A4,1X,I2,':',I2.2,' ENTER LINK',
C    1 I5)
C1030 FORMAT ('GAU',I4.4,' ')
C??
C?GBR
C1010 FORMAT('0*** ',A2,2(':',A2),' (ELAPSED CPU+IPU TIME',I7,
C    1 ' S)   ENTER LINK',I5,' ***')
C1020 FORMAT(1X,A8,1X,2A4,' (',A3,') ',2A4,1X,A2,':',A2,' ENTER LINK',
C    1 I5)
C1030 FORMAT ('GAU',I4.4,' ')
C??
C?IBM
C1010 FORMAT('0*** ENTER LINK',I5,' ***')
C??
C?VAX
C1010 FORMAT('0*** ',A8,'   ENTER LINK',I5,' ***')
C??
C?CDC
C1010 FORMAT('0*** ',A10,' (ELAPSED CPU TIME',F10.2,
C    1 ' S)   ENTER LINK',I5,' ***')
C??
C?UNX
 1010 FORMAT('0*** ',I2,2(':',I2.2),' (ELAPSED CPU TIME',F10.2,
     1 ' S)   ENTER LINK',I5,' ***')
C??
C     ON ENTRY PERFORM INITIALIZATION.
C
      IOP(1) = 0
      IOP(93) = 0
      NLINK = 0
      LNK(1) = 100
C?GBR INSERT CR/LF INTO CONSOLE MESSAGE, AND GET LENGTH OF DIRECTORY.
C     ZOUT(1:1) = CHAR(13)
C     ZOUT(2:2) = CHAR(10)
C     LZDIR = INDEX(ZDIRECTORY, ' ') - 1
C??
C     SAVE TIMING DATA (IOP(93) IS 0 FOR NO, 1 FOR YES).
C
    1 IPTIME=IOP(93)
      IOP(93)=0
C
    5 NLINK=NLINK+1
      IF(IOP(1).LT.0)GO TO 15
C
C     NCHAIN IS THE COMBINED NUMBER OF THE GROUP/LINK COMBINATION
C     CORRESPONDING EXACTLY TO THE NUMBERS WHICH APPEAR IN THE LNK1 MAP.
C     INUMB IS THE NUMBER OF THE PRESENT (YET TO BE EXECUTED) LINK.
C
   10 K=LNK(NLINK)
      INUMB=K/10000
      NCHAIN=K-INUMB*10000
C
C     IF NCHAIN IS NEGATIVE IT IS A JUMP INSTRUCTION TO BE EXECUTED
C
      IF(NCHAIN.GE.0)GO TO 20
C
C     WHETHER OR NOT EXECUTION TAKES PLACE DEPENDS ON THE VALUE
C     OF IOP(1) ... SEE ABOVE FOR THE USE OF IOP(1).
C
      IF(IOP(1).NE.0)NCHAIN=1
      NLINK=NLINK+NCHAIN
      IOP(1)=0
      GO TO 10
C
C     FATAL ERROR IN PREVIOUS LINK - PUNCH DENSITY?
C     IOP(1)=-999 FOR FIRST ENTRY TO LINK 0101.
C
   15 NCHAIN=101
      IF(IOP(1).EQ.-1)NCHAIN=601
      IF(IOP(1).EQ.-3)NCHAIN=301
      IF (IOP(1) .EQ. -999) IOP(1) = 999
      GO TO 70
C
C     CHECK IF ALL LINKS ARE TO SKIPPED.
C
   20 IF(IOP(1).EQ.2.AND.INUMB.NE.0)GO TO 5
C
C     IS THE NEW LINK FROM SAME GROUP AS OLD ONE ...
C     FOR EXAMPLE OLD 301 NEW 302
C     IF NOT SO THEN IT IS NECESSARY TO RELOAD OPTIONS
C
      IF(INUMB.EQ.JNUMB.OR.INUMB.EQ.0)GO TO 40
      K=12
      DO 30 I=1,10
      J=JOP(I,INUMB)
      DO 30 M=1,8
      K=K+1
      IOP(K)=J/N(M)
   30 J=J-IOP(K)*N(M)
C
C     BRING IN NEW SECTION OF CODE TO BE EXECUTED
C
   40 JNUMB=INUMB
      IOP(1)=0
C
C     LOOK UP THE NEW LINK IN LINKNO TO MAKE SURE IT IS VALID.
C
   70 DO 80 I=1,NOVER
      IF(NCHAIN.EQ.LINKNO(I))GO TO 90
   80 CONTINUE
C
C     NON-EXISTENT LINK.
C
      WRITE(IOUT,1000)NCHAIN
      IOP(1)=-2
      I=2
C?GLD WATCH FOR LINKS 0306-0308 WHICH MUST CALL DUMMYI INSTEAD.
C  90 J = NCHAIN
C     IF (J.GE.306 .AND. J.LE.308) J = 300
C     WRITE (ZOVLAY,1030) J
C     IF (ZOVLAY.NE.ZOLDOVER) CALL M:LOAD(IOVLAY,IOVL)
C     ZOLDOVER=ZOVLAY
C*    GOULD TIMING ROUTINES, WRITTEN TO CONSOLE UNLESS $OPTION 2 SET.
C     CALL M:TDAY(ITIME)
C     CALL M:EXETIM(J)
C*    CONVERT MILLISECONDS TO SECONDS
C     K=(J-ISAVET+500)/1000
C     ISAVET=J
C     TJTIME = DFLOAT((J+500)/1000)
C     J=MYID(11)/2
C     J=J-2*(J/2)
C     IF(NCHAIN.NE.302.OR.J.NE.0.OR.IOP(10).EQ.0)GO TO 95
C     ENCODE(55,1020,IWRITE(3))(MYID(J),J=1,4),MYID(6),MYID(7),
C    1 ITIME(1),ITIME(2),NCHAIN
C     IF (IWRITE(40) .EQ. I1BLK) IWRITE(40) = I1ZERO
C     CALL M:TELEW(IWRITE,57)
C  95 IF(IPTIME.EQ.1)WRITE(IOUT,1010)ITIME(1),ITIME(2),ITIME(3),K,NCHAIN
C??
C?GBR WATCH FOR LINKS 0306-0308 WHICH MUST CALL DUMMYI INSTEAD.
C  90 J = NCHAIN
C     IF (J.GE.306 .AND. J.LE.308) J = 300
C     WRITE (ZOVLAY,1030) J
C     IF (ZOVLAY .NE. ZOLDOVER) THEN
C        IF (ZOLDOVER .NE. ' ') THEN
C           CALL MPXUNSHAREIMAGE (IMAGEINDEX, ICNP, ISTAT)
C           IF (ISTAT .NE. 0) THEN
C              WRITE (IOUT,9000) ZOLDOVER, ISTAT
C9000          FORMAT ('0*** ATTEMPT TO UNSHARE IMAGE ',A8,
C    1          ' FAILED, ISTAT =',I4,', IN CHAIN.')
C              STOP
C           END IF
C        END IF
C        CALL MPXSHAREIMAGE (ZDIRECTORY(1:LZDIR)//ZOVLAY,
C    1    ICNP, IMAGEINDEX, ISTAT)
C        IF (ISTAT .NE. 0) THEN
C           WRITE (IOUT,9010) ZOVLAY, ISTAT
C9010       FORMAT ('0*** ATTEMPT TO SHARE IMAGE ',A8,
C    1       ' FAILED, ISTAT =',I4,', IN CHAIN.')
C           STOP
C        END IF
C     END IF
C     ZOLDOVER = ZOVLAY
C*    GOULD TIMING ROUTINES, WRITTEN TO CONSOLE UNLESS $OPTION 2 SET.
C     CALL OSTIME (ZDATE, ZTIME)
C     CALL M_EXETIM (J)
C*    CONVERT MILLISECONDS TO SECONDS.
C     K = (J-ISAVET+500) / 1000
C     ISAVET = J
C     TJTIME = DFLOAT((J+500)/1000)
C     J = MYID(11) / 2
C     J = J - 2*(J/2)
C     IF (NCHAIN.NE.302 .OR. J.NE.0 .OR. IOP(10).EQ.0) GO TO 95
C     ZTASKNO = HEXTOASC(MYID(1))
C     WRITE (ZOUT(3:),1020) ZTASKNO, (ZMYID(J),J=2,4), ZMYID(6),
C    1 ZMYID(7), ZTIME(1:2), ZTIME(3:4), NCHAIN
C     J = 2
C     M = 1
C     CALL MPXCONSOLE (ZOUT, ZIN(J:M), CONSOLENOWAIT, ISTAT)
C  95 IF (IPTIME .EQ. 1) WRITE (IOUT,1010) ZTIME(1:2), ZTIME(3:4),
C    1 ZTIME(5:6), K, NCHAIN
C??
C?IBM NO OVERLAY CALL USED.
C  90 IF (IPTIME .EQ. 1) WRITE (IOUT,1010) NCHAIN
C??
C?VAX NO OVERLAY CALL USED.
C  90 CALL TIME (TYME)
C     IF (IPTIME .EQ. 1) WRITE (IOUT,1010) TYME, NCHAIN
C??
C?UNX NO OVERLAY CALL USED.
   90 CONTINUE
C*    USE THE NEXT 3 LINES FOR SYSTEMS WITH BSD FORTRAN LIBRARIES.
      CALL ITIME (IARRAY)
      CTIME = DTIME (TARRAY)
      TJTIME = ETIME (TARRAY)
C*    END OF CODE FOR SYSTEMS WITH BSD FORTRAN LIBRARIES.
C*    USE THE NEXT 6 LINES FOR HP-UX SYSTEMS WITH NO BSD LIBRARIES.
C*    IARRAY(1) = 0
C*    IARRAY(2) = 0
C*    IARRAY(3) = 0
C*    TJTIME = ZERO
C*    CTIME = TJTIME - OCTIME
C*    OCTIME = TJTIME
C*    END OF CODE FOR HP-UX SYSTEMS WITH NO BSD FORTRAN LIBRARIES.
C*    USE THE NEXT 6 LINES FOR IBM RS/6000 SYSTEMS.
C*    IARRAY(1) = 0
C*    IARRAY(2) = 0
C*    IARRAY(3) = 0
C*    TJTIME = MCLOCK() / HUNDRD
C*    CTIME = TJTIME - OCTIME
C*    OCTIME = TJTIME
C*    END OF CODE FOR IBM RS/6000 SYSTEMS.
      IF (IPTIME .EQ. 1) WRITE (IOUT,1010) IARRAY, CTIME, NCHAIN
C*    USE THE NEXT LINE FOR SYSTEMS WITH BSD FORTRAN LIBRARIES.
      IF (I .GT. 1) CALL FLUSH (IOUT)
C*    END OF CODE FOR SYSTEMS WITH BSD FORTRAN LIBRARIES.
C??
C?IBM/GLD/GBR/VAX/UNX
      GO TO (100,101,201,202,
     1 301,302,303,101,101,300,300,300,309,310,311,
     2 401,402,403,501,502,503,101,505,506,507,601,602,603,
     3 701,702,703,704,101,101,101,708,709,710,711,
     4 801,802,803,901,902,903,904,905,906,907),I
C*    INITIALIZATION.
  100 CALL SETUP
      GO TO 5
C*    READ NEW ROUTE SINCE CURRENT ROUTE FINISHED.
C*    PASS THE TOTAL CPU TIME FOR THIS JOB IN E(1) IN COMMON /GEN/.
  101 E(1) = (TJTIME-OJTIME) / SIXTY
      CALL LNK1
      IF(IOP(1).NE.0)RETURN
      JNUMB=0
      OJTIME = TJTIME
      GO TO 1
  201 CALL STDGEO
      GO TO 5
  202 CALL VGEOM
      GO TO 5
  301 CALL GINPUT
      GO TO 5
  302 CALL STVINT
      GO TO 5
  303 CALL DIPOLE
      GO TO 5
  300 CALL DUMMYI
      GO TO 5
  309 CALL DSTVWT
      GO TO 5
  310 CALL DPHNXW
      GO TO 5
  311 CALL SECINT
      GO TO 5
  401 CALL RHFIN
      GO TO 5
  402 CALL GUESS
      GO TO 5
  403 CALL SECORT
      GO TO 5
  501 CALL CLOSED
      GO TO 5
  502 CALL UHFOPN
      GO TO 5
  503 CALL GSCF
      GO TO 5
  505 CALL ZCLOSE
      GO TO 5
  506 CALL ZUHF
      GO TO 5
  507 CALL ZRHF
      GO TO 5
  601 CALL POPGEN
      GO TO 5
  602 CALL PMO
      GO TO 5
  603 CALL ZMOROK
      GO TO 5
  701 CALL FORCEB
      GO TO 5
  702 CALL FORCE
      GO TO 5
  703 CALL DTWOL
      GO TO 5
  704 CALL DPHNIX
      GO TO 5
  708 CALL CPHF
      GO TO 5
  709 CALL DD1E
      GO TO 5
  710 CALL DD2E
      GO TO 5
  711 CALL GBOPT
      GO TO 5
  801 CALL BOYLOC
      GO TO 5
  802 CALL OEPROP
      GO TO 5
  803 CALL DIPSQ
      GO TO 5
  901 CALL INTRAN
      GO TO 5
  902 CALL COUPLE
      GO TO 5
  903 CALL CONFIG
      GO TO 5
  904 CALL INTSRT
      GO TO 5
  905 CALL FORMTP
      GO TO 5
  906 CALL CIROOT
      GO TO 5
  907 CALL OEPMO
      GO TO 5
C??
C?CDC WATCH FOR LINKS 0306-0308 WHICH MUST CALL DUMMYI INSTEAD.
C  90 TYME=TIME()
C     CPU=SECOND()
C     TJTIME = CPU
C     ELAPSE=CPU-SAVET
C     SAVET=CPU
C     IF (IPTIME.NE.0) WRITE(IOUT,1010)TYME,ELAPSE,NCHAIN
C     IF (I.EQ.11 .OR. I.EQ.12) I = 10
C*    PASS TOTAL CPU TIME FOR THIS JOB TO LNK1 IN E(1) IN COMMON /GEN/.
C     IF (I .EQ. 2) E(1) = (TJTIME-OJTIME) / SIXTY
C     CALL OVERLAY('GAUSS',I,0,'RECALL')
C     IF(I.NE.2)GO TO 5
C     IF (IOP(1).NE.0) RETURN
C     JNUMB=0
C     OJTIME = TJTIME
C     GO TO 1
C??
      END
      SUBROUTINE TREAD(IFILE,X,M,N,MM,NN,K)
C
C     --------------
C     U OF T VERSION
C     MARCH 1988
C     --------------
C
C     MONSTERGAUSS MATRIX FILE READ ROUTINE
C
C     IFILE IS THE INDEX (PARTITION OR SUB-FILE) NUMBER ON UNIT IMAT.
C     X IS A DOUBLE PRECISION ARRAY DECLARED AS (M,N) IN THE CALLING
C     PROGRAM, TO WHICH THE PORTION (MM,NN) IS TO BE READ.
C     K=0 TO READ THE ENTIRE MM X NN MATRIX.
C     K=1 TO READ THE UPPER TRIANGLE BY COLUMNS. THE FULL MATRIX
C     IS RETURNED. MM AND NN SHOULD BE EQUAL.
C
      COMMON/IO/IN,IOUT,IPUNCH,IMAT,ITWOEL,IODUM(12),NFILE(100,2)
C
      DOUBLE PRECISION X(M,N)
C#
C     PARAMETER (IRECL=#IRECL)
C##
      PARAMETER (IRECL=  6400)
C###
      PARAMETER (IRECL8=IRECL/8)
C?GBR GOULD BASE REGISTER STATUS FOR NO-WAIT I/O UNIT NOT READY.
C     DATA NW_NOT_READY /Z'230F0001'/
C??
C     HOW MANY ELEMENTS ARE TO BE READ.
C
      IREST=0
      IX=MM*NN
      IF((M.EQ.MM.OR.NN.EQ.1).AND.K.EQ.0)GO TO 100
      IF(K.NE.0)IX=(IX+MM)/2
      IREST=1
C
C     CHECK THAT DATA DOES NOT EXCEED AVAILABLE DATA.
C
  100 IF (IX .GT. NFILE(IFILE,1)) GO TO 9000
C
C     READ THE DATA IN RECORDS OF LENGTH IRECL8.
C
      IXEND = 0
      IREC = NFILE(IFILE,2) - 1
C
  120 IXSTRT = IXEND + 1
      IF (IXSTRT .GT. IX) GO TO 190
      IXEND = MIN0(IXEND+IRECL8,IX)
      IREC = IREC + 1
C?GLD USE RANDOM ACCESS BUFFERIN.
C     NWORDS = 2 * (IXEND-IXSTRT+1)
C     CALL BUFFERIN (IMAT, 1, X(IXSTRT,1), NWORDS, , , IREC)
C     CALL M:WAIT (IMAT)
C     CALL STATUS (IMAT, ISTAT, NBYTES)
C     IF (ISTAT.NE.2 .OR. NBYTES.NE.4*NWORDS) GO TO 9000
C??
C?GBR USE RANDOM ACCESS NO-WAIT I/O.
C     NBYTESIN = 8 * (IXEND-IXSTRT+1)
C     CALL FTNNWIO_DIRIN (IMAT, IREC, 1, X(IXSTRT,1), NBYTESIN, 0, 0)
C 150 CALL MPXEAWAIT (0, ISTAT)
C     CALL FTNNWIO_ST (IMAT, ISTAT, NBYTES)
C     IF (ISTAT .EQ. NW_NOT_READY) GO TO 150
C     IF (ISTAT.NE.0 .OR. NBYTES.NE.NBYTESIN) GO TO 9000
C??
C?IBM/CDC/VAX/UNX
      READ (UNIT=IMAT, REC=IREC) (X(I,1),I=IXSTRT,IXEND)
C??
      GO TO 120
C
C     RESTORE THE MATRIX IF NECESSARY.
C
  190 IF(IREST.EQ.0)RETURN
C
      DO 200 JJ=1,NN
      J=NN+1-JJ
      ILIM=J
      IF(K.EQ.0)ILIM=MM
      DO 200 II=1,ILIM
      I=ILIM+1-II
      X(I,J)=X(IX,1)
  200 IX=IX-1
C
      IF(K.EQ.0)RETURN
C
      DO 210 I=1,NN
      DO 210 J=1,I
  210 X(I,J)=X(J,I)
      RETURN
C
C     ERROR EXIT.
C
 9000 WRITE (IOUT,9001) IFILE,M,N,MM,NN,K,IX,NFILE(IFILE,1),
     1 NFILE(IFILE,2)
 9001 FORMAT ('0*** FATAL INTERNAL ERROR IN MONSTERGAUSS ROUTINE ',
     1 'TREAD:'/'0IFILE =',I6,3X,'M =',I12,3X,'N =',I12,3X,
     2 'MM =',I12,3X,'NN =',I12,3X,'K =',I5/
     3 ' ATTEMPT TO READ IX =',I12,' DATA ITEMS WHEN LIMIT = ',
     4 'NFILE(IFILE,1) =',I12,', NFILE(IFILE,2) =',I12/
     5 '0SEE YOUR MONSTERGAUSS SUPPLIER FOR ASSISTANCE.')
C?GLD
C     WRITE (IOUT,9002) IREC, ISTAT, NWORDS, NBYTES
C9002 FORMAT ('0BUFFERIN STATUS: IREC =',I8,
C    1 ', ISTAT =',I3,', NWORDS =',I8,', NBYTES =',I8)
C??
C?GBR
C     WRITE (IOUT,9002) IREC, ISTAT, NBYTESIN, NBYTES
C9002 FORMAT ('0FTNNWIO_DIRIN STATUS: IREC =',I8,
C    1 ', ISTAT =',I15,', NBYTESIN =',I8,', NBYTES =',I8)
C     CALL SYSGETSTATUS (ISTAT, I, II, J, JJ, L)
C     WRITE (IOUT,9003) I, II, J, JJ, L
C9003 FORMAT (' DECODED STATUS: SEVERITY:',I2,', ERROR CODE:',
C    1 I3,':',I3,':',I5,', MPXGETSTATUS:',I15)
C??
      STOP
      END
      SUBROUTINE TWRITE(IFILE,X,M,N,MM,NN,K)
C
C     --------------
C     U OF T VERSION
C     MARCH 1988
C     --------------
C
C     MONSTERGAUSS MATRIX FILE WRITE ROUTINE
C
C     IFILE IS THE INDEX (PARTITION OR SUB-FILE) NUMBER ON UNIT IMAT.
C     X IS A DOUBLE PRECISION ARRAY DECLARED AS (M,N) IN THE CALLING
C     PROGRAM, FROM WHICH THE PORTION (MM,NN) IS TO BE WRITTEN.
C     K=0 TO WRITE THE ENTIRE MM X NN MATRIX.
C     K=1 TO WRITE THE UPPER TRIANGLE BY COLUMNS. THE FULL MATRIX
C     IS RETURNED. MM AND NN SHOULD BE EQUAL.
C
      COMMON/IO/IN,IOUT,IPUNCH,IMAT,ITWOEL,IODUM(12),NFILE(100,2)
C
      DOUBLE PRECISION X(M,N)
C#
C     PARAMETER (IRECL=#IRECL)
C##
      PARAMETER (IRECL=  6400)
C###
      PARAMETER (IRECL8=IRECL/8)
C?GBR GOULD BASE REGISTER STATUS FOR NO-WAIT I/O UNIT NOT READY.
C     DATA NW_NOT_READY /Z'230F0001'/
C??
C     LINEARIZE THE MATRIX UNLESS ALREADY LINEAR.
C
      IREST=0
      IX=MM*NN
      IF((M.EQ.MM.OR.NN.EQ.1).AND.K.EQ.0)GO TO 110
      IREST=1
      IX=0
      DO 100 J=1,NN
      ILIM=J
      IF(K.EQ.0)ILIM=MM
      DO 100 I=1,ILIM
      IX=IX+1
  100 X(IX,1)=X(I,J)
C
C     CHECK THAT DATA DOES NOT EXCEED AVAILABLE SPACE.
C
  110 IF (IX .GT. NFILE(IFILE,1)) GO TO 9000
C
C     WRITE THE DATA IN RECORDS OF LENGTH IRECL8.
C
      IXEND = 0
      IREC = NFILE(IFILE,2) - 1
C
  120 IXSTRT = IXEND + 1
      IF (IXSTRT .GT. IX) GO TO 190
      IXEND = MIN0(IXEND+IRECL8,IX)
      IREC = IREC + 1
C?GLD USE RANDOM ACCESS BUFFEROUT.
C     NWORDS = 2 * (IXEND-IXSTRT+1)
C     CALL BUFFEROUT (IMAT, 1, X(IXSTRT,1), NWORDS, , , IREC)
C     CALL M:WAIT (IMAT)
C     CALL STATUS (IMAT, ISTAT, NBYTES)
C     IF (ISTAT.NE.2 .OR. NBYTES.NE.4*NWORDS) GO TO 9000
C??
C?GBR USE RANDOM ACCESS NO-WAIT I/O.
C     NBYTESOUT = 8 * (IXEND-IXSTRT+1)
C     CALL FTNNWIO_DIROUT (IMAT, IREC, 1, X(IXSTRT,1), NBYTESOUT, 0, 0)
C 150 CALL MPXEAWAIT (0, ISTAT)
C     CALL FTNNWIO_ST (IMAT, ISTAT, NBYTES)
C     IF (ISTAT .EQ. NW_NOT_READY) GO TO 150
C     IF (ISTAT.NE.0 .OR. NBYTES.NE.NBYTESOUT) GO TO 9000
C??
C?IBM/CDC/VAX/UNX
      WRITE (UNIT=IMAT, REC=IREC) (X(I,1),I=IXSTRT,IXEND)
C??
      GO TO 120
C
C     RESTORE THE MATRIX IF REQUIRED.
C
  190 IF(IREST.EQ.0)RETURN
C
      DO 200 JJ=1,NN
      J=NN+1-JJ
      ILIM=J
      IF(K.EQ.0)ILIM=MM
      DO 200 II=1,ILIM
      I=ILIM+1-II
      X(I,J)=X(IX,1)
  200 IX=IX-1
C
      IF(K.EQ.0)RETURN
C
      DO 210 I=1,NN
      DO 210 J=1,I
  210 X(I,J)=X(J,I)
      RETURN
C
C     ERROR EXIT.
C
 9000 WRITE (IOUT,9001) IFILE,M,N,MM,NN,K,IX,NFILE(IFILE,1),
     1 NFILE(IFILE,2)
 9001 FORMAT ('0*** FATAL INTERNAL ERROR IN MONSTERGAUSS ROUTINE ',
     1 'TWRITE:'/'0IFILE =',I6,3X,'M =',I12,3X,'N =',I12,3X,
     2 'MM =',I12,3X,'NN =',I12,3X,'K =',I5/
     3 ' ATTEMPT TO WRITE IX =',I12,' DATA ITEMS WHEN LIMIT = ',
     4 'NFILE(IFILE,1) =',I12,', NFILE(IFILE,2) =',I12/
     5 '0SEE YOUR MONSTERGAUSS SUPPLIER FOR ASSISTANCE.')
C?GLD
C     WRITE (IOUT,9002) IREC, ISTAT, NWORDS, NBYTES
C9002 FORMAT ('0BUFFEROUT STATUS: IREC =',I8,
C    1 ', ISTAT =',I3,', NWORDS =',I8,', NBYTES =',I8)
C??
C?GBR
C     WRITE (IOUT,9002) IREC, ISTAT, NBYTESOUT, NBYTES
C9002 FORMAT ('0FTNNWIO_DIROUT STATUS: IREC =',I8,
C    1 ', ISTAT =',I15,', NBYTESOUT =',I8,', NBYTES =',I8)
C     CALL SYSGETSTATUS (ISTAT, I, II, J, JJ, L)
C     WRITE (IOUT,9003) I, II, J, JJ, L
C9003 FORMAT (' DECODED STATUS: SEVERITY:',I2,', ERROR CODE:',
C    1 I3,':',I3,':',I5,', MPXGETSTATUS:',I15)
C??
      STOP
      END
C?IBM/GLD/GBR/VAX/UNX
      SUBROUTINE SETUP
C??
C?CDC
C     PROGRAM SETUP
C??
C     --------------
C     U OF T VERSION
C     AUGUST 1991
C     --------------
C*
C     THIS ROUTINE LOADS VARIOUS ITEMS OF DATA NECESSARY
C     FOR THE EXECUTION OF MONSTERGAUSS.
C*
C     CHANGES IN THIS ROUTINE MAY NECESSITATE CHANGES IN PROGRAMS
C     'CONVERT1' AND/OR 'CONVERT2', WHICH CONVERT ONE VERSION OF
C     MONSTERGAUSS TO ANOTHER. SEE FILE SRC/CONVRT.F FOR MORE
C     DETAILS.
C*
C=IBM JCL AND DISK FILES
C CHAPTER 3: IBM JCL AND DISK FILE USAGE.
C **********
C
C1IBM-JCL
C1DISK-FILES
C     IBM DATASETS NECESSARY FOR THE EXECUTION OF MONSTERGAUSS.
C
C     FT01F001 ... COEFFICIENTS/DENSITY INPUT FOR INITIAL GUESS
C     (DD DUMMY UNLESS ASSIGNED TO A DISK FILE).
C
C     FT05F001 ... CONTROL CARDS PLUS DATA (DD *)
C
C     FT06F001 ... PRINTED OUTPUT (DD SYSOUT=A)
C
C     FT07F001 ... PUNCHED OUTPUT (DD SYSOUT=B)
C
C     FT08F001 ... MATRIX SCRATCH FILE (DD UNIT=SYSDA,
C     SPACE=(#IRECL,(#NBLOCK)),DCB=(DSORG=DA,RECFM=F,BLKSIZE=#IRECL) )
C     WHERE #NBLOCK IS THE TOTAL NUMBER OF BLOCKS DETERMINED BY
C     PROGRAM 'CONVERT2', WITH BLOCK SIZE #IRECL BYTES.
C
C     FT09F001 ... TWO ELECTRON INTEGRALS (DD UNIT=SYSDA,
C     SPACE=(12296,(200,50)),DCB=(DSORG=PS,RECFM=VS,BLKSIZE=12296,
C     LRECL=12292) )
C     (NOTE: 200 BLOCKS IS OK FOR UP TO 50 AO).
C
C     FT10F001 ... TRANSFORMED ONE AND TWO ELECTRON INTEGRALS (DD
C     UNIT=SYSDA,SPACE=(6232,(50,50)),DCB=(DSORG=PS,RECFM=VS,
C     BLKSIZE=6232,LRECL=6228) )
C
C     FT11F001 ... GSCF SCRATCH / CI / MRDCI (DD UNIT=SYSDA,
C     SPACE=(6232,(200,100)),DCB=(DSORG=PS,RECFM=VS,BLKSIZE=6232,
C     LRECL=6228) )
C     FOR THE GSCF ROUTINE, THIS UNIT MUST BE ABLE TO CONTAIN
C     #NBB*#NF DOUBLEWORDS.
C
C     FT12F001 ... GSCF SCRATCH / SORTED MO INTEGRALS (DD UNIT=SYSDA,
C     SPACE=(6232,(50,50)),DCB=(DSORG=PS,RECFM=VS,
C     BLKSIZE=6232,LRECL=6228) )
C     FOR THE GSCF ROUTINE, THIS UNIT MUST BE ABLE TO CONTAIN
C     #NBB*#NF DOUBLEWORDS.
C
C     FT13F001 ... MO INTEGRAL LABELS (DD UNIT=SYSDA,
C     SPACE=(6232,(25,25)),DCB=(DSORG=PS,RECFM=VS,
C     BLKSIZE=6232,LRECL=6228) )
C
C     FT14F001 ... COUPLING COEFFICIENTS (DD UNIT=SYSDA,
C     SPACE=(6232,(30)),DCB=(DSORG=PS,RECFM=VS,
C     BLKSIZE=6232,LRECL=6228) )
C
C     FT15F001 ... CI FORMULA TAPE (DD UNIT=SYSDA,
C     SPACE=(6232,(3000,1000)),DCB=(DSORG=PS,RECFM=VS,
C     BLKSIZE=6232,LRECL=6228) )
C
C     FT16F001 ... TWO ELECTRON INTEGRAL DERIVATIVES (DD UNIT=SYSDA,
C     SPACE=(12296,(200,50)),DCB=(DSORG=PS,RECFM=VS,BLKSIZE=12296,
C     LRECL=12292) )
C
C     FT19F001 ... SETUP ROUTINE DEBUG OUTPUT (DD DUMMY FOR
C     NORMAL OPERATION, DD SYSOUT=A FOR TESTING PURPOSES).
C
C     NOTES:
C     (1) THERE WAS NO ADVANTAGE TO DOUBLE BUFFERING (THE DEFAULT)
C     FOR THE FORTRAN H-EXTENDED VERSION, BUT THE BEST OPTION FOR
C     THE CURRENT VERSION (USING THE FORTRAN-VS COMPILER) HAS NOT BEEN
C     DETERMINED - IF YOU DO SOME TESTS, PLEASE INFORM THE AUTHORS OF
C     YOUR RESULTS SO FUTURE GENERATIONS WILL KNOW WHAT TO DO.
C     THIS IS SPECIFIED ADDING BUFNO=1 OR BUFNO=2 TO THE DCB FOR EACH
C     FILE (THE ASYNCHRONOUS I/O UNITS 'IMAT', 'ITWOEL' AND 'ITWODR'
C     SHOULD ALSO BE TESTED).
C
C     (2) THE BLOCK AND RECORD SIZES ON UNITS 10 THROUGH 15 ARE
C     (RELATIVELY) ARBITRARY:
C     APPARENTLY A REASONABLE BLOCK SIZE FOR IBM 3350 AND 3380 DISK
C     DRIVES IS 6233 BYTES (OR LESS) - THUS BLKSIZE=6232 AND
C     LRECL=BLKSIZE-4=6228 WERE CHOSEN, ALTHOUGH SOME EXPERIMENTATION
C     BY THE USER ON YOUR COMPUTER SYSTEM MAY YIELD BETTER VALUES. THE
C     PRIMARY ALLOCATIONS ARE GOOD FOR ABOUT 20 MO IN THE CI, BUT UP
C     TO 5 EXTENTS MAY BE NEEDED TO HANDLE 40 MO.
C
C     (3) UNITS 11 AND 12 ARE ALSO REQUIRED IN THE GENERALIZED
C     SCF, LINK 0503. UNIT 11 IS USED TO STORE THE MRDCI DATA.
C
C     (4) UNIT 15 IS ALSO REQUIRED IN THE ENERGY DECOMPOSITION / BSSE
C     TO HOLD SELECTED 2-ELECTRON INTEGRALS, AND IN THE LMO FINITE
C     FIELD POLARIZABILITY CALCULATION.
C
C     (5) UNITS NOT NEEDED FOR A GIVEN CALCULATION MAY BE DEFINED AS
C     'FTXXF001 DD DUMMY'.
C*
C=IBM JCL AND DISK FILES
C     ******************************************************************
C     DICTIONARY OF DISK FILES (LENGTH IN DOUBLEWORDS, FOLLOWED BY
C     THE ACTUAL RECORD NUMBERS (ON UNIT 8) USED ARE GIVEN IN BRACKETS).
C     ******************************************************************
C*
C     THESE VALUES APPLY ONLY FOR THE FOLLOWING PARAMETER VALUES:
C     #NA     =      30 NUMBER OF ATOMS
C     #NB     =      80 NUMBER OF BASIS FUNCTIONS (A.O.'S)
C     #NS     =      50 NUMBER OF SHELLS
C     #NP     =     180 NUMBER OF PRIMITIVE GAUSSIANS
C     #NR     =      49 NUMBER OF OCCUPIED ORBITALS IN RHF
C     #NF     =      50 NUMBER OF FOCK MATRICES IN RHF
C     #NC     =      50 NUMBER OF CONFIGURATIONS IN RHF
C     #NO     =     125 NUMBER OF OPTIMIZABLE PARAMETERS
C     #NT     =      36 NUMBER OF TRANSFORMED ORBITALS (M.O.'S)
C     #NCON   =   13000 NUMBER OF CONFIGURATIONS IN CI
C     #MA     =      10 NUMBER OF ACTIVE OCCUPIED MO IN CI
C     #MV     =      34 NUMBER OF ACTIVE SUBSTITUTING MO IN CI
C     #IRECL  =    6144 RECORD SIZE IN BYTES
C*
C      1      OPTIMIZATION CONTROL AND RESTART (431: 120)
C      2      SCALE FACTORS AND RAW COEFFICIENTS (410: 12)
C      3      ERROR FUNCTION INTERPOLATION TABLE (7200: 1-10)
C      4      SCRATCH SCF/PMO/CI (6400: 74-82)
C      5      EIGENVALUES AND RHF SAVE DATA (427: 83)
C      6      BASIS SET (691: 11)
C      7      SURFACE SCAN INCREMENTS (114: 137)
C      8      OVERLAP MATRIX S (3420: 13-17)
C      9      CI CONFIGURATION SAVE DATA (1115: 134-135)
C     10      OC/BFGS/VA05 SAVE DATA (1375: 121-122)
C     11      OC/BFGS/VA05 SAVE DATA (8100: 125-135)
C     12      INTEGRAL TRANSFORMATION SAVE DATA (54: 136)
C     13      CORE HAMILTONIAN (T+V) (3240: 59-63)
C     14      FORCES (1628: 154-156)
C     15      FOCK MATRIX  ALPHA SPIN OR CLOSED SHELL (3240: 64-68)
C     16      NOT USED
C     17      FOCK MATRIX  BETA SPIN (3240: 69-73)
C     18      NOT USED
C     19      DENSITY MATRIX  ALPHA SPIN OR CLOSED SHELL (3240: 18-22)
C     20      NOT USED
C     21      DENSITY MATRIX  BETA SPIN (3240: 23-27)
C     22 - 24 NOT USED
C     25      MO COEFFICIENTS  ALPHA SPIN OR CLOSED SHELL (6400: 84-92)
C     26      NOT USED
C     27      MO COEFFICIENTS  BETA SPIN (6400: 93-101)
C     28 - 30 NOT USED
C     31 - 32 SCRATCH SCF/PMO/CI (EACH 8182: 28-38, 39-49)
C     33      SCRATCH SCF/PMO/CI (6480: 50-58)
C     34 - 36 X Y Z INTEGRALS (EACH 3240: 138-142, 143-147, 148-152)
C     37 - 39 NOT USED
C     40      SCRATCH GSCF/LMO/ED/BSSE (6400: 102-110)
C     41      ENERGY DECOMP / BSSE COEFFICIENTS (6400: 157-165)
C     42      SCRATCH GSCF/LMO/ED/BSSE (6400: 111-119)
C     43      ENERGY DECOMP / BSSE COEFFICIENTS (6400: 166-174)
C     44      ENERGY DECOMP / BSSE SAVE DATA (108: 175)
C     45      NOT USED
C     46      ED / BSSE RHF SAVE DATA FOR A (427: 188)
C     47      ED / BSSE RHF SAVE DATA FOR B (427: 189)
C     48      NOT USED
C     49      FUNDAMENTAL CONSTANTS AND OEP SAVE DATA (425: 153)
C     50      FORCE CONSTANTS (8100: 176-186)
C     51 -100 NOT USED.
C
C     TOTAL LENGTH IS 144384 DOUBLEWORDS (188 RECORDS OF 6144 BYTES).
C*
C     FILES 4 AND 31 ARE USED FOR TEMPORARY STORAGE OF THE BASIS
C     SET AND OVERLAP MATRICES FOR PROJECTED INITIAL GUESSES.
C
C     FILE 32 IS USED FOR TEMPORARY STORAGE DURING RHF INITIAL GUESSES.
C
C     FILES 17, 21 AND 27 SAVE OVERLAP, FOCK AND COEFFICIENT MATRICES
C     DURING PMO RUNS.
C
C     FILES 17, 21 AND 27 SAVE MO BASIS RESULTS DURING CLOSED
C     SHELL ENERGY DECOMPOSITION / BSSE RUNS.
C
C     FILE 4 IS USED FOR TEMPORARY STORAGE DURING POLARIZATION RUNS.
C
C     FILE 42 IS USED TO STORE THE LMO 'T' MATRIX FOR RUNS WITH IOP(27)
C     SET IN LINK 0802.
C     ******************************************************************
C==
C*
C/
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C#
C     PARAMETER (NA=#NA, NB=#NB)
C     PARAMETER (NS=#NS, NP=#NP)
C     PARAMETER (NR=#NR, NF=#NF, NC=#NC, NE=2*NB)
C     PARAMETER (NO=#NO)
C     PARAMETER (NT=#NT, NCON=#NCON , MA=#MA, MV=#MV)
C     PARAMETER (IRECL=#IRECL, NBLOCK=#NBLOCK)
C##
      PARAMETER (NA= 36, NB=200)
      PARAMETER (NS=120, NP=300)
      PARAMETER (NR=101, NF=120, NC=120, NE=2*NB)
      PARAMETER (NO=125)
      PARAMETER (NT= 70, NCON= 32000, MA= 25, MV= 50)
      PARAMETER (IRECL=  6400, NBLOCK=    960)
C###
      PARAMETER (NA3=3*NA, NZ=NA3-6,
     1 NV=NA3/2, NFOR=8+6*NA3+6*NP)
      PARAMETER (NBB=NB*(NB+1)/2, NB1=NB*(NB+1),
     1 NB2=NB*NB)
      PARAMETER (NF2=NF+2)
      PARAMETER (MA1=MA*(MA+1)/2, MV1=MV*(MV+1)/2)
C
      COMMON /A/ IOP(99),IC1(NA),IC2(7),CD1(NA,3),CD2(4),
     1 LNK(100),NLINK,JOP(10,30)
C
C     USE OF COMMON /GLDDATA/ (GOULD COMPUTER ONLY):
C     MYID(1): TASK NUMBER (HEXADECIMAL).
C     MYID(2)-MYID(3): LOAD MODULE NAME (ASCII).
C     MYID(4)-MYID(5): TASK OWNER NAME (ASCII).
C     MYID(6)-MYID(7): TASK PSEUDONYM (ASCII).
C     MYID(8)-MYID(9): TASK USER NAME (ASCII).
C     MYID(10): SAVES DIRECT ACCESS RECORD LENGTH IN DOUBLE WORDS.
C     MYID(11): PROGRAM OPTIONS ($OPTION).
C     MYID(12): MAP BLOCK SIZE IN DOUBLE WORDS.
C?GLD/GBR
C     COMMON /GLDDATA/ MYID(12)
C??
      COMMON/IO/IN,IOUT,IPUNCH,IMAT,ITWOEL,IMOINT,ISCRCH,IFINT,
     1 ILABEL,ICOUPL,IFORMT,ITWODR,IOSPAR(5),NFILE(100,2)
C
      LOGICAL ERROR
C?UNX
      CHARACTER ZENV*7, ZFILE*256
C??
      DATA ERROR/.FALSE./
C
C     SET MACHINE DEPENDENT CONSTANTS:
C     IREAL: ALWAYS SET TO 2 (NUMBER OF WORDS PER DOUBLE PRECISION
C            VARIABLE ON IBM/GLD/GBR/VAX/UNX).
C     IINT : SET TO LENGTH OF AN INTEGER(*4) VARIABLE RELATIVE TO A
C            DOUBLE PRECISION VARIABLE. IINT=1 ON IBM/GLD/GBR/VAX/UNX;
C            =2 ON CDC SINCE DOUBLE PRECISION VARIABLES ARE REPLACED BY
C            'REAL' VARIABLES AND BOTH 'REAL' AND 'INTEGER' DATA OCCUPY
C            THE SAME AMOUNT OF MEMORY ON CDC MACHINES.
C?IBM/GLD/GBR/VAX/UNX
      DATA IREAL/2/, IINT/1/
C??
C?CDC
C     DATA IREAL/2/, IINT/2/
C??
C     THE FOLLOWING DATA STATEMENT DEFINES THE DEBUG OUTPUT
C     FILE CODE.
C
      DATA LFC/19/
C
C     GENERATE INTERPOLATION TABLE EVERY TIME.
C
      DATA IGAM/1/
C
C     PRESET COMMON /IO/:
C     IN ... CARD INPUT UNIT NUMBER.
C     IOUT ... PRINTED OUTPUT UNIT NUMBER.
C     IPUNCH ... PUNCHED OUTPUT UNIT NUMBER.
C     IMAT ... MATRIX SCRATCH FILE UNIT NUMBER.
C     ITWOEL ... TWO ELECTRON INTEGRALS UNIT NUMBER.
C     IMOINT ... TRANSFORMED INTEGRALS UNIT NUMBER.
C     ISCRCH ... SCRATCH FILE UNIT NUMBER.
C     IFINT ... SORTED INTEGRALS UNIT NUMBER.
C     ILABEL ... INTEGRAL LABELS UNIT NUMBER.
C     ICOUPL ... COUPLING CONSTANTS UNIT NUMBER.
C     IORMT ... FORMULA TAPE UNIT NUMBER.
C     ITWODR ... TWO ELECTRON DERIVATIVES UNIT NUMBER.
C     IOSPAR(5) ... SPARES FOR FUTURE USE.
C     NFILE(I,1) ... MAXIMUM FILE LENGTHS IN DOUBLEWORDS (WORDS ON CDC).
C     NFILE(I,2) ... START RECORD NUMBERS ON THE DIRECT-ACCESS FILE.
C
      IN = 5
      IOUT = 6
      IPUNCH = 7
      IMAT = 8
      ITWOEL = 9
      IMOINT = 10
      ISCRCH = 11
      IFINT = 12
      ILABEL = 13
      ICOUPL = 14
      IFORMT = 15
      ITWODR = 16
C?GLD OPEN FILES - DON'T OPEN LFCS 5, 6, 7 OR 'LFC' EXPLICITLY.
C     IRECSZ = (IRECL/4+191) / 192
C     CALL M:MYID (MYID)
C     MYID(10) = IRECL / 8
C     CALL M:PGOPT (MYID(11))
C     CALL M:MAPBLK (MAPBLK)
C     MYID(12) = MAPBLK / 2
C     OPEN (UNIT=1, BLOCKED=.TRUE., FORM='FORMATTED', OPENMODE='R')
C*    OPEN (UNIT=IN, BLOCKED=.TRUE., FORM='FORMATTED', OPENMODE='R')
C*    OPEN (UNIT=IOUT, BLOCKED=.TRUE., FORM='FORMATTED', OPENMODE='A')
C*    OPEN (UNIT=IPUNCH, BLOCKED=.TRUE., FORM='FORMATTED')
C*
C     OPEN (UNIT=IMAT, ACCESS='DIRECT', BLOCKED=.FALSE., ERR=100,
C    1 FORM='UNFORMATTED', IOSTAT=ISTAT, RECL=IRECL, SHARED=.FALSE.,
C    2 WAIT=.FALSE.)
C     GO TO 150
C 100 WRITE(IOUT,110)ISTAT
C 110 FORMAT('0FATAL ERROR: CANNOT OPEN FILE IMAT, ISTAT =',I10)
C     STOP
C*
C 150 OPEN (UNIT=ITWOEL, BLOCKED=.FALSE., FORM='UNFORMATTED')
C     OPEN (UNIT=IMOINT, BLOCKED=.FALSE., FORM='UNFORMATTED')
C     OPEN (UNIT=ISCRCH, BLOCKED=.FALSE., FORM='UNFORMATTED')
C     OPEN (UNIT=IFINT , BLOCKED=.FALSE., FORM='UNFORMATTED')
C     OPEN (UNIT=ILABEL, BLOCKED=.FALSE., FORM='UNFORMATTED')
C     OPEN (UNIT=ICOUPL, BLOCKED=.FALSE., FORM='UNFORMATTED')
C     OPEN (UNIT=IFORMT, BLOCKED=.FALSE., FORM='UNFORMATTED')
C     OPEN (UNIT=ITWODR, BLOCKED=.FALSE., FORM='UNFORMATTED')
C*    OPEN (UNIT=LFC, BLOCKED=.TRUE., FORM='FORMATTED', OPENMODE='A')
C??
C?GBR OPEN FILES.
C     IRECSZ = (IRECL/4+191) / 192
C     CALL M_MYID (MYID)
C     MYID(10) = IRECL / 8
C     CALL MPXOPT (MYID(11))
C     CALL M_MAPBLK (MAPBLK)
C     MYID(12) = MAPBLK / 2
C     OPEN (UNIT=1, FORM='FORMATTED')
C     OPEN (UNIT=IN, FORM='FORMATTED')
C     OPEN (UNIT=IOUT, FORM='FORMATTED')
C     OPEN (UNIT=IPUNCH, FORM='FORMATTED')
C*
C     OPEN (UNIT=IMAT, ACCESS='DIRECT', ERR=100,
C    1 FORM='UNFORMATTED', IOSTAT=ISTAT, RECL=IRECL)
C     GO TO 150
C 100 CALL SYSGETSTATUS (ISTAT, I, J, K, L, M)
C     WRITE (IOUT,110) IMAT, ISTAT, I, J, K, L, M
C 110 FORMAT ('0*** OPEN OF UNIT',I3,' GAVE ISTAT =',I15/
C    1 ' DECODED STATUS:',5I10)
C     STOP
C*
C 150 OPEN (UNIT=ITWOEL, FORM='UNFORMATTED')
C     OPEN (UNIT=IMOINT, FORM='UNFORMATTED')
C     OPEN (UNIT=ISCRCH, FORM='UNFORMATTED')
C     OPEN (UNIT=IFINT , FORM='UNFORMATTED')
C     OPEN (UNIT=ILABEL, FORM='UNFORMATTED')
C     OPEN (UNIT=ICOUPL, FORM='UNFORMATTED')
C     OPEN (UNIT=IFORMT, FORM='UNFORMATTED')
C     OPEN (UNIT=ITWODR, FORM='UNFORMATTED')
C     OPEN (UNIT=LFC, FORM='FORMATTED')
C??
C?IBM OPEN FILES AND SUPPRESS UNDERFLOW ERROR MESSAGES.
C     IRECSZ = 1
C     OPEN (UNIT=1, FORM='FORMATTED')
C     OPEN (UNIT=IN, FORM='FORMATTED')
C     OPEN (UNIT=IOUT, FORM='FORMATTED')
C     OPEN (UNIT=IPUNCH, FORM='FORMATTED')
C     OPEN (UNIT=IMAT, ACCESS='DIRECT',
C    1 FORM='UNFORMATTED', RECL=IRECL)
C*    DO NOT OPEN UNITS USED WITH ASYNCHRONOUS (NO-WAIT) I/O.
C*    OPEN (UNIT=ITWOEL, FORM='UNFORMATTED')
C     OPEN (UNIT=IMOINT, FORM='UNFORMATTED')
C     OPEN (UNIT=ISCRCH, FORM='UNFORMATTED')
C     OPEN (UNIT=IFINT , FORM='UNFORMATTED')
C     OPEN (UNIT=ILABEL, FORM='UNFORMATTED')
C     OPEN (UNIT=ICOUPL, FORM='UNFORMATTED')
C*    OPEN (UNIT=IFORMT, FORM='UNFORMATTED')
C     OPEN (UNIT=ITWODR, FORM='UNFORMATTED')
C     OPEN (UNIT=LFC, FORM='FORMATTED')
C     CALL ERRSET (208, 256, -1, 1, 1, 0)
C??
C?VAX OPEN FILES (CONVERT RECORD LENGTH TO WORDS FOR UNIT IMAT).
C     I = IRECL / 4
C     IRECSZ = 1
C     OPEN (UNIT=1, FORM='FORMATTED', STATUS='UNKNOWN', READONLY)
C     OPEN (UNIT=IN, FORM='FORMATTED', STATUS='UNKNOWN', READONLY)
C     OPEN (UNIT=IOUT, FORM='FORMATTED', STATUS='UNKNOWN')
C     OPEN (UNIT=IPUNCH, FORM='FORMATTED', STATUS='UNKNOWN')
C     OPEN (UNIT=IMAT, ACCESS='DIRECT', STATUS='UNKNOWN',
C    1 FORM='UNFORMATTED', ASSOCIATEVARIABLE=KEY, INITIALSIZE=NBLOCK,
C    2 RECL=I, BLOCKSIZE=I, RECORDTYPE='FIXED')
C     OPEN (UNIT=ITWOEL, FORM='UNFORMATTED', STATUS='UNKNOWN')
C     OPEN (UNIT=IMOINT, FORM='UNFORMATTED', STATUS='UNKNOWN')
C     OPEN (UNIT=ISCRCH, FORM='UNFORMATTED', STATUS='UNKNOWN')
C     OPEN (UNIT=IFINT , FORM='UNFORMATTED', STATUS='UNKNOWN')
C     OPEN (UNIT=ILABEL, FORM='UNFORMATTED', STATUS='UNKNOWN')
C     OPEN (UNIT=ICOUPL, FORM='UNFORMATTED', STATUS='UNKNOWN')
C     OPEN (UNIT=IFORMT, FORM='UNFORMATTED', STATUS='UNKNOWN')
C     OPEN (UNIT=ITWODR, FORM='UNFORMATTED', STATUS='UNKNOWN')
C     OPEN (UNIT=LFC, FORM='FORMATTED', STATUS='UNKNOWN')
C??
C?CDC OPEN FILES (CONVERT RECORD LENGTH TO WORDS).
C     I = IRECL / 8
C     IRECSZ = 1
C     OPEN (UNIT=1, FORM='FORMATTED')
C     OPEN (UNIT=IN, FORM='FORMATTED')
C     OPEN (UNIT=IOUT, FORM='FORMATTED')
C     OPEN (UNIT=IPUNCH, FORM='FORMATTED')
C     OPEN (UNIT=IMAT, ACCESS='DIRECT',
C    1 FORM='UNFORMATTED', RECL=I, BUFL=I)
C*    OLD OPEN STATEMENT FOR BUFFERIN/BUFFEROUT UNIT.
C*    OPEN (UNIT=ITWOEL, FORM='UNFORMATTED', BUFL=3201)
C*    NEW OPEN STATEMENT FOR BUFFERIN/BUFFEROUT UNIT SHOULD NOT BE USED,
C*    AS BUFFER LENGTH FROM PROGRAM STATEMENT WILL BE OVER-RIDDEN.
C*    OPEN (UNIT=ITWOEL, FORM='BUFFERED')
C     OPEN (UNIT=IMOINT, FORM='UNFORMATTED')
C     OPEN (UNIT=ISCRCH, FORM='UNFORMATTED')
C     OPEN (UNIT=IFINT , FORM='UNFORMATTED')
C     OPEN (UNIT=ILABEL, FORM='UNFORMATTED')
C     OPEN (UNIT=ICOUPL, FORM='UNFORMATTED')
C*    OPEN (UNIT=IFORMT, FORM='UNFORMATTED')
C*    NEW OPEN STATEMENT FOR BUFFERIN/BUFFEROUT UNIT SHOULD NOT BE USED,
C*    AS BUFFER LENGTH FROM PROGRAM STATEMENT WILL BE OVER-RIDDEN.
C*    OPEN (UNIT=ITWODR, FORM='BUFFERED')
C     OPEN (UNIT=LFC, FORM='FORMATTED')
C??
C?UNX OPEN FILES - LOOK FOR USER DEFINES FOR 'GAUSSNN'.
C*    ACTIVATE NEXT LINE TO USE DIRECT ACCESS LENGTH IN BYTES.
      I = IRECL
C*    ACTIVATE NEXT LINE TO USE DIRECT ACCESS LENGTH IN WORDS.
C*    I = IRECL / 4
      IRECSZ = 1
      ZENV = 'GAUSS01'
      CALL GETENV (ZENV, ZFILE)
      IF (ZFILE .NE. ' ') THEN
         OPEN (UNIT=1, FILE=ZFILE, FORM='FORMATTED', STATUS='UNKNOWN')
      ELSE
         OPEN (UNIT=1, FORM='FORMATTED', STATUS='SCRATCH')
      END IF
C*    OPEN (UNIT=IN, FORM='FORMATTED', STATUS='UNKNOWN')
C*    OPEN (UNIT=IOUT, FORM='FORMATTED', STATUS='UNKNOWN')
      WRITE (ZENV,100) IPUNCH
  100 FORMAT ('GAUSS',I2.2)
      CALL GETENV (ZENV, ZFILE)
      IF (ZFILE .NE. ' ') THEN
         OPEN (UNIT=IPUNCH, FILE=ZFILE, FORM='FORMATTED',
     1    STATUS='UNKNOWN')
      ELSE
         OPEN (UNIT=IPUNCH, FORM='FORMATTED', STATUS='SCRATCH')
      END IF
      WRITE (ZENV,100) IMAT
      CALL GETENV (ZENV, ZFILE)
      IF (ZFILE .NE. ' ') THEN
         OPEN (UNIT=IMAT, FILE=ZFILE, ACCESS='DIRECT', STATUS='UNKNOWN',
     1    FORM='UNFORMATTED', RECL=I)
      ELSE
         OPEN (UNIT=IMAT, ACCESS='DIRECT', STATUS='SCRATCH',
     1    FORM='UNFORMATTED', RECL=I)
      END IF
      WRITE (ZENV,100) ITWOEL
      CALL GETENV (ZENV, ZFILE)
      IF (ZFILE .NE. ' ') THEN
         OPEN (UNIT=ITWOEL, FILE=ZFILE, FORM='UNFORMATTED',
     1    STATUS='UNKNOWN')
      ELSE
         OPEN (UNIT=ITWOEL, FORM='UNFORMATTED', STATUS='SCRATCH')
      END IF
      WRITE (ZENV,100) IMOINT
      CALL GETENV (ZENV, ZFILE)
      IF (ZFILE .NE. ' ') THEN
         OPEN (UNIT=IMOINT, FILE=ZFILE, FORM='UNFORMATTED',
     1    STATUS='UNKNOWN')
      ELSE
         OPEN (UNIT=IMOINT, FORM='UNFORMATTED', STATUS='SCRATCH')
      END IF
      WRITE (ZENV,100) ISCRCH
      CALL GETENV (ZENV, ZFILE)
      IF (ZFILE .NE. ' ') THEN
         OPEN (UNIT=ISCRCH, FILE=ZFILE, FORM='UNFORMATTED',
     1    STATUS='UNKNOWN')
      ELSE
         OPEN (UNIT=ISCRCH, FORM='UNFORMATTED', STATUS='SCRATCH')
      END IF
      WRITE (ZENV,100) IFINT
      CALL GETENV (ZENV, ZFILE)
      IF (ZFILE .NE. ' ') THEN
         OPEN (UNIT=IFINT, FILE=ZFILE, FORM='UNFORMATTED',
     1    STATUS='UNKNOWN')
      ELSE
         OPEN (UNIT=IFINT, FORM='UNFORMATTED', STATUS='SCRATCH')
      END IF
      WRITE (ZENV,100) ILABEL
      CALL GETENV (ZENV, ZFILE)
      IF (ZFILE .NE. ' ') THEN
         OPEN (UNIT=ILABEL, FILE=ZFILE, FORM='UNFORMATTED',
     1    STATUS='UNKNOWN')
      ELSE
         OPEN (UNIT=ILABEL, FORM='UNFORMATTED', STATUS='SCRATCH')
      END IF
      WRITE (ZENV,100) ICOUPL
      CALL GETENV (ZENV, ZFILE)
      IF (ZFILE .NE. ' ') THEN
         OPEN (UNIT=ICOUPL, FILE=ZFILE, FORM='UNFORMATTED',
     1    STATUS='UNKNOWN')
      ELSE
         OPEN (UNIT=ICOUPL, FORM='UNFORMATTED', STATUS='SCRATCH')
      END IF
      WRITE (ZENV,100) IFORMT
      CALL GETENV (ZENV, ZFILE)
      IF (ZFILE .NE. ' ') THEN
         OPEN (UNIT=IFORMT, FILE=ZFILE, FORM='UNFORMATTED',
     1    STATUS='UNKNOWN')
      ELSE
         OPEN (UNIT=IFORMT, FORM='UNFORMATTED', STATUS='SCRATCH')
      END IF
      WRITE (ZENV,100) ITWODR
      CALL GETENV (ZENV, ZFILE)
      IF (ZFILE .NE. ' ') THEN
         OPEN (UNIT=ITWODR, FILE=ZFILE, FORM='UNFORMATTED',
     1    STATUS='UNKNOWN')
      ELSE
         OPEN (UNIT=ITWODR, FORM='UNFORMATTED', STATUS='SCRATCH')
      END IF
      WRITE (ZENV,100) LFC
      CALL GETENV (ZENV, ZFILE)
      IF (ZFILE .NE. ' ') THEN
         OPEN (UNIT=LFC, FILE=ZFILE, FORM='FORMATTED',
     1    STATUS='UNKNOWN')
      ELSE
         OPEN (UNIT=LFC, FORM='FORMATTED', STATUS='SCRATCH')
      END IF
C??
C     TEST THE TWO ELECTRON INTEGRAL FILE (UNIT ITWOEL).
C
      REWIND ITWOEL
C
      WRITE (LFC,200) NA,NB,NS,NP,NR,NF,NC,NO,NT,NCON,MA,MV,IRECL,NBLOCK
  200 FORMAT ('1MONSTERGAUSS PRIMARY PARAMETER VALUES:'/
     1 '0#NA     =',I8/' #NB     =',I8/' #NS     =',I8/
     2 ' #NP     =',I8/' #NR     =',I8/' #NF     =',I8/
     3 ' #NC     =',I8/' #NO     =',I8/' #NT     =',I8/
     4 ' #NCON   =',I8/' #MA     =',I8/' #MV     =',I8/
     5 ' #IRECL  =',I8/' #NBLOCK =',I8)
      WRITE (LFC,210) NZ,NA3,NBB,NB1,NB2,NF2,NFOR,NV,MA1,MV1
  210 FORMAT (/'0SECONDARY PARAMETER VALUES:'/
     1 '0#NZ     =',I8/' #NA3    =',I8/' #NBB    =',I8/
     2 ' #NB1    =',I8/' #NB2    =',I8/' #NF2    =',I8/
     3 ' #NFOR   =',I8/' #NV     =',I8/' #MA1    =',I8/
     4 ' #MV1    =',I8)
      WRITE (LFC,220)
  220 FORMAT ('1DIRECT ACCESS FILE DATA TABLE (ARRAY NFILE IN ',
     1 'COMMON /IO/):')
C
      CALL CRITIC (NA,NB,NS,NP,NF,NC,NO,NT,MA,
     1 NZ,NA3,NBB,NB1,NB2,NF2,NFOR,NV,MA1,MV1,
     2 NFILE,IREAL,IINT,IRECL,IRECSZ,NTBLKS,ERROR,LFC,IOUT)
C
      IF (.NOT. ERROR) GO TO 600
      WRITE (LFC,590)
  590 FORMAT (/'0*** MONSTERGAUSS EXECUTION TERMINATED DUE TO ',
     1 'ERROR(S) IN CRITIC. ***')
      WRITE (IOUT,590)
      STOP
C
C     PUT ERROR FUNCTION INTERPOLATION TABLE ON DISK IF NECESSARY.
C
  600 IGAM=IGAM-2*(IGAM/2)
      IF(IGAM.NE.0)CALL GAMGEN
C?GLD/GBR/IBM/VAX/CDC
C     CLOSE (UNIT=LFC)
C??
C?UNX
      CLOSE (LFC)
C??
C     READ THE FIRST CALCULATION.
C
      LNK(1)=101
      NLINK=0
      IOP(1) = -999
      RETURN
      END
      SUBROUTINE CRITIC (NA,NB,NS,NP,NF,NC,NO,NT,MA,
     1 NZ,NA3,NBB,NB1,NB2,NF2,NFOR,NV,MA1,MV1,
     2 NFILE,IREAL,IINT,IRECL,IRECSZ,NTBLKS,ERROR,LFC,IOUT)
C*
C     --------------
C     U OF T VERSION
C     JULY 1987
C     --------------
C*
C     THIS ROUTINE SETS UP CERTAIN CRITICAL CODE SECTIONS THAT MUST
C     BE SHARED BETWEEN MONSTERGAUSS AND THE CONVERSION PROGRAM
C     'CONVERT2' (IN 'GCONVERT'). IF THIS ROUTINE IS CHANGED, BOTH
C     MONSTERGAUSS AND GCONVERT MUST BE RECATALOGUED. CHANGES IN THE
C     ARGUMENT LIST WILL NECESSITATE CHANGES IN BOTH PLACES ALSO.
C
C     ARGUMENT DESCRIPTIONS:
C     NA-MV1 - PARAMETERS DEFINING THE SIZE OF CALCULATION TO BE
C              HANDLED (MAXIMUM).
C     NFILE  - ARRAY TO RECEIVE THE PARTITION LENGTHS AND START
C              BLOCK NUMBERS (DIMENSION: (100,2)).
C     IREAL  - ALWAYS SET TO 2 (NUMBER OF WORDS PER DOUBLE PRECISION
C              VARIABLE ON THE IBM/GLD/GBR/VAX/UNX).
C     IINT   - SET TO LENGTH OF AN INTEGER(*4) VARIABLE RELATIVE TO A
C              DOUBLE PRECISION VARIABLE. IINT=1 ON IBM/GLD/GBR/VAX/UNX;
C              =2 ON CDC SINCE DOUBLE PRECISION VARIABLES ARE REPLACED
C              BY 'REAL' VARIABLES AND BOTH 'REAL' AND 'INTEGER' DATA
C              OCCUPY THE SAME AMOUNT OF MEMORY ON CDC MACHINES.
C     IRECL  - BLOCK SIZE IN BYTES FOR THE RANDOM ACCESS FILE
C              (MUST BE DIVISIBLE BY 8).
C     IRECSZ - CONVERSION FACTOR BETWEEN BLOCKS OF LENGTH 'IRECL'
C              AND PHYSICAL BLOCKS NEEDED ON A SPECIFIC MACHINE.
C     NTBLKS - TOTAL NUMBER OF BLOCKS REQUIRED FOR THE RANDOM ACCESS
C              FILE (RETURNED BY CRITIC).
C     ERROR  - LOGICAL VARIABLE RETURNED BY CRITIC THAT IS NORMALLY
C              SET FALSE (NO ERRORS FOUND), BUT IS SET TRUE IF AN
C              ERROR WAS FOUND.
C     LFC    - LOGICAL FILE CODE FOR THE TABLE OF PARTITION DATA.
C     IOUT   - LOGICAL FILE CODE FOR A MESSAGE TELLING THE USER
C              TO LOOK ON FILE 'LFC' FOR A DETAILED ERROR REPORT.
C
      DIMENSION NFILE(100,2), NDISK(100)
C
      LOGICAL ERROR
C
C     DISK FILE MAP - THE VALUE OF NDISK GIVES THE START
C     RECORD NUMBER FOR EACH PARTITION ON THE DIRECT-ACCESS UNIT
C     (UNIT 'IMAT'). ALTHOUGH THE ACTUAL VALUES GIVEN HERE ARE FOR
C     THE SPECIFIC CASE DETAILED IN 'SETUP', AND ARE NOT USED AS SUCH,
C     THE SEQUENCE OF VALUES IS USED TO DETERMINE THE MOST
C     EFFICIENT SEQUENCE OF PARTITIONS TO MINIMIZE DISK HEAD
C     MOVEMENT (AND HENCE REDUCE DISK I/O WAIT TIME), ALTHOUGH
C     THIS MAY BE A TOTAL WASTE OF TIME ON LARGE MULTI-PROCESSING
C     COMPUTERS, AS SOME OTHER USER MAY COME ALONG AND USE THE
C     SAME DISK DRIVE AS MONSTERGAUSS (INCONSIDERATE LITTLE BUGGERS).
C
      DATA NDISK/120,12,1,74,83,11,137,13,134,121,123,136,59,154,64,
     1 0,69,0,18,0,23,3*0,84,0,93,3*0,28,39,50,138,143,148,3*0,
     2 102,157,111,166,175,0,187,188,0,153,176,50*0/
C
C
      ERROR = .FALSE.
C
C     SET MAXIMUM PARTITION LENGTHS.
C
      DO 300 I=1,100
      NFILE(I,1) = 0
  300 NFILE(I,2) = -NDISK(I)
C
      NFILE(1,1) = ((NZ+6*NA)*IREAL+(NZ+5*NS)*IINT) / 2
      NFILE(2,1) = (NS+2*NP)*IREAL / 2
      NFILE(3,1) = (7200*IREAL) / 2
      NFILE(4,1) = (NB2*IREAL) / 2
      NFILE(5,1) = ((2*NB+NF+NC+137)*IREAL+(NC+10)*IINT) / 2
      NFILE(6,1) = (3*NP*IREAL+(6*NS+2)*IINT) / 2
      NFILE(7,1) = (12*IREAL+204*IINT) / 2
      NFILE(8,1) = (NBB*IREAL) / 2
      NFILE(9,1) = ((NT*(NT+2*MA+5)+34)*IINT) / 2
      NFILE(10,1) = (11*NO*IREAL) / 2
      NFILE(11,1) = (NA3*NA3*IREAL) / 2
      NFILE(12,1) = (NT*IREAL+NT*IINT) / 2
      NFILE(13,1) = (NBB*IREAL) / 2
      NFILE(14,1) = (NFOR*IREAL) / 2
      NFILE(15,1) = (NBB*IREAL) / 2
      NFILE(17,1) = (NBB*IREAL) / 2
      NFILE(19,1) = (NBB*IREAL) / 2
      NFILE(21,1) = (NBB*IREAL) / 2
      NFILE(25,1) = (NB2*IREAL) / 2
      NFILE(27,1) = (NB2*IREAL) / 2
      NFILE(31,1) = (NB1*IREAL) / 2
      NFILE(32,1) = (NB1*IREAL) / 2
      NFILE(33,1) = (NB1*IREAL) / 2
      NFILE(34,1) = (NBB*IREAL) / 2
      NFILE(35,1) = (NBB*IREAL) / 2
      NFILE(36,1) = (NBB*IREAL) / 2
      NFILE(40,1) = (NB2*IREAL) / 2
      NFILE(41,1) = (NB2*IREAL) / 2
      NFILE(42,1) = (NB2*IREAL) / 2
      NFILE(43,1) = (NB2*IREAL) / 2
      NFILE(44,1) = (24*IREAL+(2*NA+NB+28)*IINT) / 2
      NFILE(46,1) = NFILE(5,1)
      NFILE(47,1) = NFILE(5,1)
      NFILE(49,1) = (290*IREAL+270*IINT) / 2
      NFILE(50,1) = (NA3*NA3*IREAL) / 2
C
C     FILE 10 IS ALSO USED BY THE VA05 OPTIMIZATION METHOD.
C     TAKE MAXIMUM LENGTH.
C
      ITEMP = ((8*NV+34)*IREAL+20*IINT) / 2
      IF (ITEMP .GT. NFILE(10,1)) NFILE(10,1) = ITEMP
C
C     FILE 17 IS ALSO USED BY THE RHF SCF ROUTINE.
C     TAKE MAXIMUM LENGTH.
C
      ITEMP = (NF*NF2*IREAL) / 2
      IF (ITEMP .GT. NFILE(17,1)) NFILE(17,1) = ITEMP
C
C     FILES 31, AND 32 ON IBM/GLD/GBR/VAX/UNX, ARE ALSO USED BY THE CI
C     ROUTINES - TAKE MAXIMUM LENGTH.
C*IBM/GLD/GBR/VAX/UNX
      IF (IINT .EQ. 1) ITEMP = (((MA1*MV1+1)/2+1)*IINT) / 2
C*CDC
      IF (IINT .EQ. 2) ITEMP = (MA1*MV1*IINT) / 2
C*
      IF (ITEMP .GT. NFILE(31,1)) NFILE(31,1) = ITEMP
C*IBM/GLD/GBR/VAX/UNX
      IF  (IINT.EQ.1 .AND. ITEMP.GT.NFILE(32,1)) NFILE(32,1) = ITEMP
C
C     CALCULATE STARTING DISK RECORD NUMBERS, BASED ON A RECORD
C     SIZE OF IRECL BYTES. FIRST, CONVERT IRECL TO DOUBLEWORDS -
C     CURRENTLY THIS SECTION OF CODE IS NOT IMPORTANT ON THE
C     CDC MACHINE, BUT DO IT ANYWAYS.
C
      IREC = IRECL / 8
      IF (8*IREC .EQ. IRECL) GO TO 320
      WRITE (LFC,310) IRECL
  310 FORMAT ('0*** ERROR IN CRITIC: RECORD LENGTH ON UNIT IMAT (=',I8,
     1 ' BYTES) IS NOT DIVISIBLE BY 8.')
      IF (IOUT.NE.LFC .AND. .NOT.ERROR) WRITE (IOUT,540) LFC
      ERROR = .TRUE.
C
  320 IREC1 = IREC - 1
      NTRECS = 0
C
C     LOOP OVER THE DISK FILES, LOOKING FOR THE LEAST NEGATIVE
C     VALUE OF NFILE(I,2), WHICH WAS SET TO -NDISK(I) ABOVE.
C     WHEN THE NEXT FILE IN SEQUENCE IS FOUND, CALCULATE THE
C     NUMBER OF RECORDS REQUIRED, AND SET NFILE(I,2) TO POINT
C     TO THE FIRST RECORD NUMBER.
C
  400 II = 0
      IBEST = -1000000
      DO 410 I=1,100
      NFILEI = NFILE(I,2)
      IF (NFILEI.GE.0 .OR. NFILEI.LE.IBEST) GO TO 410
      II = I
      IBEST = NFILEI
  410 CONTINUE
C
      IF (II .EQ. 0) GO TO 500
      NFILE(II,2) = NTRECS + 1
      IF (NFILE(II,1) .LE. 0) GO TO 400
      NREC = (NFILE(II,1)+IREC1) / IREC
      NTRECS = NTRECS + NREC
      GO TO 400
C
C     PRINT SUMMARY TABLE AND PERFORM CONSISTENCY CHECKS.
C
  500 WRITE (LFC,510)
  510 FORMAT ('0FILE    LENGTH    START RECORD #    # RECORDS'/)
      DO 550 I=1,100
      N1 = NFILE(I,1)
      N2 = NFILE(I,2)
      N3 = (N1+IREC1) / IREC
      WRITE (LFC,520) I,N1,N2,N3
  520 FORMAT (1X,I3,3X,I8,5X,I8,7X,I8)
      IF (N1.EQ.0 .AND. N2.EQ.0) GO TO 550
      IF (N1.GT.0 .AND. N2.GT.0) GO TO 550
      WRITE (LFC,530)
  530 FORMAT (' *** ERROR IN CRITIC: INVALID DATA FOR ABOVE FILE: ',
     1 'BOTH VALUES MUST BE ZERO, OR BOTH MUST BE POSITIVE.')
      IF (IOUT.NE.LFC .AND. .NOT.ERROR) WRITE (IOUT,540) LFC
  540 FORMAT ('0FATAL ERROR IN CRITIC ROUTINE - SEE DEBUG OUTPUT (',
     1 'FILE CODE',I3,').')
      ERROR = .TRUE.
  550 CONTINUE
C
      NTBLKS = NTRECS * IRECSZ
      WRITE (LFC,560) IRECL,NTRECS,NTBLKS
  560 FORMAT ('0IN ABOVE TABLE, LENGTH IS IN DOUBLEWORDS ON ',
     1 'IBM/GLD/GBR/VAX/UNX, WORDS ON CDC.'/
     2 ' THE TOTAL NUMBER OF',I6,' BYTE RECORDS IS',I6,' (',I6,
     3 ' BLOCKS).')
      RETURN
      END
      SUBROUTINE GAMGEN
C*
C     --------------
C     GAUSSIAN 82
C     U OF T VERSION
C     MARCH 1987
C     --------------
C*
C     COMPUTES AND TABULATES F0(X) TO F5(X)
C     IN RANGE
C     X=0.0 TO 20.0
C     IN UNITS OF X=0.05
C     USED BY THE SP 2-ELECTRON INTEGRAL AND SP FORCE ROUTINES.
C     THE TABLE IS GENERATED ONLY ONCE AND IS STORED IN PARTITION 3.
C
C     CODE BASED ON GAUSSIAN 82.
C*
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C*
      COMMON/C100/F(9),C(1200,7)
      COMMON/IO/IN,IOUT,IODUM(215)
C*
      DATA PT05/0.05D0/,PT15/0.15D0/,PT184/0.184D0/
      DATA FOUR/4.0D0/,SIX/6.0D0/
C*
      CALL FMTSET (0, 0, 0)
C
      DO 10 I=1,404
      T=-PT15+PT05*DFLOAT(I)
      CALL FMTGEN (F, T, 6, ICK)
      IF (ICK .NE. 0) THEN
         WRITE (IOUT,9000) T
 9000    FORMAT ('0FAILURE IN FMTGEN/GAMGEN FOR T =',F10.6/
     1    ' FATAL PROGRAM ABORT -- SEEK ASSISTANCE.')
         STOP
      END IF
C     SAVE RETURNED VALUES WHERE THEY CAN BE REACHED LATER.
      C(I,2)=F(1)
      C(I,3)=F(2)
      C(I,4)=F(3)
      C(I,5)=F(4)
      C(I,6)=F(5)
   10 C(I,7)=F(6)
C
C     COMPUTE THE INTERPOLATION TABLE WITH THE VALUES AVAILABLE.
C     K INDEXES THE VALUE OF M IN F(M,T).
C     I INDEXES THE INTERPOLATION TABLE C.
C     J INDEXES THE STORED VALUES OF F(M,T).
C
      DO 40 K=1,6
      K1=K+1
      DO 40 I=1,400
      J=I+2
      J1=J+1
      T=C(J,K1)
      T1=C(J1,K1)+C(J-1,K1)
      TEMP1=T1-T-T
      TEMP2=SIX*T-FOUR*T1+C(I,K1)+C(J+2,K1)
      C(I,K)=T
      C(I+400,K)=C(J1,K1)-T
   40 C(I+800,K)=(TEMP1-PT184*TEMP2)/SIX
C
C     WRITE OUT INTERPOLATION TABLE.
C
      CALL TWRITE(3,C,1200,7,1200,6,0)
      RETURN
      END
C?IBM/GLD/GBR/VAX/UNX
      SUBROUTINE DUMMYI
C??
C?CDC
C     PROGRAM DUMMYI
C??
C     SUBROUTINE FOR LINKAGE OF 2-ELECTRON INTEGRAL PROGRAMS.
C     ROUTINE SHLOUT ALSO INCLUDED IN THIS OVERLAY SEGMENT.
C
C     VERSION: JULY 1987.
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C#
C     PARAMETER (NA=#NA)
C##
      PARAMETER (NA= 36)
C###
      COMMON /A/ IOP(99),IC1(NA),IC2(7),CD1(NA,3),CD2(4),
     1 LNK(100),NLINK,JOP(10,30)
C
      COMMON/C300/IXP(16),XP(4),IX(3072,2)
      COMMON/SHLCOM/IDUM1(8)
C?GLD
C     INTEGER*8 IOVLAY
C*
C     CHARACTER*8 ZOVLAY
C*
C     EQUIVALENCE (IOVLAY, ZOVLAY)
C*
C1030 FORMAT ('GAU',I4.4,' ')
C??
C?GBR
C     COMMON/IO/IN,IOUT,IODUM(215)
C*
C     INTEGER ICNP(6)
C*
C     CHARACTER*8 ZOVLAY, ZDIRECTORY*35
C*
C*    DEFINE THE DISK AND DIRECTORY CONTAINING THE EXECUTABLE IMAGE.
C     DATA ZDIRECTORY/'@D2(GAU)'/
C     DATA ICNP/1, 0, Z'80000000', 3*0/
C*
C1030 FORMAT ('GAU',I4.4,' ')
C??
C     RETURN IMMEDIATELY IF THESE LINKS NOT REQUIRED FOR ED/BSSE.
      IF (IOP(4).EQ.1 .OR. IOP(4).GE.5) RETURN
      NCHAIN=LNK(NLINK)-10000*(LNK(NLINK)/10000)
C?GLD/GBR
C     WRITE (ZOVLAY,1030) NCHAIN
C??
C?GLD
C     CALL M:LOAD (IOVLAY, IOVL)
C??
C?IBM/GLD/VAX/UNX
      IF (NCHAIN-307) 306, 307, 308
  306 CALL SHELL
      RETURN
  307 CALL UNCON
      RETURN
  308 CALL PHOENX
      RETURN
C??
C?GBR GET LENGTH OF DIRECTORY.
C     LZDIR = INDEX(ZDIRECTORY, ' ') - 1
C     CALL MPXSHAREIMAGE (ZDIRECTORY(1:LZDIR)//ZOVLAY,
C    1 ICNP, IMAGEINDEX, ISTAT)
C     IF (ISTAT .NE. 0) THEN
C        WRITE (IOUT,9000) ZOVLAY, ISTAT
C9000    FORMAT ('0*** ATTEMPT TO SHARE IMAGE ',A8,
C    1    ' FAILED, ISTAT =',I4,', IN DUMMYI.')
C        STOP
C     END IF
C*
C     IF (NCHAIN-307) 306, 307, 308
C 306 CALL SHELL
C     GO TO 900
C 307 CALL UNCON
C     GO TO 900
C 308 CALL PHOENX
C*
C 900 CALL MPXUNSHAREIMAGE (IMAGEINDEX, ICNP, ISTAT)
C     IF (ISTAT .NE. 0) THEN
C        WRITE (IOUT,9010) ZOVLAY, ISTAT
C9010    FORMAT ('0*** ATTEMPT TO UNSHARE IMAGE ',A8,
C    1    ' FAILED, ISTAT =',I4,', IN DUMMYI.')
C        STOP
C     END IF
C     RETURN
C??
C?CDC
C     I=NCHAIN-305
C     CALL OVERLAY('GAUSS',10,I)
C     RETURN
C??
      END
