C     GL0501       20 MAY 90                                         MRP
C?IBM/GLD/GBR/VAX/UNX
      SUBROUTINE CLOSED
C??
C?CDC
C     PROGRAM CLOSED
C??
C=SCF OPTIONS
C CHAPTER 7: SCF OPTIONS.
C **********
C
C1INTRODUCTION
C     LINK 0501
C*
C     --------------
C     U OF T VERSION
C     JULY 1987
C     --------------
C*
C     SOLUTION OF THE ROOTHAAN EQUATIONS FOR A CLOSED SHELL SYSTEM
C     REV. MOD. PHYS. 23, 69 (1951).
C*
C1OPTIONS
C     ******************************************************************
C     OPTIONS ... IOP( )
C     ******************************************************************
C     IOP(13) ... CONVERGENCE ON THE DENSITY MATRIX.
C     N  10**(-(5+N)).
C     NOTE: THE DENSITY CONVERGENCE FOR CLOSED SHELL OR UHF SCF IS
C     NORMALLY SET TO 10**(-9) (IOP(13)=4), AND SET TO 10**(-6)
C     (IOP(13)=1) FOR RHF OPEN SHELL SCF, TO ENSURE THAT THE SCF
C     WAVEFUNCTION IS SUITABLE FOR FIRST AND SECOND DERIVATIVE
C     AND/OR CI CALCULATIONS, ESPECIALLY ON LARGE SYSTEMS OR WITH
C     LARGE BASIS SETS.
C
C     IOP(14) ... MAXIMUM NUMBER OF CYCLES.
C     N  30+20*(N+1) CYCLES
C
C     IOP(15) ... PRINTING OF COEFFICIENT MATRIX (LINKS 0501-0503).
C     0  NO PRINTING
C     1  PRINT EACH CYCLE.
C
C     IOP(16) ... PRINTING OF DENSITY MATRIX (LINKS 0501-0503).
C     0  NO PRINTING
C     1  PRINT EACH CYCLE.
C
C     IOP(17) ... SCF EXTRAPOLATION TECHNIQUE TO AID CONVERGENCE.
C     0  USE POPLE 3- AND 4-POINT EXTRAPOLATION.
C     1  USE DEWAR EXTRAPOLATION.
C     2  NOT USED.
C     3  NO EXTRAPOLATION.
C
C     IOP(18) ... 3-PT. EXTRAPOLATION FOR POPLE EXTRAPOLATION METHOD.
C     0  USE
C     1  DO NOT USE
C
C     IOP(19) ... FOCK MATRIX SAVED ON DISK.
C     0  NO
C     1  YES
C
C     IOP(20) ... TOLERANCE IN DEWAR EXTRAPOLATION.
C     N  DO NOT EXTRAPOLATE IF THE DIFFERENCE BETWEEN SUCCESSIVE
C     'LAMBDA' VALUES IS LARGER THAN 0.06*(N+1).
C     IF N=7, EXTRAPOLATE EVERY THIRD ITERATION REGARDLESS.
C
C     IOP(21) ... PRINT CONTROL (EXCEPT FOR ED/BSSE RUNS).
C     0  NORMAL PRINTING.
C     1  NO PRINTING.
C
C     IOP(22) ... TERMINATION OF THE RUN FOR A NON-CONVERGED SCF.
C     0  YES.
C     N  NO, PROVIDED THE LAST CHANGE IN ENERGY IS NOT LARGER THAN
C     10**(-8+N).
C
C     IOP(23) TO IOP(30) ... USED IN GENERAL SCF ONLY (LINK 0503).
C
C     IOP(31) ... DEBUG PRINTING (LINKS 0501-0503).
C     0   NO.
C     N   PRINT ALL DEBUG OUPUT FROM LEVEL 1 TO LEVEL N INCLUSIVE.
C
C     IOP(32) ... DEBUG PRINTING FOR ED/BSSE (LINKS 0505-0507).
C     0   NO.
C     N   PRINT ALL DEBUG OUPUT FROM LEVEL 1 TO LEVEL N INCLUSIVE.
C
C     IOP(33) ... PRINTING OF COEFFICIENT MATRIX (LINKS 0505-0507).
C     0  NO PRINTING
C     1  PRINT EACH CYCLE.
C
C     IOP(34) ... PRINTING OF DENSITY MATRIX (LINKS 0505-0507).
C     0  NO PRINTING
C     1  PRINT EACH CYCLE.
C
C     IOP(35) ... PRINT CONTROL (ED/BSSE RUNS).
C     0  NORMAL PRINTING.
C     1  NO PRINTING.
C     NOTE: FOR FRAGMENT A, FRAGMENT B, AND THE A+B SUPERMOLECULE,
C     THE SCF PRINTING OPTION IS CONTROLLED BY IOP(21).
C
C     IOP(36) TO IOP(60) ... NOT USED.
C     ******************************************************************
C==
C*
C/
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C#
C     PARAMETER (NA=#NA, NB=#NB)
C##
      PARAMETER (NA= 36, NB=200)
C###
      PARAMETER (NBB=NB*(NB+1)/2, NBF1=NB*NB-NBB)
      PARAMETER (ZERO=0.0D0)
C
      COMMON /A/ IOP(99)
      COMMON /A/ NATOMS,ICHARG,MULTIP,IAN(NA),NAE,NBE,NE,NBASIS,C(NA,3)
      COMMON /A/ DUMC(4),IDUMC(401)
C
      COMMON/SCF1/ACURCY,DD(NB),DA(NBB),DB(NBF1)
      COMMON/SCF2/FF(NB),F(NB,NB)
      COMMON/SCF3/VV(NB),V(NB,NB)
C
      COMMON/GEN/E1,E2,E3,EDUM(3),DCONV,SPIN(2),FX,FY,FZ,FE,EMOL,ESOL,
     1 DPOL(4),VCM
      COMMON/IO/IN,IOUT,IPUNCH,IMAT,ITWOEL,IODUM1(5),IFORMT,IODUM2(206)
C
      DATA TEN/10.0D0/
C
 1000 FORMAT('0AT TERMINATION TOTAL ENERGY IS',F17.6,'  HARTREES')
 1010 FORMAT('1CLOSED SHELL SCF',15X,'NUCLEAR REPULSION ENERGY IS',
     $ F17.9,'  HARTREES'/'0CONVERGENCE ON DENSITY MATRIX REQUIRED TO ',
     $ 'EXIT IS',1PD12.4/'0 CYCLE   ELECTRONIC ENERGY',6X,
     $ 'TOTAL ENERGY    CONVERGENCE   EXTRAPOLATION'/)
 1020 FORMAT('0THIS CALCULATION WAS PERFORMED WITH AN APPLIED',
     $ ' EXTERNAL ELECTRIC FIELD')
 1030 FORMAT(/'0THIS CALCULATION WAS DONE ACCORDING TO SELF-CONSISTENT',
     1 ' REACTION FIELD THEORY. ENERGY VALUES IN HARTREES ARE'//
     2 10X,'E(Q)',7X,'=',6X,'EMOL',6X,'+',6X,'ESOL'/1X,3F17.6)
 1070 FORMAT('0ASKED FOR CLOSED SHELL BUT MULTIPLICITY > 1')
C*
      NTT=(NBASIS*(NBASIS+1))/2
      IF(MULTIP.NE.1)GO TO 140
      IF(IOP(10).EQ.0)RETURN
C     FOR ED/BSSE, SEE IF THIS LINK IS REQUIRED FOR THIS PASS.
      IF (IOP(4).EQ.1 .OR. IOP(4).EQ.5 .OR. IOP(4).GE.7) RETURN
C     FOR ED/BSSE, SET CORRECT 2-ELECTRON INTEGRAL UNIT NUMBER.
      IF (IOP(4) .EQ. 6) THEN
         ISAVE = ITWOEL
         ITWOEL = IFORMT
      END IF
C     CLEAR ENERGY ORIGIN FLAG.
      IOP(94) = 0
C     FORMV READS IN THE OVERLAP MATRIX FROM DISK ... FILE 8
C     COMPUTES TRANSFORMATION MATRIX AND WRITES IT ON DISK ... FILE 4
      CALL FORMV(NBASIS)
C     DENSITY MATRIX READ IN FROM DISK ... FILE 19
      CALL TREAD(19,DA,NBB,1,NTT,1,0)
      ACURCY=TEN**(-(5+IOP(13)))
      MAXCYC=30+20*(IOP(14)+1)
C     CALCULATE NUCLEAR REPULSION ENERGY
      E1=ZERO
      NM1=NATOMS-1
      IF(NM1.EQ.0) GO TO 81
      DO 80 I=1,NM1
      IANI=IAN(I)
      IF(IANI.LE.0)GO TO 80
      IP1=I+1
      DO 70 J=IP1,NATOMS
      IANJ=IAN(J)
      IF(IANJ.LE.0)GO TO 70
      ANIJ=DFLOAT(IANI*IANJ)
      RIJ=DSQRT((C(I,1)-C(J,1))**2+(C(I,2)-C(J,2))**2+
     $ (C(I,3)-C(J,3))**2)
      E1=E1+ANIJ/RIJ
   70 CONTINUE
   80 CONTINUE
C     INSERT CALCULATED ENERGIES IN COMMON GEN
C     E1 IS NUCLEAR REPULSION ENERGY.
C     E2 IS ELECTRONIC ENERGY.
C     E3 IS TOTAL ENERGY.
   81 IF(IOP(3).NE.1)GO TO 90
C     ADD THE FIELD CONTRIBUTION TO THE NUCLEAR ENERGY, FOR EXTERNAL
C     UNIFORM ELECTRIC FIELD ONLY.
      DO 85 I=1,NATOMS
      IANI=IAN(I)
      IF(IANI.LE.0)GO TO 85
      E1=E1-DFLOAT(IANI)*(FX*C(I,1)+FY*C(I,2)+FZ*C(I,3))
   85 CONTINUE
C
   90 IF (IOP(4) .LE. 4) IOP21 = IOP(21)
      IF (IOP(4) .GT. 4) IOP21 = IOP(35)
      IF (IOP21 .EQ. 0) WRITE(IOUT,1010)E1,ACURCY
C     ENTER ITERATION ROUTINE CYCCLO - RETURN WHEN THE RMS DIFFERENCE
C     BETWEEN 2 SUCCESSIVE DENSITY MATRICES IS LESS THAN ACURCY
      CALL CYCCLO(MAXCYC)
C     FOR ED/BSSE, RESET 2-ELECTRON INTEGRAL UNIT NUMBER.
      IF (IOP(4) .EQ. 6) THEN
         ITWOEL = ISAVE
      END IF
C     CONVERGED IF IOP(1) IS 0.
      DCONV=ACURCY
      IF (IOP21 .NE. 0) RETURN
      IF(IOP(1).EQ.0)WRITE(IOUT,1000)E3
      IF(IOP(3).EQ.0)RETURN
      IF(IOP(3).EQ.2)GO TO 100
      WRITE(IOUT,1020)
      RETURN
  100 WRITE(IOUT,1030)E3,EMOL,ESOL
      RETURN
C*
  140 WRITE(IOUT,1070)
      IOP(1)=-2
      RETURN
      END
      SUBROUTINE FORMV(NBASIS)
C*
C     --------------
C     QCPE VERSION
C     JANUARY 1987
C     --------------
C*
C     FORM TRANSFORMATION MATRIX
C*
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C#
C     PARAMETER (NB=#NB)
C##
      PARAMETER (NB=200)
C###
      PARAMETER (ONE=1.0D0)
C
      COMMON/SCF1/ACURCY,DD(NB),D(NB,NB)
      COMMON/SCF3/VV(NB),V(NB,NB)
C
C     THE OVERLAP MATRIX IS READ FROM DISK FILE 8
      CALL TREAD(8,D,NB,NB,NBASIS,NBASIS,1)
C     THE OVERLAP MATRIX IS NOW DIAGONALIZED AND THE V MATRIX FORMED
C     EIGENVECTORS IN D
C     EIGENVALUES IN VV
C     DD IS JUST A SCRATCH ARRAY
      CALL TRED12(NBASIS,NB,D,D,VV,DD,-2)
      DO 10 J=1,NBASIS
      FACT=ONE/DSQRT(VV(J))
      DO 10 I=1,NBASIS
   10 V(J,I)=D(I,J)*FACT
C     WRITE OUT TRANSFORMATION MATRIX ON DISK ... FILE 4
      CALL TWRITE(4,V,NB,NB,NBASIS,NBASIS,0)
      RETURN
      END
      SUBROUTINE CYCCLO(MAXCYC)
C*
C     --------------
C     U OF T VERSION
C     JANUARY 1987
C     --------------
C*
C     ITERATION ROUTINE
C     PARAMETERS AS FOLLOWS
C     ACURCY ... CONVERGENCE REQUIRED ON DENSITY MATRIX
C     RETURNS WITH ACTUAL CONVERGENCE ACHEIVED
C     MAXCYC ... MAXIMUM NUMBER OF ITERATIONS ALLOWED
C*
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C#
C     PARAMETER (NA=#NA, NB=#NB)
C##
      PARAMETER (NA= 36, NB=200)
C###
      PARAMETER (NBB=NB*(NB+1)/2)
      PARAMETER (ZERO=0.0D0)
C
      COMMON /A/ IOP(99)
      COMMON /A/ NATOMS,ICHARG,MULTIP,IAN(NA),NAE,NBE,NE,NBASIS,C(NA,3)
      COMMON /A/ DUMC(4),IDUMC(401)
C
      COMMON/SCF1/ACURCY,DD(NB),D(NB,NB)
      COMMON/SCF2/FF(NB),F(NB,NB)
      COMMON/SCF3/VV(NB),V(NB,NB)
C
      COMMON/IO/IN,IOUT,IPUNCH,IMAT,ITWOEL,IODUM(212)
      COMMON/GEN/E1,E2,E3,EDUM(3),DCONV,SPIN(2),FIELD(3),FE,EMOL,ESOL,
     1 DPOL(4),VCM
C
      CHARACTER*8 LABEL
C
      DIMENSION FA(NBB),DA(NBB),VA(NBB)
C
      EQUIVALENCE (F(1,1),FA(1)),(D(1,1),DA(1)),(V(1,1),VA(1))
C
      DATA PT5/0.5D0/,TEN/10.0D0/
C
 1000 FORMAT(1X,I4,1X,2F20.9,1PD14.5,6X,A8)
 1010 FORMAT(///)
 1020 FORMAT('1COEFFICIENTS')
 1030 FORMAT('0*** SCF DID NOT CONVERGE AFTER',I4,' ITERATIONS ***')
 1040 FORMAT('1DENSITY MATRIX')
 1070 FORMAT(' E =',F20.9,10X,'DELTA E =',F15.9,10X,'CONVERGENCE =',
     $ 1PD13.5,10X,'RUN ABORTED')
 1080 FORMAT(' E =',F20.9,10X,'DELTA E =',F15.9,10X,'CONVERGENCE =',
     $ 1PD13.5,10X,'RUN ALLOWED TO CONTINUE')
 1090 FORMAT ('1FOCK MATRIX')
C*
C     PRESET CONVERGENCE ROUTINES
C     SETCLO IS AN ENTRY POINT IN CONCLO
      CALL SETCLO
      JCYCLE=1
      NTT=(NBASIS*(NBASIS+1))/2
      IEXT=1
C     SET PRINT OPTIONS.
      IPRINT=IOP(15)+IOP(16)
      IF (IOP(4) .LE. 4) IOP21 = IOP(21)
      IF (IOP(4) .GT. 4) IOP21 = IOP(35)
C     PRESET 2-ELECTRON INTEGRAL INPUT ROUTINE.
      CALL E2SETC
C     JUMP INTO LOOP FOR FIRST TIME ... CALCULATE ENERGY.
      E2=ZERO
      GO TO 30
C
C     TOP OF SCF LOOP.
C
   10 CALL CONCLO(KEY,IEXT,LABEL)
C     PRINT ITERATION RESULTS.
      IF (IOP21 .NE. 0) GO TO 15
      IF(IPRINT.NE.0)WRITE(IOUT,1010)
      IF(IEXT.EQ.0)WRITE(IOUT,1000)JCYCLE,E2,E3,ACURCY,LABEL
      IF(IEXT.NE.0)WRITE(IOUT,1000)JCYCLE,E2,E3
   15 JCYCLE=JCYCLE+1
C     HAS CONVERGENCE BEEN MET ... IF SO ... EXIT
C     IF DENSITY MATRIX HAS JUST BEEN EXTRAPOLATED, CONTINUE FOR 2
C     MORE ITERATIONS TO ALLOW POSSIBLE CONVERGENCE
      IF(KEY)30,90,20
C     HAVE WE EXCEEDED THE MAXIMUM ALLOWED NUMBER OF CYCLES ... IF
C     SO ... EXIT
   20 IF(MAXCYC-JCYCLE)91,30,30
   30 IF(IEXT.EQ.0)EPREV=E2
C     FORM TWO ELECTRON PART OF THE FOCK MATRIX
      CALL FOFCLO (NTT, IOP, NBASIS)
      IF (IOP(1) .NE. 0) RETURN
C     THE CORE HAMILTONIAN IS READ FROM DISK INTO MATRIX VA.
      CALL TREAD(13,VA,NBB,1,NTT,1,0)
C     AND THE ONE ELECTRON CONTRIBUTION TO THE ENERGY IS CALCULATED
      E2=TRACLO(VA,DA,NBASIS)
C     ADD THE CORE HAMILTONIAN TO THE FOCK MATRIX.
      DO 40 I=1,NTT
   40 FA(I)=FA(I)+VA(I)
C     WRITE FOCK MATRIX ONTO THE DISK ... FILE 15 IF REQUESTED.
      IF (IOP(19).NE.0) CALL TWRITE(15,FA,NBB,1,NTT,1,0)
C     FINISH CALCULATING THE ENERGY
      E2=PT5*(E2+TRACLO(FA,DA,NBASIS))
      E3=E1+E2
C
C     CHANGE MATRIX FA TO SQUARE FORM F.
C
      CALL SQUARE(FA,F,NBASIS)
C
C     CHECK FOR THE PRESENCE OF A FIELD (EXTERNAL OR SCRFT).
C
      IF (IOP(3) .NE. 0) CALL SCRFT (15, 19, -1, F, D)
C
C     FOR ED/BSSE, SAVE THE FIRST CYCLE ENERGY IN /GEN/ IF NECESSARY.
C
      IF (JCYCLE .EQ. 1) THEN
         IF (IOP(4).EQ.4 .OR. IOP(4).EQ.6) EDUM(1) = E3
      END IF
C
C     PRINT FOCK MATRIX IF DEBUG OPTION SET TO 4-7.
C
      IF (IOP(31) .LT. 4) GO TO 70
      WRITE (IOUT,1090)
      CALL GBSOUT (F, FF, NB, NB, NBASIS, 0)
C
C     READ IN THE V MATRIX ... DISK FILE 4.
C
   70 CALL TREAD(4,V,NB,NB,NBASIS,NBASIS,0)
C
C     THE F MATRIX IS TRANSFORMED BY THE V MATRIX   TWO STEPS.
C
      CALL MATPAC(V,F,D,NBASIS,1)
      CALL MATPAC(D,V,F,NBASIS,3)
C     THEN DIAGONALIZED.
      CALL TRED12(NBASIS,NB,F,D,FF,DD,2)
C     WRITE OUT EIGENVALUES ... ARRAY FF ... ON DISK ... FILE 5.
      CALL TWRITE(5,FF,NB,1,NBASIS,1,0)
C     THE EIGENVECTORS ARE TRANSFORMED BY THE V MATRIX,
C     AND THE MOLECULAR ORBITAL COEFFICIENT MATRIX IS FORMED.
      CALL MATPAC(V,D,F,NBASIS,2)
C     UPDATE DISK WITH M.O. COEFFICIENTS ... FILE 25.
      CALL TWRITE(25,F,NB,NB,NBASIS,NBASIS,0)
      IF(IOP(15).NE.1)GO TO 78
      WRITE(IOUT,1020)
      CALL GBSOUT(F,FF,NB,NB,NBASIS,1)
C
C     THE DENSITY MATRIX IS FORMED FROM THE COEFFICIENTS.
C
   78 DO 80 I=1,NBASIS
      DO 80 J=1,I
      SUM=ZERO
      DO 81 K=1,NAE
   81 SUM=SUM+F(I,K)*F(J,K)
      SUM=SUM+SUM
      D(I,J)=SUM
   80 D(J,I)=SUM
C     WRITE OUT DENSITY MATRIX ON THE DISK ... FILE 19
      CALL TWRITE(19,D,NB,NB,NBASIS,NBASIS,1)
      IF(IOP(16).NE.1)GO TO 88
      WRITE(IOUT,1040)
      CALL GBSOUT(D,FF,NB,NB,NBASIS,0)
C     D INTO LINEAR FORM
   88 CALL LINEAR(D,DA,NBASIS)
      GO TO 10
C
C     MAXIMUM ITERATION COUNT EXCEEDED WITHOUT CONVERGENCE.
C
   91 WRITE(IOUT,1030)MAXCYC
      IOP(1)=-1
      IF(IOP(22).EQ.0)RETURN
C     ALLOW RUN TO CONTINUE IF ENERGY CHANGE IS SMALL ENOUGH.
      EPREV=E2-EPREV
      IF(DABS(EPREV).LE.TEN**(-8+IOP(22)))GO TO 92
      WRITE(IOUT,1070)E3,EPREV,ACURCY
      RETURN
C     ALLOW RUN TO CONTINUE.
   92 WRITE(IOUT,1080)E3,EPREV,ACURCY
      IOP(1)=0
   90 RETURN
      END
      SUBROUTINE FOFCLO (NTT, IOP, NBASIS)
C*
C     --------------
C     U OF T VERSION
C     DECEMBER 1988
C     --------------
C*
C     SUBROUTINE TO FORM THE TWO ELECTRON PART OF THE FOCK MATRIX
C     GIVEN THE DENSITY MATRIX AND ANY OR ALL TWO ELECTRON INTEGRALS.
C     BASED ON QCPE GAUSSIAN 76.
C*
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C#
C     PARAMETER (NA=#NA, NB=#NB)
C##
      PARAMETER (NA= 36, NB=200)
C###
      PARAMETER (NBB=NB*(NB+1)/2, NB1=NB*(NB+1),
     1 NBF1=NB*NB-NBB, NBP1=NB+1)
      PARAMETER (ZERO=0.0D0)
C*
      INTEGER P,Q,R,SINDX
      LOGICAL USEOFF
C
      COMMON/SCF1/ACURCY,DD(NB),D(NBB),D1(NBF1)
      COMMON/SCF2/FF(NB),F(NBB),F1(NBF1)
      COMMON/SCF3/FILL(NB1)
C
      COMMON/BSINFO/NVO(NA),IAOFF(NA)
      COMMON/PACKED/I,J,K,L,JA
      COMMON/IO/IN,IOUT,IPUNCH,IMAT,ITWOEL,IODUM(212)
C
      DIMENSION IJ(NBP1), IX(3072,2), IOP(99), IV(2)
C
      EQUIVALENCE (IX(1,1),FILL(1)), (VALINT,IV(1))
      EQUIVALENCE (P,I),(Q,J),(R,MINDX,K),(SINDX,L)
C
      SAVE IJ
C
      DATA PT5/0.5D0/
C?IBM/GLD/GBR/VAX/UNX
      DATA NWORDS/3/, MAXBUF/3070/
C??
C?CDC
C     DATA NWORDS/2/, MAXBUF/3071/, USEOFF/.FALSE./
C??
C?IBM/GLD/GBR/VAX/UNX
      USEOFF = NBASIS .GT. 127
C??
C     SETUP FOR DOUBLE BUFFERING (ASYNCHRONOUS I/O).
C     LBUFF IS THE CURRENT BUFFER NUMBER (BEING UNPACKED).
C     NBUFF IS THE NEXT BUFFER NUMBER (I/O IN PROGRESS).
C
      NBUFF = 1
      CALL NWIORD (ITWOEL, IX(1,NBUFF), 3072, .FALSE., 'FOFCLO',
     1 IOP(1), *9000)
C
C     ZERO THE ARRAY F, WHERE THE F MATRIX IS TO BE PLACED.
C
      DO 10 M=1,NTT
   10 F(M)=ZERO
C
C     THE FILLED BUFFER LOOKS AS FOLLOWS FOR 32 BIT MACHINES:
C     LABEL-INTEGRAL-INTEGRAL-LABEL-INTEGRAL-INTEGRAL-LABEL-----------
C     THE LABEL BEING A PACKED WORD CONTAINING THE NUMBERS OF THE FOUR
C     ATOMIC ORBITALS ASSOCIATED WITH THE INTEGRAL - THE SIGN
C     SERVES TO CLASSIFY THE INTEGRAL TYPE (1 OR 2) - SEE SHLOUT.
C
C     WAIT FOR PREVIOUS BUFFER TO BE READ, THEN START READING THE NEXT
C     ONE.
C
   20 LBUFF = NBUFF
      CALL NWIOWT (ITWOEL, 3072, .FALSE., 'FOFCLO', IOP(1), *9000)
      NBUFF = 3 - NBUFF
      CALL NWIORD (ITWOEL, IX(1,NBUFF), 3072, .FALSE., 'FOFCLO',
     1 IOP(1), *9000)
C
C     THIS IS THE LOOP OVER THE BUFFER OF INTEGRALS AND LABELS
C     TREATING EACH LABEL-INTEGRAL COMBINATION SEPARATELY
C     THE ROUTINE USES A LABEL OF 0 TO SIGNIFY THAT A NEW SET OF ATOM
C     OFFSETS IS TO BE APPLIED.
C     FOR 32 BIT MACHINES, EACH LABEL/INTEGRAL OCCUPIES 3 WORDS.
C     FOR 60 BIT MACHINES, EACH LABEL/INTEGRAL OCCUPIES 2 WORDS.
C
      DO 280 M=1,MAXBUF,NWORDS
      JA=IX(M,LBUFF)
      IV(1)=IX(M+1,LBUFF)
C?IBM/GLD/GBR/VAX/UNX
      IV(2)=IX(M+2,LBUFF)
C??
      SECINT=-PT5*VALINT
C     UNPACK THE LABELS PREVIOUSLY STORED AS ONE WORD.
C     THE FOLLOWING CODING FINDS ALL THE UNIQUE PERMUTATIONS OF THE
C     INTEGRAL LABELS AND CORRESPONDINGLY ADDS THE VARIOUS
C     CONTRIBUTIONS OF THE INTEGRAL TO THE F MATRIX.
C     CAUTION ** ONLY A SINGLE PERMUTATION OF THE INTEGRAL LABELS MAY
C     APPEAR IN THE INPUT - OTHERWISE ALL THE PERMUTATIONS ON THAT
C     INTEGRAL WILL BE ADDED TO THE F MATRIX MORE THAN ONCE.
C     I, J, K AND L ARE THE VARIOUS LABELS.
C     SEE PROGRAM SHLOUT (LINK 0306) FOR MORE DETAILS.
C
      IF(JA)30,200,40
C
C     TYPE 2 INTEGRALS ARE CLASSIFIED BY SINDX.
C
   30 JA=-JA
C?IBM/GLD/GBR/VAX/CDC
C     CALL UNPACK
C??
C?UNX
      CALL UNPACK (JA, I, J, K, L)
C??
      IF (USEOFF) GO TO 35
C     DO NOT USE OFFSETS.
      GO TO (101,111,121,131,141,151,161,171),SINDX
C     USE OFFSETS.
   35 GO TO (100,110,120,130,140,150,160,170),SINDX
C
C     ( AB I CD ) - TYPE I INTEGRAL.
C
C?IBM/GLD/GBR/VAX/CDC
C  40 CALL UNPACK
C??
C?UNX
   40 CALL UNPACK (JA, I, J, K, L)
C??
      IF (USEOFF) THEN
         I=I+IOFF
         J=J+JOFF
         K=K+KOFF
         L=L+LOFF
      END IF
      JS=IJ(I)+J
      JT=IJ(K)+L
      TERINT=VALINT+VALINT
      F(JS)=F(JS)+D(JT)*TERINT
      F(JT)=F(JT)+D(JS)*TERINT
      JS=IJ(I)+K
      IF(J.LT.L)GO TO 50
      JT=IJ(J)+L
      GO TO 60
   50 JT=IJ(L)+J
   60 F(JS)=F(JS)+D(JT)*SECINT
      F(JT)=F(JT)+D(JS)*SECINT
      JS=IJ(I)+L
      IF(J.LT.K)GO TO 80
      JT=IJ(J)+K
      GO TO 90
   80 JT=IJ(K)+J
   90 F(JS)=F(JS)+D(JT)*SECINT
      F(JT)=F(JT)+D(JS)*SECINT
      GO TO 280
C
C     ( AB I AC )
C
  100 P=P+IOFF
      Q=Q+JOFF
      R=R+LOFF
  101 JS=IJ(P)+Q
      JT=IJ(P)+R
      TERINT=VALINT-SECINT
      F(JS)=F(JS)+D(JT)*TERINT
      F(JT)=F(JT)+D(JS)*TERINT
      JS=IJ(P+1)
      JT=IJ(Q)+R
      F(JS)=F(JS)-D(JT)*VALINT
      F(JT)=F(JT)+D(JS)*SECINT
      GO TO 280
C
C     ( AB I BC )
C
  110 P=P+IOFF
      Q=Q+JOFF
      R=R+LOFF
  111 JS=IJ(P)+Q
      JT=IJ(Q)+R
      TERINT=VALINT-SECINT
      F(JS)=F(JS)+D(JT)*TERINT
      F(JT)=F(JT)+D(JS)*TERINT
      JS=IJ(Q+1)
      JT=IJ(P)+R
      F(JS)=F(JS)-D(JT)*VALINT
      F(JT)=F(JT)+D(JS)*SECINT
      GO TO 280
C
C     ( AC I BC )
C
  120 P=P+IOFF
      Q=Q+JOFF
      R=R+KOFF
  121 JS=IJ(P)+Q
      JT=IJ(R)+Q
      TERINT=VALINT-SECINT
      F(JS)=F(JS)+D(JT)*TERINT
      F(JT)=F(JT)+D(JS)*TERINT
      JS=IJ(Q+1)
      JT=IJ(P)+R
      F(JS)=F(JS)-D(JT)*VALINT
      F(JT)=F(JT)+D(JS)*SECINT
      GO TO 280
C
C     ( AB I AB )
C
  130 P=P+IOFF
      Q=Q+JOFF
  131 JS=IJ(P)+Q
      TERINT=VALINT-SECINT
      F(JS)=F(JS)+D(JS)*TERINT
      JS=IJ(P+1)
      JT=IJ(Q+1)
      F(JS)=F(JS)+D(JT)*SECINT
      F(JT)=F(JT)+D(JS)*SECINT
      GO TO 280
C
C     ( AA I BC )
C
  140 P=P+IOFF
      Q=Q+KOFF
      R=R+LOFF
  141 JS=IJ(P+1)
      JT=IJ(Q)+R
      TERINT=VALINT+VALINT
      F(JS)=F(JS)+D(JT)*TERINT
      F(JT)=F(JT)+D(JS)*VALINT
      JS=IJ(P)+Q
      JT=IJ(P)+R
      F(JS)=F(JS)+D(JT)*SECINT
      F(JT)=F(JT)+D(JS)*SECINT
      GO TO 280
C
C     ( AB I CC )
C
  150 P=P+IOFF
      Q=Q+JOFF
      R=R+KOFF
  151 JS=IJ(P)+Q
      JT=IJ(R+1)
      TERINT=VALINT+VALINT
      F(JS)=F(JS)+D(JT)*VALINT
      F(JT)=F(JT)+D(JS)*TERINT
      JS=IJ(P)+R
      IF(Q.LT.R)GO TO 155
      JT=IJ(Q)+R
      GO TO 156
  155 JT=IJ(R)+Q
  156 F(JS)=F(JS)+D(JT)*SECINT
      F(JT)=F(JT)+D(JS)*SECINT
      GO TO 280
C
C     SINDX=6 ... 3 SUBCASES.
C
  160 P=P+IOFF
      Q=Q+LOFF
  161 IF(MINDX-2)165,166,167
C
C     ( AB I BB )
C
  165 JS=IJ(P)+Q
      JT=IJ(Q+1)
      F(JS)=F(JS)-D(JT)*SECINT
      F(JT)=F(JT)+D(JS)*VALINT
      GO TO 280
C
C     ( AA I BB )
C
  166 JS=IJ(P+1)
      JT=IJ(Q+1)
      F(JS)=F(JS)+D(JT)*VALINT
      F(JT)=F(JT)+D(JS)*VALINT
      JS=IJ(P)+Q
      F(JS)=F(JS)+D(JS)*SECINT
      GO TO 280
C
C     ( AA I AB )
C
  167 JS=IJ(P+1)
      JT=IJ(P)+Q
      F(JS)=F(JS)+D(JT)*VALINT
      F(JT)=F(JT)-D(JS)*SECINT
      GO TO 280
C
C     ( AA I AA )
C
  170 P=P+IOFF
  171 JS=IJ(P+1)
      F(JS)=F(JS)-D(JS)*SECINT
      GO TO 280
C
C     GET NEW ATOM OFFSET VALUES.
C
  200 JA=IV(1)
      IF (JA .EQ. 0) GO TO 290
C?IBM/GLD/GBR/VAX/CDC
C     CALL UNPACK
C??
C?UNX
      CALL UNPACK (JA, I, J, K, L)
C??
      IOFF=IAOFF(I)
      JOFF=IAOFF(J)
      KOFF=IAOFF(K)
      LOFF=IAOFF(L)
  280 CONTINUE
      GO TO 20
C
C     WAIT FOR FINAL BUFFER TO BE READ - IT SHOULD BE AT END OF FILE.
C
  290 CALL NWIOWT (ITWOEL, 3072, .TRUE., 'FOFCLO', IOP(1), *9000)
      REWIND ITWOEL
      RETURN
C
C     ERROR EXIT - I/O ERROR READING 2 ELECTRON INTEGRALS.
C
 9000 RETURN
C
      ENTRY E2SETC
C*
C     FORM INDEX ARRAY IJ
C     THIS IS USED IN CONJUNCTION WITH THE CONVERSION OF DOUBLE
C     TO SINGLE SUBSCRIPTS
C
      DO 310 M=1,NBP1
  310 IJ(M)=(M*(M-1))/2
      RETURN
      END
      SUBROUTINE CONCLO(KEY,IEXT,LABEL)
C*
C     --------------
C     U OF T VERSION
C     DECEMBER 1988
C     --------------
C*
C     CLOSED SHELL SCF CONVERGENCE ROUTINES
C     USES DISK FILES 31 TO 33 FOR SCRATCH
C     EACH MAXIMUM OF #NBB DOUBLE WORDS LONG
C*
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C#
C     PARAMETER (NA=#NA, NB=#NB)
C##
      PARAMETER (NA= 36, NB=200)
C###
      PARAMETER (NBB=NB*(NB+1)/2, NBF1=NB*NB-NBB)
      PARAMETER (ZERO=0.0D0, ONE=1.0D0, TWO=2.0D0)
C
      COMMON /A/ IOP(99),IC1(NA),IC2(6),N,CD1(NA,3),CD2(4),IC3(401)
C
      COMMON/SCF1/ACURCY,DD(NB),D(NBB),D1(NBF1)
      COMMON/SCF2/A2(NBB),A3(NBB)
      COMMON/SCF3/A4(NBB),A1(NBB)
C
      COMMON/IO/IN,IOUT,IODUM(215)
C
      DIMENSION A5(NBB)
C
      CHARACTER LABEL*8
C
      EQUIVALENCE (D(1),A5(1))
C
      SAVE
C
      DATA PT99/0.99D0/, PT995/0.995D0/, ONEPT9/1.9D0/
      DATA FOUR/4.0D0/, PT06/0.06D0/
C
 1010 FORMAT (/'0DENSITY DISPLACEMENTS MATRIX IN CONCLO'/
     1 (1X,10(I4,F9.5)))
C
      KEY=-1
      IEXT=1
      LABEL = ' '
      IOP17=IOP(17)+1
      ICOUNT=ICOUNT+1
      IF(ICOUNT.GE.4)GO TO 5
      GO TO (60,20,10),ICOUNT
C     ARRAYS A2 TO A5 CONTAIN DP(3),DP(2),P(N-1),P(N)
    5 CALL TREAD (31,A2,NBB,1,NTT,1,0)
   10 CALL TREAD (32,A3,NBB,1,NTT,1,0)
   20 CALL TREAD (33,A4,NBB,1,NTT,1,0)
C     CALCULATE DISPLACEMENT VECTOR DP(1)
      DO 30 I=1,NTT
   30 A4(I)=A5(I)-A4(I)
C
      IF (IOP(31) .NE. 7) GO TO 40
      WRITE (IOUT,1010) (I,A4(I),I=1,NTT)
C
   40 IF(ICOUNT.EQ.2)GO TO 50
C     UPDATE DISK FILES FOR NEXT ITERATION
      CALL TWRITE(31,A3,NBB,1,NTT,1,0)
   50 CALL TWRITE(32,A4,NBB,1,NTT,1,0)
   60 CALL TWRITE(33,A5,NBB,1,NTT,1,0)
C     ARRAYS A2 TO A5 NOW CONTAIN DP(3), DP(2), DP(1), P(N) --
C     SKIP TO END FOR CYCLE AFTER EXTRAPOLATION OR VERY FIRST CYCLE
      IF(ICOUNT.EQ.1)RETURN
      IEXT=0
      KEY=1
C     FIND DISPLACEMENTS DP1,DP2,DP3
      SP11=TRACLO(A4,A4,N)
      DP1=DSQRT(SP11)
C     TEST FOR CONVERGENCE BY FINDING IF THE ROOT MEAN SQUARE DP IS LESS
C     THAN ACURCY ... IF SO ... EXIT
      ACURCY=DP1/DFLOAT(N)
      IF(ACURCY.GE.CRIT)GO TO 80
C     CONVERGENCE CRITERION MET ... EXIT
C     WATCH OUT FOR USE OF EXTRAPOLATED DENSITY MATRIX IN DEWAR METHOD.
      IF(IOP17.NE.2.OR.ICOUNT.GT.2)KEY=0
      RETURN
C     WHAT TYPE OF EXTRAPOLATION?
   80 GO TO (100,300,100,90),IOP17
C     NO EXTRAPOLATION.
   90 ICOUNT=1
      RETURN
C     POPLE'S GAUSSIAN 70 EXTRAPOLATION.
  100 IF(ICOUNT.LE.3)RETURN
      SP12=TRACLO(A3,A4,N)
      SP13=TRACLO(A2,A4,N)
      SP22=TRACLO(A3,A3,N)
      SP23=TRACLO(A2,A3,N)
      SP33=TRACLO(A2,A2,N)
      DP2=DSQRT(SP22)
      DP3=DSQRT(SP33)
C     FIND COSINE OF ANGLE BETWEEN SUCCESSIVE DISPLACEMENTS
      COSPHI=SP12/(DP1*DP2)
C     FIND COSINE OF ANGLE BETWEEN DP(3) AND PLANE OF DP(1) AND DP(2)
      X=(SP13*SP22-SP12*SP23)/(SP11*SP22-SP12*SP12)
      Y=(SP23*SP11-SP12*SP13)/(SP11*SP22-SP12*SP12)
      COSPSI=DSQRT(X*X*SP11+Y*Y*SP22+TWO*X*Y*SP12)/DP3
C     DO NOT EXTRAPOLATE UNLESS 4 CONSECUTIVE POINTS ARE NEARLY COPLANAR
      IF(COSPSI.LE.PT99)RETURN
C     EXPRESS DP(1) AS X*DP(3)(PROJECTED)+Y*DP(2)
      Y=-Y/X
      X=ONE/X
C     TEST IF 2*2 MATRIX HAS REAL EIGENVALUES BETWEEN -.95 AND +.95
      XY=Y*Y+FOUR*X
      IF(XY.LT.ZERO)RETURN
      XY=DABS(Y)+DSQRT(XY)
      IF(XY.LE.ONEPT9)GO TO 190
      IF(IOP(18).EQ.1)RETURN
C     IF 4-POINT EXTRAPOLATION IS NOT POSSIBLE TRY 3-POINT
      IF(DABS(COSPHI).LE.PT995)RETURN
      X=DP1/(DP2*COSPHI-DP1)
      DO 180 I=1,NTT
  180 A5(I)=A5(I)+X*A4(I)
      LABEL = '3-POINT'
      ICOUNT=0
      KEY=-1
      RETURN
  190 XXX=X/(ONE-X-Y)
      YYY=(X+Y)/(ONE-X-Y)
      DO 200 I=1,NTT
  200 A5(I)=A5(I)+XXX*A3(I)+YYY*A4(I)
      LABEL = '4-POINT'
      ICOUNT=0
      KEY=-1
      RETURN
C     DEWAR EXTRAPOLATION: MJS DEWAR AND PK WEINER, COMP & CHEM, 2,
C     31 (1978). CALCULATE A NEW VALUE FOR LAMBDA AND SAVE PREVIOUS
C     VALUE IN Y2.
  300 IDEWIT=IDEWIT+1
C     IDEWIT CONTROLS THE EXTRAPOLATION PROCEDURE:
C     1 ... JUST EXTRAPOLATED THE DENSITY MATRIX,
C     2 ... CALCULATE LAMBDA2,
C     3 ... CALCULATE LAMBDA3 AND EXTRAPOLATE.
      IF(IDEWIT-2)340,305,303
  303 Y2=Y
  305 SP22=TRACLO(A3,A3,N)
      SP12=TRACLO(A3,A4,N)
      Y=SP12/SP22
C     CHECK FOR DIVERGENCE.
      IF(DABS(Y).GE.ONE)GO TO 330
C     EXTRAPOLATE IF 2 SUCCESSIVE LAMBDA'S AGREE WITHIN DCRIT.
      IF(IDEWIT.EQ.2)GO TO 340
      IF(DABS(Y-Y2).GT.DCRIT)GO TO 340
      LABEL = ' DEWAR'
  310 X=Y/(ONE-Y)
      DO 320 I=1,NTT
  320 A5(I)=A5(I)+X*A4(I)
      ICOUNT=1
      KEY=-1
      IDEWIT=0
C     SAVE THIS EXTRAPOLATED DENSITY MATRIX EVEN THOUGH NOT IDEMPOTENT.
      GO TO 60
C     SPECIAL VALUE OF LAMBDA FOR DIVERGENT CASES.
  330 Y=SP12/SP11
      LABEL = ' DEWAR'''
      GO TO 310
  340 ICOUNT=2
      RETURN
C*
C     ENTRY TO PRESET CONVERGENCE ROUTINES
C*
      ENTRY SETCLO
      ICOUNT=0
      NTT=(N*(N+1))/2
C     PRESET REQUIRED CONVERGENCE ON THE DENSITY MATRIX
      CRIT=ACURCY
      IDEWIT=0
      DCRIT=PT06*DFLOAT(IOP(20)+1)
      IF(IOP(20).GE.7)DCRIT=TWO
      RETURN
      END
      SUBROUTINE SCRFT (IFOCK, IDENS, ILAST, F, D)
C*
C     --------------
C     U OF T VERSION
C     MAY 1990
C     --------------
C*
C     THIS SUBROUTINE EVALUATES THE EFFECT OF EXTERNAL ELECTRIC FIELDS
C     AND SOLVENTS. THE EXTERNAL ELECTRIC FIELD WORKS FOR BOTH CLOSED
C     SHELL SCF AND UHF SCF, WHILE THE SOLVENT FIELD IS ONLY FOR
C     CLOSED SHELL SCF.
C*
C     INPUT PARAMETERS:
C     IFOCK - FILE NUMBER FOR FOCK MATRIX.
C     IDENS - FILE NUMBER FOR DENSITY MATRIX.
C     ILAST - CODE NUMBER FOR CALL TYPE AND SEQUENCE:
C             -1 - DO ALL OPERATIONS IN ONE CALL (CLOSED SHELL SCF).
C              1 - FIRST CALL (UHF ALPHA SPIN SCF).
C              0 - FINAL CALL (UHF BETA SPIN SCF).
C     F     - ARRAY CONTAINING CURRENT FOCK MATRIX; THE UPDATED FOCK
C             MATRIX IS RETURNED AND WRITTEN TO DISK.
C     D     - WORK ARRAY (USED FOR DENSITY MATRIX); THE ORIGINAL
C             CONTENTS OF THIS ARRAY ARE DESTROYED.
C*
C     REFERENCES:
C     J.L. RIVAIL AND D. RINALDI, CHEM. PHYS., 18, 233 (1976);
C     R. CIMIRAGLIA, S. MIERTUS AND J. TOMASI, CHEM. PHYS. LETT., 80,
C     286 (1981).
C*
C     NOTE: AS SOME DOUBT STILL REMAINS AS TO THE INTERPRETATION
C     OF THE EQUATIONS OF SELF-CONSISTENT REACTION FIELD THEORY, THE
C     FOLLOWING DEFINES THE VALUES USED TO IMPLEMENT SCRFT IN
C     MONSTERGAUSS:
C     1) EMOL IS THE MOLECULAR ELECTRONIC ENERGY IN THE MEDIUM,
C     GIVEN BY EMOL=<I!H(I)!I>, WITH I THE COMPLETE PERTURBED WAVE
C     FUNCTION, AND H(I) THE PERTURBED HAMILTONIAN.
C     2) ESOL IS THE POLARIZATION ENERGY OF THE SOLVENT, GIVEN BY
C     ESOL=(1/2)*FE*DTOTAL*DTOTAL, WITH DTOTAL THE TOTAL DIPOLE MOMENT.
C     3) THE TOTAL ENERGY NOW BECOMES, ACCORDING TO THE EULER-
C     LAGRANGE METHOD, E3=EMOL+ESOL. ON CALLING SCRFT, E3 IS TAKEN
C     TO CONTAIN E1+E2, WHERE E1 IS THE NUCLEAR ENERGY, AND
C     E2=E(H0)=<I!H0(I)!I>, WHERE H0 IS THE UNPERTURBED HAMILTONIAN.
C     IN THIS CASE, THE TOTAL ENERGY MAY ALSO BE WRITTEN AS
C     E(H0)-ESOL.
C     4) THE DIPOLE MOMENT IS COMPUTED CORRECTLY FOR UHF CASES, BUT
C     THE FOCK MATRIX CONTRIBUTIONS ARE STILL NOT CORRECT.
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C#
C     PARAMETER (NA=#NA, NB=#NB)
C##
      PARAMETER (NA= 36, NB=200)
C###
      PARAMETER (ZERO=0.0D0)
C
      COMMON /A/ IOP(99)
      COMMON /A/ NATOMS,ICHARG,MULTIP,IAN(NA),NAE,NBE,NE,NBASIS,C(NA,3)
      COMMON /A/ ANTOAU,DCONST,CDUM(2),ICDUM(401)
C
      COMMON/SCF3/VV(NB),V(NB,NB)
C
      COMMON/GEN/E(6),DCONV,SPIN(2),FIELD(3),FE,EMOL,ESOL,DP(4),VCM
      COMMON/IO/IN,IOUT,IODUM(215)
C
      DIMENSION F(NB,NB), D(NB,NB)
C
      DATA PT5/0.5D0/
C
 1020 FORMAT(22X,'X:',1PD14.6,10X,'Y:',D14.6,10X,'Z:',D14.6,10X,'TOTAL:'
     1 ,D14.6/22X,'EMOL =',0PF17.9,'   ESOL =',F17.9)
C
C     READ IN THE DENSITY MATRIX.
C
      CALL TREAD (IDENS, D, NB, NB, NBASIS, NBASIS, 1)
C
C     WHAT TYPE OF CASE IS IT?
C     IOP(3)=1 ... THE CALCULATION IS DONE IN THE PRESENCE OF AN
C                  EXTERNAL UNIFORM ELECTRIC FIELD.
C     IOP(3)=2 ... THE CALCULATION IS DONE TO INCLUDE SOLVENT EFFECTS.
C
      IF (IOP(3) .EQ. 2) GO TO 200
C
C     CALCULATE THE EFFECT OF AN EXTERNAL ELECTRIC FIELD.
C
C     CALCULATE X Y AND Z COMPONENTS INDEPENDENTLY:
C     X INTEGRALS ON DISK FILE 34,
C     Y ON 35,
C     Z ON 36.
C
      DO 100 K=1,3
      CALL TREAD (33+K, V, NB, NB, NBASIS, NBASIS, 1)
      FX = FIELD(K)
      DO 100 J=1,NBASIS
      DO 100 I=1,NBASIS
      T = FX * V(I,J)
      E(2) = E(2) + D(I,J)*T
  100 F(I,J) = F(I,J) + T
C
      CALL TWRITE (IFOCK, F, NB, NB, NBASIS, NBASIS, 1)
      E(3) = E(1) + E(2)
      RETURN
C
C     EVALUATION OF ELECTRIC DIPOLE MOMENT FOR SOLVENT EFFECTS.
C
C     LOOP OVER DIPOLE MOMENT COMPONENTS.
C
  200 DO 240 K=1,3
C
C     BRING IN DIPOLE INTEGRALS.
C
      CALL TREAD (33+K, V, NB, NB, NBASIS, NBASIS, 1)
C
C     FORM TRACE OF PRODUCT  D*V.
C
      TE = ZERO
      DO 210 J=1,NBASIS
      DO 210 I=1,NBASIS
  210 TE = TE - D(I,J)*V(I,J)
C
C     ADD IN NUCLEAR CONTRIBUTION.
C
      TN = ZERO
      DO 220 I=1,NATOMS
      IF (IAN(I) .LE. 0) GO TO 220
      AN = IAN(I)
      TN = TN + C(I,K)*AN
  220 CONTINUE
C
C     ADD NUCLEAR CONTRIBUTION TO DIPOLE MOMENT ONLY ONCE.
C
      IF (IABS(ILAST) .EQ. 1) THEN
         DP(K) = TE + TN
      ELSE
         DP(K) = DP(K) + TE
      END IF
C
C     DETERMINE THE CONTRIBUTION TO THE FOCK MATRIX.
C     FORM THE DOT PRODUCT BETWEEN THE FIELD AND DIPOLE MOMENT.
C
      T = (TE+TN) * FE
      DO 230 J=1,NBASIS
      DO 230 I=1,NBASIS
  230 F(I,J) = F(I,J) + T*V(I,J)
C
  240 CONTINUE
C
C     RESTORE FOCK MATRIX TO DISK.
C
      CALL TWRITE (IFOCK, F, NB, NB, NBASIS, NBASIS, 1)
C
C     COMPUTE TOTALS ONLY FOR THE LAST CALL IN A SEQUENCE.
C
      IF (ILAST .GT. 0) RETURN
C
C     GET TOTAL DIPOLE MOMENT.
C
      DP(4) = DSQRT(DP(1)*DP(1)+DP(2)*DP(2)+DP(3)*DP(3))
C
C     CALCULATE EMOL, ESOL, AND TOTAL ENERGY.
C     CONVERT DIPOLE MOMENT TO DEBYES.
C
      ESOL = PT5 * FE * DP(4) * DP(4)
      E(3) = E(3) - ESOL
      EMOL = E(3) - ESOL
      DP(1) = DP(1) * DCONST
      DP(2) = DP(2) * DCONST
      DP(3) = DP(3) * DCONST
      DP(4) = DP(4) * DCONST
      IF (IOP(31) .NE. 0) WRITE (IOUT,1020) DP, EMOL, ESOL
      RETURN
      END
      FUNCTION TRACLO(A,B,N)
C*
C     --------------
C     QCPE VERSION
C     JANUARY 1987
C     --------------
C*
C     TRACE OF A PRODUCT OF SYMMETRIC MATRICES A AND B STORED IN LINEAR
C     VECTORS.
C*
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C#
C     PARAMETER (NB=#NB)
C##
      PARAMETER (NB=200)
C###
      PARAMETER (NBB=NB*(NB+1)/2)
      PARAMETER (ZERO=0.0D0, TWO=2.0D0)
C
      DIMENSION A(NBB),B(NBB)
C
      TRACLO=ZERO
      K=0
C
      DO 2 J=1,N
      DO 1 I=1,J
      K=K+1
    1 TRACLO=TRACLO+TWO*A(K)*B(K)
    2 TRACLO=TRACLO-A(K)*B(K)
      RETURN
      END
      SUBROUTINE SQUARE(A,B,N)
C*
C     --------------
C     U OF T VERSION
C     JANUARY 1987
C     --------------
C*
C     PLACES LINEAR ARRAY IN SQUARE FORM
C*
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C#
C     PARAMETER (NB=#NB)
C##
      PARAMETER (NB=200)
C###
      PARAMETER (NBB=NB*(NB+1)/2)
C
      DIMENSION A(NBB),B(NB,NB)
C
      K=(N*(N+1))/2
C
      DO 4 J=1,N
      JX=N-J+1
      DO 4 I=1,JX
      IX=JX-I+1
      B(IX,JX)=A(K)
    4 K=K-1
C
      DO 5 J=1,N
      DO 5 I=1,J
    5 B(J,I)=B(I,J)
      RETURN
      END
      SUBROUTINE LINEAR(A,B,N)
C*
C     --------------
C     QCPE VERSION
C     JANUARY 1987
C     --------------
C*
C     PLACES SYMMETRIC SQUARE ARRAY IN LINEAR FORM.
C*
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C#
C     PARAMETER (NB=#NB)
C##
      PARAMETER (NB=200)
C###
      PARAMETER (NBB=NB*(NB+1)/2)
C
      DIMENSION A(NB,NB),B(NBB)
C
      K=1
C
      DO 1 J=1,N
      DO 1 I=1,J
      B(K)=A(I,J)
    1 K=K+1
      RETURN
      END
