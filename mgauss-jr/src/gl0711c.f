C     GL0711C      02 APR 89                                         MRP
      SUBROUTINE BFGS(N,IOP)
C
C=OPTIMIZATION METHODS
C BROYDEN-FLETCHER-GOLDFARB-SHANNO (BFGS) METHOD, WITH GRADIENTS.
C ***************************************************************
C
C1BFGS
C     BFGS ... BROYDEN-FLETCHER-GOLDFARB-SHANNO OPTIMIZATION ROUTINE.
C     THIS ROUTINE IS A MODIFIED VERSION OF HARWELL ROUTINE VA13AD.
C     VERSION: APR  2, 1989.
C
C     AUTHOR: MJD POWELL, AERE, HARWELL, ENGLAND.
C     THE BFGS ALGORITHM IS DESCRIBED IN R. FLETCHER, COMPUTER J.,
C     13, 317 (1970).
C     MODIFIED: MIKE PETERSON, U OF T CHEMISTRY DEPT, TORONTO, CANADA.
C
C     INPUT (INITIAL ENTRY OR RESTART):
C
C     MAXIT,IPRINT,MODE,ITYPE (4I4).
C     MAXIT IS THE MAXIMUM NUMBER OF ITERATIONS.
C     THE PARAMETERS AND GRADIENT WILL BE PRINTED EVERY IPRINT
C     ITERATIONS (0 FOR NO PRINTING).
C     MODE IS 0 TO SET THE INITIAL HESSIAN APPROXIMATION INTERNALLY,
C     1 TO READ THE DIAGONAL ELEMENTS OF THE HESSIAN FROM CARDS.
C     NOTE THAT FOR A RESTART, THE NUMBER OF ITERATIONS CONTINUES
C     FROM THE PREVIOUS VALUE AND THE PREVIOUS HESSIAN APPROXIMATION IS
C     USED AUTOMATICALLY (FROM DISK) REGARDLESS OF THE VALUE OF MODE.
C     ITYPE IS USED ONLY FOR RESTARTS: 0 FOR A NORMAL RESTART (CONTINUE
C     THE CURRENT ITERATION), 1 TO START A NEW ITERATION WITH THE
C     CURRENT POINT. IF THE LAST STEP OF THE PREVIOUS JOB WAS 'RESET
C     TO BEST PARAMETERS', NEW VALUES OF ACC AND GRLEN WILL BE IGNORED
C     FOR EXACT RESTARTS. IF THE PREVIOUS OPTIMIZATION STOPPED DUE TO
C     EXCEEDING THE ITERATION LIMIT, A CONVERGED GRADIENT LENGTH, OR
C     CONVERGED STEP LENGTH, A RESTART WITH ITYPE = 0 WILL BE CONVERTED
C     AUTOMATICALLY TO A RESTART WITH ITYPE = 1, AND A NEW ITERATION
C     WILL BE STARTED.
C
C     SCALE,ACC,GRLEN (3F12.6) ... SCALE IS A SUITABLE CHANGE TO MAKE
C     IN THE X'S IN THE INITIAL STEP. ABOUT 10% OF THE TOTAL EXPECTED
C     CHANGE IN THE X'S IS OFTEN A GOOD CHOICE. THE SAME VALUE IS USED
C     FOR ALL THE PARAMETERS, BUT IF THE VALUE IS 0.0, N INDIVIDUAL
C     VALUES ARE READ FROM THE FOLLOWING CARD(S). ACC DEFINES THE
C     REQUIRED ACCURACY: THE OPTIMIZATION IS TERMINATED WHEN CHANGES IN
C     X(I) OF SIZE ACC*SCALE(I) DO NOT REDUCE F. GRLEN IS THE DESIRED
C     EUCLIDEAN GRADIENT LENGTH. CONVERGENCE MAY OCCUR FROM EITHER
C     CRITERION. THE DEFAULT FOR ACC IS 1.0D-4. FOR GRLEN, THE DEFAULT
C     IS 5.0D-4 IF ONLY THE GEOMETRY IS OPTIMIZED, ELSE 1.0D-4.
C     0.01 IS USUALLY A SUITABLE VALUE FOR SCALE.
C
C     SCALE(I),I=1,N (6F12.6) ... N VALUES FOR SCALE, IF SCALE ABOVE
C     IS ZERO (6 PER CARD). THE VALUES SHOULD REFLECT THE RELATIVE
C     SIZES OF THE PARAMETERS.
C
C     D(I),I=1,N (6F12.6) ... N VALUES OF THE DIAGONAL ELEMENTS OF THE
C     HESSIAN APPROXIMATION, IF MODE=1 AND THIS IS NOT AN EXACT RESTART.
C     THE UNITS FOR THE HESSIAN MATRIX ARE MDYNE/ANGSTROM FOR
C     GEOMETRICAL PARAMETERS. ONLY THE POSITIVE DIAGONAL ELEMENT
C     VALUES WILL REPLACE THE CORRESPONDING INTERNAL GUESS VALUE -
C     THIS PROVIDES A METHOD OF SUPPLYING ONLY CERTAIN DIAGONAL
C     ELEMENTS, USING THE INTERNAL GUESS FOR THE REMAINDER.
C==
C
C1
C     ARRAY DIMENSIONS:
C     MAXN: MAXIMUM NUMBER OF PARAMETERS (CURRENTLY #NO).
C     X: PARAMETER SET (MAXN).
C     G: GRADIENT VECTOR (MAXN).
C     SCALE: PARAMETER SCALE FACTORS (MAXN).
C     H: HESSIAN APPROXIMATION (MAXN*(MAXN+1)/2).
C     D,W,XA,GA,XB,GB: WORK ARRAYS (MAXN).
C
C     REQUIRED SUBROUTINES: MC11AD, MC11BD, MC11ED.
C*
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C#
C     PARAMETER (NA=#NA)
C     PARAMETER (NS=#NS, NP=#NP)
C     PARAMETER (NO=#NO)
C##
      PARAMETER (NA= 36)
      PARAMETER (NS=120, NP=300)
      PARAMETER (NO=125)
C###
      PARAMETER (NA3=3*NA, NA3SQ=NA3*NA3, NZ=NA3-6,
     1 NFOR=8+6*NA3+6*NP,
     2 NOO=NO*(NO+1)/2)
      PARAMETER (ZERO=0.0D0, ONE=1.0D0)
C
C     COMMON BLOCK /C711B/ HAS LENGTH NA3SQ - SEE EQUIVALENCE BELOW.
C     COMMON BLOCK /C711D/ HAS LENGTH NFOR - SEE EQUIVALENCE BELOW.
C     THIS EASES CONVERSION BETWEEN IBM AND CDC VERSIONS.
C
      COMMON/C711B/X(NO),MAXIT,IPRINT,NFUN,ITR,NP1,NRST,IRST,ISFV,
     1 ISPEC,IREST,GRDLEN,
     2 ACC,GRLEN,AN,F,C,DFF,FA,FB,STMIN,STEPBD,STEPLB,FMIN,GMIN,STEP,
     3 DGA,DGB,H(NOO)
      COMMON/C711C/ID1(NZ),DUM(NZ),ID2(NS,5),XB(NO),GB(NO)
      COMMON/C711D/D(NO),G(NO),SCALE(NO),W(NO),XA(NO),GA(NO)
      COMMON/GEN/E1,E2,E3,EDUM(3),DCONV,SPIN(2),FIELD(3),FE,EMOL,ESOL,
     1 DPOLE(4),VCM
      COMMON/IO/IN,IOUT,IODUM(215)
C
      DIMENSION IOP(99),FILLB(NA3SQ),FILLF(NFOR)
C
      EQUIVALENCE (FILLB(1),X(1)), (FILLF(1),D(1))
C
      DATA THREE/3.0D0/, FOUR/4.0D0/, ANINE/9.0D0/,
     1 PT01/0.01D0/, PT1/0.1D0/, PT5/0.5D0/, PT7/0.7D0/
      DATA FIVM4/5.0D-4/, TENM4/1.0D-4/, TENM8/1.0D-8/
C
C?IBM/GLD/GBR/VAX/UNX
      DATA IREAL/2/,IINT/1/
C??
C?CDC
C     DATA IREAL/2/,IINT/2/
C??
      L11=((NO+17)*IREAL+10*IINT)/2
C
      NT=(N*(N+1))/2
      IF(IOP(13).NE.0)GO TO 185
C
C     INITIAL ENTRY OR RESTART.
C
  810 READ(IN,1200)MAXIT,IPRINT,MODE,ITYPE,SCAL,ACC,GRLEN
      IF(ACC.LE.ZERO)ACC=TENM4
      IF(GRLEN.GT.ZERO)GO TO 815
      GRLEN=FIVM4
      IF(IOP(17).EQ.1)GRLEN=TENM4
  815 WRITE(IOUT,1210)N,MAXIT,IPRINT,MODE,ITYPE,ACC,GRLEN
      IERR=0
      IF(SCAL.EQ.ZERO)GO TO 830
      SCAL=DABS(SCAL)
      DO 820 I=1,N
  820 SCALE(I)=SCAL
      GO TO 850
  830 READ(IN,1220)(SCALE(I),I=1,N)
      DO 840 I=1,N
      SCALE(I)=DABS(SCALE(I))
  840 IF(SCALE(I).LE.TENM8)IERR=1
  850 WRITE(IOUT,1230)(I,SCALE(I),I=1,N)
      WRITE(IOUT,1250)(I,XB(I),I=1,N)
      IF(IERR.EQ.0)GO TO 854
      WRITE(IOUT,1270)
      IOP(1)=-2
      RETURN
C
  854 NP1=N+1
      IF(IOP(13).EQ.2.AND.IOP(10).EQ.0)RETURN
C
C     EXACT RESTART - ONLY ALLOW IT IF IREST=0, INDICATING THAT THE
C     PREVIOUS OPTIMIZATION DID NOT TERMINATE PROPERLY.
C
      IF(IOP(13).EQ.2.AND.ITYPE.EQ.0.AND.IREST.EQ.0)GO TO 186
C
C     SET SPECIAL ITERATION FLAG TO 0.
C
      ISPEC=0
      IF(IOP(13).EQ.2)GO TO 900
      IF (MODE.NE.0) THEN
         READ(IN,1220)(W(I),I=1,N)
         WRITE(IOUT,1130)(I,W(I),I=1,N)
         DO 855 I=1,N
  855    IF (W(I) .GT. ZERO) D(I) = W(I)
      END IF
      WRITE(IOUT,1260)(I,D(I),I=1,N)
      DO 860 I=1,NT
  860 H(I)=ZERO
      K=1
      DO 870 I=1,N
      H(K)=DABS(D(I))
  870 K=K+NP1-I
      IF(IOP(10).EQ.0)RETURN
      NFUN=1
      ITR=0
      NRST=0
      IRST=0
      AN=DFLOAT(N)
C
C     COPY INITIAL PARAMETERS AND GRADIENT.
C
  900 F=E3
      DO 15 I=1,N
      X(I)=XB(I)
   15 G(I)=GB(I)
      WRITE(IOUT,1110)F,(I,G(I),I=1,N)
      IF(IOP(13).EQ.2)GO TO 100
C
C     FACTORIZE THE GIVEN HESSIAN MATRIX
C
      CALL MC11BD (H,NT,N,K)
      IF (K.GE.N) GO TO 100
      WRITE (IOUT,1010)
C
C     SET THE HESSIAN TO A DIAGONAL MATRIX DEPENDING ON SCALE(I)
C
   20 C=ZERO
      DO 30 I=1,N
   30 C=DMAX1(C,DABS(G(I)*SCALE(I)))
      IF (C.LE.ZERO) C=ONE
      DO 40 I=1,NT
   40 H(I)=ZERO
      K=1
      DO 50 I=1,N
      H(K)=PT01  *C/SCALE(I)**2
   50 K=K+NP1-I
C
C     SET SOME VARIABLES FOR THE FIRST ITERATION
C
  100 DFF=ZERO
  110 FA=F
      ISFV=1
      DO 120 I=1,N
      XA(I)=X(I)
  120 GA(I)=G(I)
C
C     BEGIN THE ITERATION BY GIVING THE REQUIRED PRINTING
C
  130 GRDLEN=ZERO
      DO 135 I=1,N
  135 GRDLEN=GRDLEN+GA(I)*GA(I)
      GRDLEN=DSQRT(GRDLEN/AN)
      IF(ISPEC.GT.0)GO TO 171
      IF(ITR.EQ.0.OR.IOP(13).EQ.2)WRITE(IOUT,1090)GRDLEN
      IF(GRDLEN.LE.GRLEN)GO TO 330
      IF(ITR.GE.MAXIT)GO TO 310
      IF(IPRINT.EQ.0.OR.ITR.EQ.0)GO TO 140
      IF(MOD(ITR,IPRINT).NE.0)GO TO 140
      WRITE(IOUT,1020)ITR,NFUN,FA,GRDLEN
      K=MIN0(N,10)
      WRITE(IOUT,1040)(XA(I),I=1,K)
      IF(N.GT.10)WRITE(IOUT,1041)(XA(I),I=11,N)
      WRITE(IOUT,1050)(GA(I),I=1,K)
      IF(N.GT.10)WRITE(IOUT,1041)(GA(I),I=11,N)
  140 ITR=ITR+1
C
C     CALCULATE THE SEARCH DIRECTION OF THE ITERATION
C
      DO 150 I=1,N
  150 D(I)=-GA(I)
      CALL MC11ED (H,NT,N,D,W,N)
C
C     CALCULATE A LOWER BOUND ON THE STEP-LENGTH
C     AND THE INITIAL DIRECTIONAL DERIVATIVE
C
      C=ZERO
      DGA=ZERO
      DO 160 I=1,N
      C=DMAX1(C,DABS(D(I)/SCALE(I)))
  160 DGA=DGA+GA(I)*D(I)
C
C     TEST IF THE SEARCH DIRECTION IS DOWNHILL
C
      IF (DGA.GE.ZERO) GO TO 320
C
C     SET THE INITIAL STEP-LENGTH OF THE LINE SEARCH
C
      STMIN=ZERO
      STEPBD=ZERO
      STEPLB=ACC/C
      FMIN=FA
      GMIN=DGA
      STEP=ONE
      IF (DFF.LE.ZERO) STEP=DMIN1(STEP,ONE/C)
      IF (DFF.GT.ZERO) STEP=DMIN1(STEP,(DFF+DFF)/(-DGA))
  170 C=STMIN+STEP
      GO TO 175
C
C     SPECIAL ITERATION - RESET TO BEST PARAMETER SET.
C
  171 C=ZERO
      WRITE(IOUT,1000)
  175 NFUN=NFUN+1
C
C     CALCULATE ANOTHER FUNCTION VALUE AND GRADIENT
C
      DO 180 I=1,N
  180 XB(I)=XA(I)+C*D(I)
      IREST = 0
 2000 CALL TWRITE(10,D,6*NO,1,6*NO,1,0)
      CALL TWRITE(11,X,NT+L11,1,NT+L11,1,0)
      RETURN
C
C     SUBSEQUENT ENTRIES TO BFGS START HERE.
C
  185 CALL TREAD(10,D,6*NO,1,6*NO,1,0)
      CALL TREAD(11,X,NT+L11,1,NT+L11,1,0)
      IF(IOP(13).EQ.2)GO TO 810
  186 FB=E3
C
C     IS THIS A SPECIAL ITERATION?
C
      IF(ISPEC.GT.0)GO TO 200
C     STORE THIS FUNCTION VALUE IF IT IS THE SMALLEST SO FAR
      ISFV=MIN0(2,ISFV)
      IF (FB.GT.F) GO TO 220
      IF (FB.LT.F) GO TO 200
      GL1=ZERO
      GL2=ZERO
      DO 190 I=1,N
      GL1=GL1+(SCALE(I)*G(I))**2
  190 GL2=GL2+(SCALE(I)*GB(I))**2
      IF (GL2.GE.GL1) GO TO 220
  200 ISFV=3
      F=FB
      DO 210 I=1,N
      X(I)=XB(I)
  210 G(I)=GB(I)
C
C     BRANCH IF JUST FINISHED A SPECIAL ITERATION.
C
      IF(ISPEC-1)220,250,335
C
C     CALCULATE THE DIRECTIONAL DERIVATIVE AT THE NEW POINT
C
  220 DGB=ZERO
      DO 230 I=1,N
  230 DGB=DGB+GB(I)*D(I)
C
C     BRANCH IF WE HAVE FOUND A NEW LOWER BOUND ON THE STEP-LENGTH
C
      IF (FB-FA.LE.PT1*C*DGA) GO TO 280
C
C     FINISH THE ITERATION IF THE CURRENT STEP IS STEPLB
C
      IF (STEP.GT.STEPLB) GO TO 270
  240 IF (ISFV.GE.2) GO TO 110
C
C     STEP LENGTH IS CONVERGED.
C     RESET TO BEST PARAMETER SET.
C
      ISPEC=1
      IF(E3.NE.F)GO TO 110
  250 WRITE(IOUT,1060)
      IOP(1)=1
      ISPEC=0
      GO TO 400
C
C     CALCULATE A NEW STEP-LENGTH BY CUBIC INTERPOLATION
C
  270 STEPBD=STEP
      C=GMIN+DGB-THREE*(FB-FMIN)/STEP
      C=GMIN/(C+GMIN-DSQRT(DMAX1(C*C-GMIN*DGB,ZERO)))
      STEP=STEP*DMAX1(PT1,C)
      GO TO 170
C
C     SET THE NEW BOUNDS ON THE STEP-LENGTH
C
  280 STEPBD=STEPBD-STEP
      STMIN=C
      FMIN=FB
      GMIN=DGB
C
C     CALCULATE A NEW STEP-LENGTH BY EXTRAPOLATION
C
      STEP=ANINE*STMIN
      IF (STEPBD.GT.ZERO) STEP=PT5*STEPBD
      C=DGA+THREE*DGB-FOUR*(FB-FA)/STMIN
      IF (C.GT.ZERO) STEP=DMIN1(STEP,STMIN*DMAX1(ONE,-DGB/C))
      IF (DGB.LT.PT7*DGA) GO TO 170
C
C     TEST FOR CONVERGENCE OF THE ITERATIONS
C
      ISFV=4-ISFV
      IF (STMIN+STEP.LE.STEPLB) GO TO 240
C
C     REVISE THE SECOND DERIVATIVE MATRIX
C
      IR=-N
      DO 290 I=1,N
      XA(I)=XB(I)
      XB(I)=GA(I)
      D(I)=GB(I)-GA(I)
  290 GA(I)=GB(I)
      CALL MC11AD(H,NT,N,XB,ONE/DGA,W,IR,1,ZERO)
      IR=-IR
      CALL MC11AD(H,NT,N,D,ONE/(STMIN*(DGB-DGA)),D,IR,0,ZERO)
C
C     BRANCH IF THE RANK OF THE NEW MATRIX IS DEFICIENT
C
      IF (IR.LT.N) GO TO 340
C
C     BEGIN ANOTHER ITERATION
C
      DFF=FA-FB
      FA=FB
      IRST=0
      GO TO 130
C
C     MAXIMUM NUMBER OF ITERATIONS EXCEEDED.
C
  310 WRITE(IOUT,1030)
      IOP(1)=-1
      GO TO 400
C
C     SEARCH DIRECTION IS UPHILL - TRY TO RESTART.
C
  320 IF(ISFV.GE.2)GO TO 110
      GO TO 340
C
C     GRADIENT LENGTH CONVERGED - RESET TO BEST PARAMETER SET.
C
  330 ISPEC=2
      IF(E3.NE.F)GO TO 110
  335 WRITE(IOUT,1070)
      IOP(1)=1
      ISPEC=0
      GO TO 400
C
C     RANK OF HESSIAN IS DEFICIENT - TRY TO RESTART.
C
  340 IRST=IRST+1
      IF(IRST.GE.3)GO TO 350
      NRST=NRST+1
      GO TO 20
C
C     3 SUCCESSIVE RESTARTS - ABORT OPTIMIZATION.
C
  350 WRITE(IOUT,1080)
      IOP(1)=-1
  400 WRITE(IOUT,1100)ITR,(I,X(I),I=1,N)
      WRITE(IOUT,1110)F,(I,G(I),I=1,N)
      WRITE(IOUT,1120)GRDLEN,NFUN,NRST
C
C     COPY THE PARAMETERS INTO ARRAY XB, AND SET IREST=1 SO EXACT
C     RESTARTS WILL IN FACT START A NEW ITERATION.
C
      DO 410 I=1,N
  410 XB(I)=X(I)
      IREST = 1
      GO TO 2000
C*
 1000 FORMAT('0RESET TO BEST PARAMETERS')
 1010 FORMAT('0HESSIAN NOT POSITIVE DEFINITE - REPLACED BY DIAGONAL ',
     1 'MATRIX')
 1020 FORMAT('0ITERATION',I5,5X,'NFUNC =',I5,5X,'E =',F17.9,5X,
     1 'GRD LEN =',1PD14.7)
 1030 FORMAT('1MAXIMUM NUMBER OF ITERATIONS EXCEEDED')
 1040 FORMAT(' X:',10(1PD13.5))
 1041 FORMAT(3X,1PD13.5,9D13.5)
 1050 FORMAT(' G:',10(1PD13.5))
 1060 FORMAT('1STEP LENGTH CONVERGED WITHIN ACC')
 1070 FORMAT('1GRADIENT LENGTH CONVERGED WITHIN GRLEN')
 1080 FORMAT('13 SUCCESSIVE RESTARTS - OPTIMIZATION TERMINATED'/
     1 ' THIS MAY BE DUE TO LOSS OF RANK IN THE HESSIAN OR THE SEARCH',
     2 ' DIRECTION LYING UPHILL')
 1090 FORMAT('0GRADIENT LENGTH =',1PD16.7/)
 1100 FORMAT('0RESULTS AT ITERATION',I5/'0FINAL PARAMETERS:'//
     1 (1X,6(I6,1PD16.7)))
 1110 FORMAT('0ENERGY =', F17.9,'  HARTREES'/'0GRADIENT:'//
     1 (1X,6(I6,1PD16.7)))
 1120 FORMAT('0GRADIENT LENGTH =',1PD16.7//'0',I5,
     1 ' FUNCTION EVALUATIONS,',I5,' RESTARTS')
 1130 FORMAT(/'0USER-SUPPLIED HESSIAN DIAGONAL ELEMENTS ',
     1 '(MDYNE/ANGSTROM):'//
     2 (1X,6(I6,1PD16.7)))
 1200 FORMAT(4I4/3F12.6)
 1210 FORMAT('1BFGS OPTIMIZATION (VER: APR  2, 1989)'/
     1 '0N =',I4,',   MAXIT =',I5,',   IPRINT =',I4,',   MODE =',I4,
     2 ',   ITYPE =',I4,/ '0ACC =',
     3 1PD13.5,',   GRLEN =',D13.5//'0SCALE:'/)
 1220 FORMAT(6F12.6)
 1230 FORMAT(1X,6(I6,1PD16.7)/(1X,6(I6,D16.7)))
 1250 FORMAT(/'0INITIAL PARAMETERS:'//(1X,6(I6,1PD16.7)))
 1260 FORMAT(/'0HESSIAN DIAGONAL ELEMENTS (MDYNE/ANGSTROM):'//
     1 (1X,6(I6,1PD16.7)))
 1270 FORMAT('0SCALE FACTOR TOO SMALL: SHOULD BE GREATER THAN 1.0D-8')
      END
      SUBROUTINE MC11AD(A,NT,N,Z,SIG,W,IR,MK,EPS)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      DIMENSION A(NT),Z(N),W(N)
C
      DATA ZERO/0.0D0/,ONE/1.0D0/,FOUR/4.0D0/
C*
C     UPDATE FACTORS GIVEN IN A BY   SIG*Z*ZTRANSPOSE
C*
      IF(N.GT.1)GO TO 1
      A(1)=A(1)+SIG *Z(1)**2
      IR=1
      IF(A(1).GT.ZERO)RETURN
      A(1)=ZERO
      IR=0
      RETURN
C
    1 NP1=N+1
      IF(SIG.GT.ZERO)GO TO 40
      IF(SIG.EQ.ZERO.OR.IR.EQ.0)RETURN
      TI=ONE/SIG
      IJ=1
      IF(MK.EQ.0)GO TO 10
      DO 7 I=1,N
      IF(A(IJ).NE.ZERO)TI=TI+W(I)**2/A(IJ)
    7 IJ=IJ+NP1-I
      GO TO 20
   10 DO 11 I=1,N
   11 W(I)=Z(I)
      DO 15 I=1,N
      IP=I+1
      V=W(I)
      IF(A(IJ).GT.ZERO)GO TO 12
      W(I)=ZERO
      IJ=IJ+NP1-I
      GO TO 15
   12 TI=TI+V*V/A(IJ)
      IF(I.EQ.N)GO TO 14
      DO 13 J=IP,N
      IJ=IJ+1
   13 W(J)=W(J)-V*A(IJ)
   14 IJ=IJ+1
   15 CONTINUE
   20 IF(IR.LE.0)GO TO 21
      IF(TI.GT.ZERO)GO TO 22
      IF(MK-1)40,40,23
   21 TI=ZERO
      IR=-IR-1
      GO TO 23
   22 TI=EPS/SIG
      IF(EPS.EQ.ZERO)IR=IR-1
   23 MM=1
      TIM=TI
      DO 30 I=1,N
      J=NP1-I
      IJ=IJ-I
      IF(A(IJ).NE.ZERO)TIM=TI-W(J)**2/A(IJ)
      W(J)=TI
   30 TI=TIM
      GO TO 41
   40 MM=0
      TIM=ONE/SIG
   41 IJ=1
      DO 66 I=1,N
      IP=I+1
      V=Z(I)
      IF(A(IJ).GT.ZERO)GO TO 53
      IF(IR.GT.0.OR.SIG.LT.ZERO.OR.V.EQ.ZERO)GO TO 52
      IR=1-IR
      A(IJ)=V*V/TIM
      IF(I.EQ.N)RETURN
      DO 51 J=IP,N
      IJ=IJ+1
   51 A(IJ)=Z(J)/V
      RETURN
C
   52 IJ=IJ+NP1-I
      GO TO 66
   53 AL=V/A(IJ)
      IF(MM)54,54,55
   54 TI=TIM+V*AL
      GO TO 56
   55 TI=W(I)
   56 R=TI/TIM
      A(IJ)=A(IJ)*R
      IF(R.EQ.ZERO)GO TO 70
      IF(I.EQ.N)GO TO 70
      B=AL/TI
      IF(R.GT.FOUR)GO TO 62
      DO 61 J=IP,N
      IJ=IJ+1
      Z(J)=Z(J)-V*A(IJ)
   61 A(IJ)=A(IJ)+B*Z(J)
      GO TO 64
   62 GM=TIM/TI
      DO 63 J=IP,N
      IJ=IJ+1
      Y=A(IJ)
      A(IJ)=B*Z(J)+Y*GM
   63 Z(J)=Z(J)-V*Y
   64 TIM=TI
      IJ=IJ+1
   66 CONTINUE
   70 IF(IR.LT.0)IR=-IR
      RETURN
      END
      SUBROUTINE MC11BD(A,NT,N,IR)
C*
C     FACTORIZE A MATRIX GIVEN IN A
C*
C     H IS STORED IN THE FACTORED FORM L*D*L' WHERE L IS A LOWER
C     TRIANGULAR MATRIX WITH UNIT DIAGONAL (L' IS L TRANSPOSE) AND D IS
C     A DIAGONAL MATRIX. ONLY THE LOWER TRIANGLE OF L IS ACTUALLY
C     STORED, WITH THE ELEMENTS OF D BEING STORED IN PLACE OF THE
C     DIAGONAL ELEMENTS OF L WHICH ARE ALL ONE.
C*
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      DIMENSION A(NT)
C
      DATA ZERO/0.0D0/
C
      IR=N
      IF(N.GT.1)GO TO 100
      IF(A(1).GT.ZERO)RETURN
      A(1)=ZERO
      IR=0
      RETURN
C
  100 NP1=N+1
      II=1
      DO 104 I=2,N
      AA=A(II)
      NI=II+NP1-I
      IF(AA.GT.ZERO)GO TO 101
      A(II)=ZERO
      IR=IR-1
      II=NI+1
      GO TO 104
  101 IP=II+1
      II=NI+1
      JK=II
      DO 103 IJ=IP,NI
      V=A(IJ)/AA
      DO 102 IK=IJ,NI
      A(JK)=A(JK)-A(IK)*V
  102 JK=JK+1
  103 A(IJ)=V
  104 CONTINUE
      IF(A(II).GT.ZERO)RETURN
      A(II)=ZERO
      IR=IR-1
      RETURN
      END
      SUBROUTINE MC11ED(A,NT,N,Z,W,IR)
C*
C     MULTIPLY A VECTOR Z BY THE INVERSE OF THE FACTORS GIVEN IN A
C*
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      DIMENSION A(NT),Z(N),W(N)
C
      IF(IR.LT.N)RETURN
      W(1)=Z(1)
      IF(N.GT.1)GO TO 400
      Z(1)=Z(1)/A(1)
      RETURN
C
  400 DO 402 I=2,N
      IJ=I
      I1=I-1
      V=Z(I)
      DO 401 J=1,I1
      V=V-A(IJ)*Z(J)
  401 IJ=IJ+N-J
      W(I)=V
  402 Z(I)=V
      Z(N)=Z(N)/A(IJ)
      NP1=N+1
      DO 411 NIP=2,N
      I=NP1-NIP
      II=IJ-NIP
      V=Z(I)/A(II)
      IP=I+1
      IJ=II
      DO 410 J=IP,N
      II=II+1
  410 V=V-A(II)*Z(J)
  411 Z(I)=V
      RETURN
      END
      SUBROUTINE VA05MP(N,IOP)
C
C=OPTIMIZATION METHODS
C VA05 METHOD FOR GENERAL CRITICAL POINTS, WITH GRADIENTS.
C ********************************************************
C
C1VA05
C1VA05MP
C     VA05 ... MINIMIZE A SUM OF SQUARES OF M FUNCTIONS (TERMS) EACH OF
C     N VARIABLES WITHOUT PARTIAL DERIVATIVES, USING A COMBINATION OF
C     NEWTON-RAPHSON, STEEPEST DESCENT AND MARQUARDT ALGORITHMS.
C     THIS ALGORITHM IS SIMILAR TO ROUTINE NS01AD BY M.J.D. POWELL, IN
C     NUMERICAL METHODS FOR NONLINEAR ALGEBRAIC EQUATIONS, P.
C     RABINOWITZ (ED.), GORDON AND BREACH, LONDON (1970), P. 87.
C
C     FOR MONSTERGAUSS PURPOSES, THE TERMS OF THE SUM OF SQUARES ARE
C     GRADIENT COMPONENTS, AND THE SUM OF SQUARES IS RELATED TO THE
C     GRADIENT LENGTH.
C     (VERSION: MAR  8, 1987)
C
C     AUTHOR: M J D POWELL, AERE, HARWELL.
C     MODIFIED: MIKE PETERSON, U OF T CHEMISTRY DEPT, TORONTO, CANADA.
C
C     INPUT (INITIAL ENTRY OR RESTART):
C
C     MAXIT,IPRINT,MODE,IPUNCH,ISYM,IREST (6I4).
C     MAXIT: MAXIMUM NUMBER OF ITERATIONS (NOTE THAT FOR RESTART RUNS
C     THE ITERATION COUNT CONTINUES FROM THE PREVIOUS VALUE).
C     IPRINT: PRINT RESULTS EVERY IPRINT ITERATIONS (0 FOR NO PRINTING).
C     MODE: 0 TO USE THE INTERNAL DIAGONAL HESSIAN APPROXIMATION EXCEPT
C     FOR THOSE VARIABLES LISTED BELOW; 1 TO CALCULATE THE ENTIRE
C     HESSIAN MATRIX BY FINITE DIFFERENCES USING ONE-SIDED STEPS (THIS
C     WILL REQUIRE N ADDITIONAL GRADIENT EVALUATIONS, WHERE N IS THE
C     NUMBER OF VARIABLES BEING OPTIMIZED). A VALUE OF 2 FOR MODE
C     USES USER-SUPPLIED DIAGONAL ELEMENTS EXCEPT FOR THOSE VARIABLES
C     LISTED BELOW; 3 TO READ THE ENTIRE HESSIAN MATRIX FROM CARDS.
C     A VALUE OF 4 CALCULATES THE ENTIRE HESSIAN MATRIX BY
C     TWO-SIDED FINITE DIFFERENCES FOR INCREASED ACCURACY AND TO
C     REDUCE THE ANHARMONICITY EFFECTS - NOTE THAT THIS WILL TAKE
C     TWICE AS LONG AS THE ONE-SIDED STEP CALCULATION (MODE=1).
C     FOR RESTARTS, THE HESSIAN FROM DISK IS USED AUTOMATICALLY, AND
C     THE NUMBER OF ITERATIONS CONTINUES FROM THE PREVIOUS VALUE.
C     MODE IS SET TO -1 WHEN THE HESSIAN MATRIX EVALUATION IS COMPLETE.
C     IPUNCH: NON-ZERO TO PUNCH THE FORCE CONSTANT MATRIX TO
C     UNIT IPUNCH.
C     ISYM: 0 TO SYMMETRIZE THE FORCE CONSTANTS MATRIX AT EACH
C     APPROPRIATE OPPORTUNITY, 1 TO OMIT THE SYMMETRIZATION.
C     IREST: RESTART TYPE (USED ONLY FOR RESTART RUNS). THE POSSIBLE
C     VALUES ARE: 0 TO LET VA05MP DECIDE HOW TO RESTART;
C     1 TO RECOVER THE LAST SET OF NEW PARAMETERS THAT WAS REQUESTED
C     AND CONTINUE FROM THERE (THIS SHOULD ONLY BE ATTEMPTED WHEN THE
C     PREVIOUS OPTIMIZATION WAS STOPPED BECAUSE THE MAXIMUM NUMBER
C     OF ITERATIONS WAS EXCEEDED); 2 TO START A NEW OPTIMIZATION WITH
C     THE CURRENT PARAMETERS AND HESSIAN MATRIX (THIS SHOULD BE USED
C     TO CONTINUE RUNS THAT TERMINATED NORMALLY, OR FOR RUNS THAT
C     TERMINATED DUE TO LOSS OF RANK IN THE HESSIAN);
C     3 FOR AN EXACT RESTART (THIS SHOULD ONLY BE USED FOR RUNS THAT
C     WERE ABORTED BY THE USER/OPERATOR, OR JOBS LOST IN SYSTEM
C     CRASHES).
C     NOTE: MODE CAN NOT BE CHANGED FOR RESTART RUNS.
C
C     DSTEP,DMAX,ACC (3F12.6).
C     DSTEP: INCREMENT FOR ESTIMATION OF THE JACOBIAN BY FINITE
C     DIFFERENCES (THE DEFAULT IS 0.02, UNLESS IOP(25)=1 WHEN THE
C     DEFAULT IS 0.01).
C     DMAX: GENEROUS ESTIMATE OF THE EUCLIDIAN DISTANCE BETWEEN THE
C     STARTING POINT AND THE OPTIMIZED POINT (THE DEFAULT IS 0.1).
C     ACC: REQUIRED ACCURACY IN THE GRADIENT LENGTH (THE DEFAULT IS
C     5.0D-4).
C     NOTE: DSTEP AND DMAX SHOULD NOT BE CHANGED FOR RESTART RUNS.
C
C     LIST(I) (18I4).
C     LIST IS A LIST OF VARIABLE NUMBERS (*NOT* Z MATRIX PARAMETER
C     NUMBERS - SEE THE MAP BETWEEN THE OPTIMIZED VARIABLES AND THE Z
C     MATRIX PARAMETERS) FOR WHICH THE HESSIAN MATRIX ELEMENTS ARE TO
C     BE CALCULATED BY ONE-SIDED FINITE DIFFERENCES. THIS LIST NORMALLY
C     CONSISTS ONLY OF THE FEW INTERNAL COORDINATES STRONGLY INVOLVED
C     ALONG THE PROPOSED REACTION COORDINATE IN TRANSITION STATE
C     OPTIMIZATIONS, BUT THIS FEATURE IS OFTEN HELPFUL WHEN OPTIMIZING
C     CYCLIC STRUCTURES, WHOSE INTERNAL BOND AND DIHEDRAL ANGLES ARE
C     STRONGLY COUPLED. THE REMAINING DIAGONAL HESSIAN ELEMENTS ARE
C     TAKEN FROM THE INTERNAL OR USER-SUPPLIED VALUES. THE LIST OF
C     VARIABLE NUMBERS, 18 PER CARD, MAY BE CONTINUED ONTO FURTHER
C     CARDS IF NECESSARY - A ZERO VALUE TERMINATES THE LIST. FOR
C     EXAMPLE, TO COMPUTE THE HESSIAN MATRIX ELEMENTS FOR OPTIMIZATION
C     VARIABLES 2, 3 AND 7, THE FOLLOWING CARD WOULD DO THE TRICK:
C        2   3   7   0
C     THE HESSIAN (H) IS NORMALLY COMPUTED BY ROWS, SO OFF-DIAGONAL
C     ELEMENTS H(I,J) ARE OBTAINED TWICE, AS THE CHANGE IN THE I'TH
C     GRADIENT COMPONENT WHEN THE J'TH VARIABLE IS INCREMENTED AND
C     VICE VERSA. WHEN ONE OF H(I,I) AND H(J,J) WAS APPROXIMATED AND
C     THE OTHER COMPUTED (BECAUSE IT WAS ON THE LIST), BOTH OFF-
C     DIAGONAL ELEMENTS ARE SET TO THE COMPUTED VALUE (ELSE ONE WOULD
C     BE ZERO).
C     THE EASIEST WAY TO GET THE VARIABLE NUMBERS CORRESPONDING TO
C     THE Z MATRIX PARAMETERS IS TO DO A CHECK JOB WITH THE LIST
C     CARD BLANK. THEN ANOTHER CHECK CAN BE DONE WITH THE LIST
C     SET USING THE MAP BETWEEN OPTIMIZED VARIABLES AND Z MATRIX
C     PARAMETERS (OR BASIS SET PARAMETERS).
C     NOTE: OMIT FOR RESTART RUNS.
C
C     WC(I),I=1,N (6F12.6).
C     WC: N DIAGONAL ELEMENTS FOR THE JACOBIAN MATRIX, 6 PER CARD
C     (ONLY IF MODE=2). NOTE THAT N VALUES MUST BE SUPPLIED.
C     THE UNITS FOR THE HESSIAN MATRIX ARE MDYNE/ANGSTROM FOR
C     GEOMETRICAL PARAMETERS. ONLY THE NON-ZERO DIAGONAL ELEMENT
C     VALUES WILL REPLACE THE CORRESPONDING INTERNAL GUESS VALUE -
C     THIS PROVIDES A METHOD OF SUPPLYING ONLY CERTAIN DIAGONAL
C     ELEMENTS, USING THE INTERNAL GUESS FOR THE REMAINDER.
C     NOTE: OMIT FOR RESTART RUNS.
C
C     WJ(I,J),I=1,N FOR J=1,N (6F12.6).
C     WJ: FORCE CONSTANT MATRIX (HESSIAN) BY COLUMNS, 6 PER CARD,
C     EACH COLUMN STARTING ON A NEW CARD (ONLY IF MODE=3).
C     THE UNITS FOR THE HESSIAN MATRIX ARE MDYNE/ANGSTROM FOR
C     GEOMETRICAL PARAMETERS.
C     NOTE: OMIT FOR RESTART RUNS.
C==
C
C/
C     ARRAY DIMENSIONS:
C     NV: MAXIMUM NUMBER OF PARAMETERS (CURRENTLY #NV).
C     MAXM: MAXIMUM NUMBER OF TERMS IN THE SUM OF SQUARES (#NV).
C     X: INITIAL COORDINATES (NV).
C     F: SS TERMS (MAXM).
C     WX: BEST X VECTOR (NV).
C     WF: BEST F VECTOR (MAXM).
C     WC: COUNTS OF INDEPENDENT DIRECTIONS (NV).
C     WD: INDEPENDENT DIRECTIONS (NV,NV).
C     WW: SCRATCH VECTOR (NV+NV+NV+MAXM).
C     WJ: JACOBIAN (NV,MAXM).
C     WI: INVERSE JACOBIAN (NV,MAXM+NV).
C     XSAVE: X SAVE VECTOR (NV).
C     FILL1,FILL2: SCRATCH ARRAYS (NV).
C     IFLAG: FLAGS FOR HESSIAN EVALUATION (NV).
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C#
C     PARAMETER (NA=#NA)
C     PARAMETER (NS=#NS, NP=#NP)
C     PARAMETER (NO=#NO)
C##
      PARAMETER (NA= 36)
      PARAMETER (NS=120, NP=300)
      PARAMETER (NO=125)
C###
      PARAMETER (NA3=3*NA, NA3SQ=NA3*NA3, NZ=NA3-6,
     1 NV=NA3/2, NV2=2*NV, NV4=4*NV, NFOR=8+6*NA3+6*NP)
      PARAMETER (ZERO=0.0D0, ONE=1.0D0, TWO=2.0D0)
C
C     THE TOTAL LENGTH OF COMMON BLOCK /C711D/ IS NFOR - SEE
C     EQUIVALENCE BELOW, WHICH EASES CONVERSION BETWEEN IBM AND CDC
C     VERSIONS. NOTE THAT ARRAYS FILL1 AND FILL2 ARE NOT SAVED ON DISK
C     BY TWRITE.
C
      COMMON/C711B/WJ(NV,NV),WD(NV,NV),WI(NV,NV2)
      COMMON/C711C/IC1(NZ),DUM(NZ),IC2(NS,5),X(NO),F(NO)
      COMMON/C711D/WC(NV),NFUNC,ITER,MPN,MAXMPN,IW,NWV,NWT,NWU,
     1 NT,NTEST,IS,IC,NTPAR,MAXIT,ICONV,IPRINT,IPUNCH,MODE,ISYM,IREST,
     2 DSTEP,DMAX,ACC,DTEST,FMIN,DD,DSS,DM,PARM,DPAR,TINC,FSQ,PAR,
     3 PPAR,DS,DN,SP,PRED,DMULT,PTM,ANMULT,FNP,
     4 AP,PJ,SPP,T,DW,SUM,SS,AD,ST,SUMF,SUMX,ENERGY,
     5 WX(NV),WF(NV),WW(NV4),XSAVE(NV),FILL1(NV),FILL2(NV)
      COMMON/ZMATC/TITLE,IELEM(NA),NAMES(NZ)
      COMMON/GEN/E1,E2,E3,EDUM(3),DCONV,SPIN(2),FIELD(3),FE,EMOL,ESOL,
     1 DPOLE(4),VCM
      COMMON/IO/IN,IOUT,IODUM(215)
C
      CHARACTER TITLE*72, IELEM*4, NAMES*8
C
      DIMENSION IOP(99), FILLF(NFOR), LIST(18), IFLAG(NV)
C
      EQUIVALENCE (FILLF(1),WC(1)), (LIST(1),FILL1(1)), (IFLAG(1),WW(1))
C
      DATA FOUR/4.0D0/,SIX/6.0D0/,TEN/10.0D0/,PT01/0.01D0/,PT1/0.1D0/,
     1 PT25/0.25D0/,PT5/0.5D0/,PT9/0.9D0/,F5M4/5.0D-4/
C
C?IBM/GLD/GBR/VAX/UNX
      DATA IREAL/2/, IINT/1/
C??
C?CDC
C     DATA IREAL/2/, IINT/2/
C??
      MAXM = NV
      L10=((8*NV+34)*IREAL+20*IINT)/2
      M=N
      IF(IOP(13).NE.0)GO TO 2010
C
C     INITIAL ENTRY.
C
    1 WRITE(IOUT,1110)
      READ(IN,1120)MAXIT,IPRINT,INMODE,IPUNCH,ISYM,INREST,DSTEP,DMAX,ACC
      IF(IOP(13).EQ.2)INMODE=MODE
      MODE=INMODE
      IF (IOP(13).EQ.2 .AND. INREST.EQ.0) INREST = IREST
      IREST = INREST
      IF(ACC.LE.ZERO)ACC=F5M4
      IF (DSTEP.EQ.ZERO .AND. IOP(25).NE.1) DSTEP = PT01 + PT01
      IF (DSTEP.EQ.ZERO .AND. IOP(25).EQ.1) DSTEP = PT01
      IF(DMAX.LE.ZERO)DMAX=PT1
      WRITE(IOUT,1130)N,MAXIT,IPRINT,MODE,IPUNCH,ISYM,IREST,
     1 DSTEP,DMAX,ACC
      ACC=ACC*ACC*DFLOAT(M)
      WRITE(IOUT,1150)(I,X(I),I=1,N)
      DSS=DSTEP*DSTEP
      DM=DMAX*DMAX
C     'PARM' IS THE LEAST VALUE OF THE MARQUARDT PARAMETER.
      PARM=DSQRT(ACC)/DMAX
C     'DPAR' AND 'NTPAR' ARE USED TO REGULATE THE MARQUARDT PARAMETER.
      DPAR=TEN*DM
      IF(IOP(13).EQ.2)GO TO 2020
      IF(MODE.GE.0.AND.MODE.LE.4)GO TO 4010
      WRITE(IOUT,1220)
      IOP(1)=-2
      RETURN
C     NFUNC COUNTS THE NUMBER OF CALLS OF FSEVAL.
 4010 NFUNC=1
C     ITER COUNTS ITERATIONS.
      ITER=1
      MPN=M+N
      MAXMPN=MAXM+NV
      IW=MAXMPN+NV+NV
C
C     PARTITION WORK VECTOR WW INTO 4 SECTIONS.
C
      NWV=NV
      NWT=MAXMPN
      NWU=NWT+NV
C     'NT' AND 'NTEST' CAUSE AN ERROR RETURN IF F(X) DOES NOT DECREASE.
      NT=N+2
      NTEST=0
C     'DTEST' IS USED IN A TEST TO MAINTAIN LINEAR INDEPENDENCE.
      DTEST=DFLOAT(N+N)-PT5
C     USUALLY 'FMIN' IS THE LEAST CALCULATED VALUE OF F(X).
      FMIN=-ONE
C     USUALLY 'DD' IS THE SQUARE OF THE CURRENT STEP LENGTH.
      DD=ZERO
C     'IS' CONTROLS A GO TO STATEMENT FOLLOWING A GRADIENT EVALUATION.
      IS=4
      IC=0
C     'TINC' IS USED IN THE CRITERION TO INCREASE THE STEP LENGTH.
      TINC=ONE
C     ICONV IS 0 NORMALLY, BUT IS SET TO 1 WHEN DOING A FINAL
C     CALCULATION WITH THE BEST PARAMETER SET.
      ICONV=0
      IF(MODE.EQ.3)GO TO 220
C
C     GET LIST OF VARIABLES TO CALCULATE HESSIAN MATRIX ROWS.
C
      IF(MODE.EQ.1.OR.MODE.EQ.4)GO TO 3110
      DO 3050 I=1,N
 3050 IFLAG(I)=0
      WRITE(IOUT,1160)
C
C     LFLAG WILL REMAIN -1 IF NO LIST ITEMS ARE FOUND, ELSE WILL BE 0.
C
      LFLAG=-1
 3060 READ(IN,1170)LIST
C
      DO 3090 I=1,18
      J=I-1
      L=LIST(I)
      IF(L.EQ.0)GO TO 3100
      IF(L.GT.0.AND.L.LE.N)GO TO 3080
 3070 WRITE(IOUT,1180)LIST
      WRITE(IOUT,1190)L
      IOP(1)=-2
      RETURN
 3080 IF(IFLAG(L).NE.0)GO TO 3070
      LFLAG=0
 3090 IFLAG(L)=1
C
      J=18
 3100 IF(J.GT.0)WRITE(IOUT,1180)(LIST(I),I=1,J)
      IF(J.EQ.18)GO TO 3060
      IF(LFLAG.LT.0)WRITE(IOUT,1210)
 3110 IF (MODE.EQ.2) THEN
         READ(IN,1140)(FILL1(I),I=1,N)
         WRITE (IOUT,1290) (I,FILL1(I),I=1,N)
         DO 3120 I=1,N
 3120    IF (FILL1(I) .NE. ZERO) WC(I) = FILL1(I)
      END IF
C
C     INITIALIZE THE JACOBIAN WITH THE SUPPLIED ELEMENTS.
C
      DO 210 J=1,N
      DO 200 I=1,N
  200 WJ(I,J)=ZERO
  210 WJ(J,J)=WC(J)
      IF(MODE.EQ.1.OR.MODE.EQ.4)GO TO 2020
      WRITE(IOUT,1180)
C
C     NOW SET MODE TO 0 OR -1 FOR BOTH MODE=0 AND MODE=2, DEPENDING ON
C     WHETHER ANY LIST VARIABLES WERE FOUND OR NOT.
C
      MODE=LFLAG
      GO TO 2020
C
C     READ JACOBIAN FROM CARDS.
C
  220 DO 230 J=1,N
  230 READ(IN,1140)(WJ(I,J),I=1,N)
      MODE=-1
      GO TO 2020
C
C     TEST WHETHER THERE HAVE BEEN MAXIT ITERATIONS.
C
    4 IF(ITER.LT.MAXIT)GO TO 3
      WRITE(IOUT,1000)
      IOP(1)=-1
      IREST = 1
      GO TO 18
C
C     GET A NEW GRADIENT
C
    3 NFUNC=NFUNC+1
      IREST = 3
 2000 CALL TWRITE(10,WC,L10,1,L10,1,0)
      CALL TWRITE(11,WJ,4*NV*NV,1,4*NV*NV,1,0)
      RETURN
 2010 CALL TREAD(10,WC,L10,1,L10,1,0)
      CALL TREAD(11,WJ,4*NV*NV,1,4*NV*NV,1,0)
      IF(IOP(13).EQ.2)GO TO 1
      ITER=ITER+1
C
C     CALCULATE THE SUM OF SQUARES.
C
 2020 FSQ=ZERO
      IF(IOP(10).EQ.0)GO TO 310
      DO 8 I=1,M
    8 FSQ=FSQ+F(I)*F(I)
      IF(ICONV.EQ.1)GO TO 7
      SQRFSQ=DSQRT(FSQ/DFLOAT(M))
      IF(ITER.EQ.1.OR.IOP(13).EQ.2)WRITE(IOUT,1040)SQRFSQ
      IF(IOP(13).EQ.2.AND.IS.NE.4)CALL FCPRNT(FILL1,FILL2,MAXM,N,1)
C
C     LOOK FOR AN EXACT RESTART.
C
      IF (IOP(13) .NE. 2) GO TO 2090
C     RESTART BY RECOVERING THE LAST SET OF NEW PARAMETERS.
      IF (IREST .NE. 1) GO TO 2040
      WRITE (IOUT,1250)
      NFUNC = NFUNC + 1
      DO 2030 I=1,N
 2030 X(I) = XSAVE(I)
      GO TO 3
C     RESTART BY STARTING A NEW OPTIMIZATION.
 2040 IF (IREST .EQ. 3) GO TO 2060
      WRITE (IOUT,1260)
      IF (MODE .EQ. -1) GO TO 24
 2050 WRITE (IOUT,1280) MODE
      IOP(1) = -2
      RETURN
C     EXACT RESTART.
 2060 WRITE (IOUT,1270)
      IF (MODE .EQ. -1) ITER = ITER + 1
C
C     TEST FOR ERROR RETURN BECAUSE F(X) DOES NOT DECREASE.
C
 2090 GO TO (9,10,9,10),IS
    9 IF (FSQ-FMIN) 11,12,12
   12 IF (DD-DSS) 13,13,10
   13 NTEST=NTEST-1
      IF(NTEST.GT.0)GO TO 10
      WRITE(IOUT,1010)
      IOP(1)=-1
      IREST = 2
      GO TO 18
C
C     PRINT FINAL SOLUTION.
C
    7 WRITE(IOUT,1070)
      IOP(1)=1
      IREST = 2
      IF(ICONV.EQ.1)GO TO 19
C
C     RESTORE THE BEST VALUES OF X AND F.
C
   18 DO 135 I=1,N
      F(I)=WF(I)
      XSAVE(I) = X(I)
  135 X(I)=WX(I)
      IF(FSQ.LE.FMIN)GO TO 19
      IF(IOP(1).LT.0)GO TO 19
C
C     RESET TO THE BEST CALCULATED POINT.
C
      WRITE(IOUT,1080)
      IOP(1)=0
      ICONV=1
      GO TO 3
C
   19 WRITE(IOUT,1020)ITER,NFUNC,(I,X(I),I=1,N)
      WRITE(IOUT,1030)(I,F(I),I=1,M)
      FSQ=DSQRT(FMIN/DFLOAT(M))
      WRITE(IOUT,1100)FSQ,E3
      ICONV=0
C
C     PRINT THE FINAL FORCE CONSTANT MATRIX ESTIMATE.
C
      CALL FCPRNT(FILL1,FILL2,MAXM,N,1)
C
C     PUNCH FINAL FORCE CONSTANT MATRIX.
C
      IF(IPUNCH.LE.0)GO TO 2000
      WRITE(IPUNCH,1230) TITLE(1:68)
      NCARD=1
      DO 301 J=1,N
      IEND=0
  300 ISTART=IEND+1
      IF(ISTART.GT.N)GO TO 301
      IEND=MIN0(IEND+6,N)
      NCARD=NCARD+1
      WRITE(IPUNCH,1240)NCARD,(WJ(I,J),I=ISTART,IEND)
      GO TO 300
  301 CONTINUE
      WRITE(IOUT,1090)IPUNCH
      GO TO 2000
C
   11 NTEST=NT
C
C     PROVIDE ORDINARY PRINTING IF REQUESTED.
C
   10 IF(IPRINT-1)39,42,40
   42 J=MIN0(N,10)
      SQRFSQ=DSQRT(FSQ/DFLOAT(M))
      WRITE(IOUT,1050)ITER,NFUNC,SQRFSQ,E3,(X(I),I=1,J)
      IF(N.GT.10)WRITE(IOUT,1051)(X(I),I=11,N)
      J=MIN0(M,10)
      WRITE(IOUT,1060)(F(I),I=1,J)
      IF(M.GT.10)WRITE(IOUT,1051)(F(I),I=11,M)
      GO TO 39
   40 IF(ITER.EQ.1.OR.MOD(ITER,IPRINT).NE.0)GO TO 39
      IF (FSQ-FMIN) 42,45,45
   45 J=MIN0(N,10)
      SQRFSQ=DSQRT(FMIN/DFLOAT(M))
      WRITE(IOUT,1050)ITER,NFUNC,SQRFSQ,ENERGY,(WX(I),I=1,J)
      IF(N.GT.10)WRITE(IOUT,1051)(WX(I),I=11,N)
      J=MIN0(M,10)
      WRITE(IOUT,1060)(WF(I),I=1,J)
      IF(M.GT.10)WRITE(IOUT,1051)(WF(I),I=11,M)
   39 GO TO (49,47,47,48),IS
C
C     CHECK RUNS - PRINT CURRENT FORCE CONSTANTS MATRIX UNLESS STILL
C     UNDER CONSTRUCTION.
C
  310 IF (IOP(13).EQ.2 .AND. IREST.EQ.2 .AND. MODE.NE.-1) GO TO 2050
      IF(MODE.EQ.1.OR.MODE.EQ.4)RETURN
      IF(MODE.GE.0.AND.IOP(13).EQ.0)WRITE(IOUT,1200)
      CALL FCPRNT(FILL1,FILL2,MAXM,N,ISYM)
      RETURN
C
C     STORE THE INITIAL VECTORS X AND F.
C
   48 IF(IC.NE.0.AND.MODE.EQ.4)GO TO 3000
      IF(IC.GT.0)GO TO 51
C
C     SAVE THE INITIAL VARIABLES.
C
      DO 52 I=1,N
   52 WX(I)=X(I)
C
C     BYPASS SETTING OF JACOBIAN BY FINITE DIFFERENCES IF ALREADY SET.
C
      IF(MODE.LT.0)IC=N
      GO TO 54
C
C     CALCULATE THE INITIAL JACOBIAN APPROXIMATION BY ONE-SIDED STEPS.
C
   51 DO 55 I=1,M
   55 WJ(IC,I)=(F(I)-WF(I))/DSTEP
      ITER=1
      X(IC)=WX(IC)
C
C     COPY THIS ROW TO THIS COLUMN IF MODE WAS 0 OR 2.
C
      IF(MODE.EQ.1)GO TO 58
C
C     COPY ONLY ELEMENTS NOT COMPUTED.
C
      DO 4000 I=1,M
 4000 IF(IFLAG(I).EQ.0)WJ(I,IC)=WJ(IC,I)
      GO TO 58
C
   54 DO 53 I=1,M
   53 WF(I)=F(I)
      FMIN=FSQ
      ENERGY=E3
C
C     SET X FOR THE NEXT CALL OF FSEVAL.
C
   58 IC=IC+1
      IF(IC.GT.N)GO TO 60
C
C     DO WE COMPUTE THIS ROW?
C
      IF(MODE.EQ.0.AND.IFLAG(IC).EQ.0)GO TO 58
      X(IC)=WX(IC)+DSTEP
      GO TO 4
C
C     CALCULATE THE INITIAL JACOBIAN MATRIX BY TWO-SIDED STEPS.
C
 3000 IF(IC.GT.0)GO TO 3030
      IC=-IC
      DO 3010 I=1,M
 3010 WJ(IC,I)=PT5*(WW(I)-F(I))/DSTEP
      ITER=1
      X(IC)=WX(IC)
      GO TO 58
 3030 DO 3040 I=1,M
 3040 WW(I)=F(I)
      ITER=1
      X(IC)=WX(IC)-DSTEP
      IC=-IC
      GO TO 4
C
C     PRINT THE FORCE CONSTANT MATRIX.
C
   60 CALL FCPRNT(FILL1,FILL2,MAXM,N,ISYM)
      MODE=-1
C
C     SET THE DIRECTION MATRIX.
C
      DO 61 I=1,N
      DO 62 J=1,N
   62 WD(J,I)=ZERO
      WD(I,I)=ONE
   61 WC(I)=ONE  +DFLOAT(N-I)
C
C     PUNCH INITIAL FORCE CONSTANTS MATRIX.
C
      IF(IPUNCH.LE.0)GO TO 24
      WRITE(IPUNCH,1230) TITLE(1:68)
      NCARD=1
      DO 4021 J=1,N
      IEND=0
 4020 ISTART=IEND+1
      IF(ISTART.GT.N)GO TO 4021
      IEND=MIN0(IEND+6,N)
      NCARD=NCARD+1
      WRITE(IPUNCH,1240)NCARD,(WJ(I,J),I=ISTART,IEND)
      GO TO 4020
 4021 CONTINUE
      WRITE(IOUT,1090)IPUNCH
C
C     SET THE MARQUARDT PARAMETER TO ITS LEAST VALUE.
C
   24 PAR=PARM
C
C     COPY THE JACOBIAN AND APPEND THE MARQUARDT MATRIX.
C
   25 PPAR=PAR*PAR
      NTPAR=0
C
C     SYMMETRIZE WJ IF ISYM IS 0.
C
   63 IF(ISYM.NE.0)GO TO 4040
      DO 4030 I=1,N
      DO 4030 J=1,I
      T=PT5*(WJ(I,J)+WJ(J,I))
      WJ(I,J)=T
 4030 WJ(J,I)=T
 4040 DO 141 I=1,M
      DO 141 J=1,N
  141 WI(J,I)=WJ(J,I)
      DO 26 I=1,N
      DO 27 J=1,N
   27 WI(J,M+I)=ZERO
   26 WI(I,M+I)=PAR
C
C     CALCULATE THE GENERALIZED INVERSE OF J.
C
      CALL MB11MP(N,MPN,WI,NV,MAXMPN,WW,IW)
C
C     START THE ITERATION BY TESTING FMIN.
C
   64 IF (FMIN-ACC) 7,7,65
C
C     NEXT PREDICT THE DESCENT AND MARQUARDT MINIMA.
C
   65 DS=ZERO
      DN=ZERO
      SP=ZERO
      DO 66 I=1,N
      SUMX=ZERO
      SUMF=ZERO
      DO 67 J=1,M
      SUMX=SUMX-WJ(I,J)*WF(J)
   67 SUMF=SUMF-WI(I,J)*WF(J)
      DS=DS+SUMX*SUMX
      DN=DN+SUMF*SUMF
      SP=SP+SUMX*SUMF
      X(I)=SUMX
   66 F(I)=SUMF
C
C     PREDICT THE REDUCTION IN F(X) DUE TO THE MARQUARDT STEP.
C     AND ALSO PREDICT THE LENGTH OF THE STEEPEST DESCENT STEP.
C
      PRED=SP+SP
      DMULT=ZERO
      DO 68 I=1,M
      AP=ZERO
      AD=ZERO
      DO 69 J=1,N
      AP=AP+WJ(J,I)*F(J)
   69 AD=AD+WJ(J,I)*X(J)
      PRED=PRED-AP*AP
   68 DMULT=DMULT+AD*AD
C
C     TEST FOR CONVERGENCE.
C
      IF (DN-DM) 28,28,29
   28 AP=DSQRT(DN)
      IF(PRED+TWO  *PPAR*AP*(DMAX-AP)-ACC)7,7,70
   29 IF (PRED+PPAR*(DM-DN)-ACC) 7,7,70
C
C     TEST WHETHER TO APPLY THE FULL MARQUARDT CORRECTION.
C
   70 DMULT=DS/DMULT
      DS=DS*DMULT*DMULT
   71 IS=2
      IF (DN-DD) 72,72,73
C
C     TEST THAT THE MARQUARDT PARAMETER HAS ITS LEAST VALUE.
C
   72 IF (PAR-PARM) 30,30,24
   30 DD=DMAX1(DN,DSS)
      DS=PT25  *DN
      TINC=ONE
      IF (DN-DSS) 74,132,132
   74 IS=3
      GO TO 103
C
C     TEST WHETHER TO INCREASE THE MARQUARDT PARAMETER.
C
   73 IF (DN-DPAR) 31,31,32
   31 NTPAR=0
      GO TO 33
   32 IF (NTPAR) 34,34,35
   34 NTPAR=1
      PTM=DN
      GO TO 33
   35 NTPAR=NTPAR+1
      PTM=DMIN1(PTM,DN)
      IF (NTPAR-NT) 33,36,36
C
C     SET THE LARGER VALUE OF THE MARQUARDT PARAMETER.
C
   36 PAR=PAR*(PTM/DM)**PT25
      IF(SIX  *DD-DM)137,25,25
  137 AP=DSQRT(PRED/DN)
      IF (AP-PAR) 25,25,138
  138 PAR=DMIN1(AP,PAR*(DM/(SIX  *DD))**PT25)
      GO TO 25
C
C     TEST WHETHER TO USE THE STEEPEST DESCENT DIRECTION.
C
   33 IF (DS-DD) 75,76,76
C
C     TEST WHETHER THE INITIAL VALUE OF DD HAS BEEN SET.
C
   76 IF (DD) 77,77,78
   77 DD=DMIN1(DM,DS)
      IF (DD-DSS) 79,78,78
   79 DD=DSS
      GO TO 71
C
C     SET THE MULTIPLIER OF THE STEEPEST DESCENT DIRECTION.
C
   78 ANMULT=ZERO
      DMULT=DMULT*DSQRT(DD/DS)
      GO TO 80
C
C     INTERPOLATE BETWEEN THE STEEPEST DESCENT AND MARQUARDT DIRECTIONS.
C
   75 SP=SP*DMULT
      ANMULT=(DD-DS)/((SP-DS)+DSQRT((SP-DD)**2+(DN-DD)*(DD-DS)))
      DMULT=DMULT*(ONE  -ANMULT)
C
C     CALCULATE THE CORRECTION TO X, AND ITS ANGLE WITH THE FIRST
C     DIRECTION.
C
   80 DN=ZERO
      SP=ZERO
      DO 81 I=1,N
      F(I)=DMULT*X(I)+ANMULT*F(I)
      DN=DN+F(I)*F(I)
   81 SP=SP+F(I)*WD(I,1)
      DS=PT25*DN
C
C     TEST WHETHER AN EXTRA STEP IS NEEDED FOR INDEPENDENCE.
C
      IF (WC(1)-DTEST) 132,132,82
   82 IF (SP*SP-DS) 83,132,132
C
C     TAKE THE EXTRA STEP AND UPDATE THE DIRECTION MATRIX.
C
   83 DO 84 I=1,N
      X(I)=WX(I)+DSTEP*WD(I,1)
   84 IF(I.LT.N)WC(I)=WC(I+1)+ONE
      WC(N)=ONE
      IF(N.LE.1)GO TO 4
      DO 85 I=1,N
      SP=WD(I,1)
      DO 86 J=2,N
   86 WD(I,J-1)=WD(I,J)
   85 WD(I,N)=SP
      GO TO 4
C
C     EXPRESS THE NEW DIRECTION IN TERMS OF THOSE OF THE DIRECTION
C     MATRIX, AND UPDATE THE COUNTS IN WC.
C
  132 IF(N.GE.2)GO TO 153
      IS=1
      GO TO 152
  153 SP=ZERO
      DW=ZERO
      DO 87 I=1,N
      X(I)=DW
      DW=ZERO
      DO 88 J=1,N
   88 DW=DW+F(J)*WD(J,I)
      GO TO (89,90),IS
   90 WC(I)=WC(I)+ONE
      SP=SP+DW*DW
      IF (SP-DS) 87,87,91
   91 IS=1
      KK=I
      X(1)=DW
      GO TO 92
   89 X(I)=DW
   92 IF(I.LT.N)WC(I)=WC(I+1)+ONE
   87 CONTINUE
      WC(N)=ONE
C
C     REORDER THE DIRECTIONS SO THAT KK IS FIRST.
C
      IF (KK-1) 93,93,94
   94 KK2=KK+2
      DO 95 I=1,N
      SP=WD(I,KK)
      DO 96 J=2,KK
   96 WD(I,KK2-J)=WD(I,KK2-J-1)
   95 WD(I,1)=SP
C
C     GENERATE THE NEW ORTHOGONAL DIRECTION MATRIX.
C
   93 DO 97 I=1,N
   97 WW(I)=ZERO
      SP=X(1)*X(1)
      DO 98 I=2,N
      DS=DSQRT(SP*(SP+X(I)*X(I)))
      DW=SP/DS
      DS=X(I)/DS
      SP=SP+X(I)*X(I)
      DO 98 J=1,N
      WW(J)=WW(J)+X(I-1)*WD(J,I-1)
   98 WD(J,I-1)=DW*WD(J,I)-DS*WW(J)
      SP=ONE  /DSQRT(DN)
      DO 100 I=1,N
  100 WD(I,N)=SP*F(I)
C
C     PREDICT THE NEW RIGHT HAND SIDES.
C
  152 FNP=ZERO
      DO 101 I=1,M
      SUM=WF(I)
      DO 102 J=1,N
  102 SUM=SUM+WJ(J,I)*F(J)
      WW(I)=SUM
  101 FNP=FNP+SUM*SUM
C
C     CALCULATE THE NEXT VECTOR X, AND THEN CALL FSEVAL.
C
  103 DO 104 I=1,N
  104 X(I)=WX(I)+F(I)
      GO TO 4
C
C     UPDATE THE STEP SIZE
C
   49 DMULT=PT9  *FMIN+PT1  *FNP-FSQ
      IF (DMULT) 105,108,108
  105 DD=DMAX1(DSS,PT25  *DD)
      TINC=ONE
      IF (FSQ-FMIN) 106,107,107
C
C     TRY THE TEST TO DECIDE WHETHER TO INCREASE THE STEP LENGTH.
C
  108 SP=ZERO
      SS=ZERO
      DO 109 I=1,M
      T=F(I)-WW(I)
      SP=SP+DABS(F(I)*T)
  109 SS=SS+T*T
      PJ=ONE  +DMULT/(SP+DSQRT(SP*SP+DMULT*SS))
      SP=DMIN1(FOUR ,TINC,PJ)
      TINC=PJ/SP
      DD=DMIN1(DM,SP*DD)
      GO TO 106
C
C     IF F(X) IMPROVES STORE THE NEW VALUE OF X.
C
   47 IF (FSQ-FMIN) 106,110,110
  106 FMIN=FSQ
      ENERGY=E3
      DO 111 I=1,N
      SP=X(I)
      X(I)=WX(I)
  111 WX(I)=SP
      DO 112 I=1,M
      SP=F(I)
      F(I)=WF(I)
  112 WF(I)=SP
  110 GO TO (107,107,113),IS
  113 IS=2
      IF (FMIN-ACC) 7,7,83
C
C     CALCULATE THE CHANGES IN X AND IN F.
C
  107 DS=ZERO
      DO 114 I=1,N
      X(I)=X(I)-WX(I)
  114 DS=DS+X(I)*X(I)
      DO 115 I=1,M
  115 F(I)=F(I)-WF(I)
C
C     CALCULATE THE GENERALIZED INVERSE TIMES THE CHANGE IN X.
C
      SS=ZERO
      DO 116 I=1,MPN
      SP=ZERO
      DO 117 J=1,N
  117 SP=SP+WI(J,I)*X(J)
      WW(NWV+I)=SP
  116 SS=SS+SP*SP
C
C     CALCULATE J TIMES THE CHANGE IN F.
C     ALSO APPLY PROJECTION TO THE GENERALIZED INVERSE.
C
      DO 118 I=1,N
      ST=ZERO
      DO 119 J=1,MPN
  119 ST=ST+WI(I,J)*WW(NWV+J)
      ST=ST/SS
      DO 120 J=1,MPN
  120 WI(I,J)=WI(I,J)-ST*WW(NWV+J)
      ST=PPAR*X(I)
      DO 121 J=1,M
  121 ST=ST+WJ(I,J)*F(J)
  118 WW(I)=ST
C
C     REVISE J AND CALCULATE ROW VECTOR FOR CORRECTION TO INVERSE.
C
      SP=ZERO
      SPP=ZERO
      DO 122 I=1,M
      SS=F(I)
      ST=SS
      DO 123 J=1,N
      SS=SS-WJ(J,I)*X(J)
  123 ST=ST-WI(J,I)*WW(J)
      SS=SS/DS
      WW(NWV+I)=ST
      SP=SP+F(I)*ST
      SPP=SPP+ST*ST
      DO 122 J=1,N
  122 WJ(J,I)=WJ(J,I)+SS*X(J)
      DO 125 I=1,N
      ST=PAR*X(I)
      DO 126 J=1,N
  126 ST=ST-WI(J,M+I)*WW(J)
      WW(NWT+I)=ST
      SP=SP+PAR*X(I)*ST
  125 SPP=SPP+ST*ST
C
C     TEST THAT THE SCALAR PRODUCT IS SUFFICIENTLY ACCURATE.
C
      IF(PT01  *SPP-DABS(SP-SPP))63,63,127
C
C     CALCULATE THE NEW GENERALIZED INVERSE.
C
  127 DO 128 I=1,N
      ST=X(I)
      DO 129 J=1,M
  129 ST=ST-WI(I,J)*F(J)
      SS=ZERO
      DO 130 J=1,N
  130 SS=SS+WI(I,M+J)*X(J)
      ST=(ST-PAR*SS)/SP
      DO 128 J=1,MPN
  128 WI(I,J)=WI(I,J)+ST*WW(NWV+J)
      GO TO 64
C
 1000 FORMAT('1*** MAXIMUM NUMBER OF ITERATIONS EXCEEDED')
 1010 FORMAT('1*** GRADIENT LENGTH NO LONGER DECREASES ... ',
     1 'OPTIMIZATION TERMINATED'/5X,'THIS MAY BE DUE TO THE VALUES OF ',
     2 'DSTEP AND ACC OR TO LOSS OF RANK IN THE JACOBIAN')
 1020 FORMAT('0RESULTS AT ITERATION',I5,',',5X,I5,' FUNCTION ',
     1 'EVALUATIONS'/'0NEW COORDINATES:'//(1X,6(I6,1PD16.7)))
 1030 FORMAT('0GRADIENT TERMS:'//(1X,7(I5,1PD13.5)))
 1040 FORMAT('0GRADIENT LENGTH =',1PD16.8)
 1050 FORMAT('0AT ITERATION',I5,',  NFUNC =',I5,',  GRADIENT LENGTH =',
     1 1PD16.8,',  ENERGY =',0PF17.9/' X:',10(1PD13.5))
 1051 FORMAT(3X,1PD13.5,9D13.5)
 1060 FORMAT(' G:',10(1PD13.5))
 1070 FORMAT('1*** GRADIENT LENGTH CONVERGED TO DESIRED ACCURACY')
 1080 FORMAT('0THE FOLLOWING CALCULATION IS FOR THE BEST COORDINATES ',
     1 'FOUND SO FAR')
 1090 FORMAT('0FORCE CONSTANT MATRIX WRITTEN TO UNIT',I4)
 1100 FORMAT('0GRADIENT LENGTH =',1PD16.8/'0ENERGY =',0PF17.9,
     1 '  HARTREES')
 1110 FORMAT('1VA05MP SUM OF SQUARES GRADIENT LENGTH OPTIMIZATION ',
     1 '(VER: MAR  8, 1987)')
 1120 FORMAT(6I4/3F12.6)
 1130 FORMAT('0',I2,' VARIABLES,   ',
     1 'MAXIT =',I5,',   PRINT MODULUS =',I4,',   MODE =',I4,
     2 ',   IPUNCH =',I4,',   ISYM =',I4,',   IREST =',I4/
     3 '0DSTEP =',1PD13.6,',   DMAX =',D13.6,',   ACC =',D13.6)
 1140 FORMAT(6F12.6)
 1150 FORMAT(/'0INITIAL COORDINATES:'//(1X,6(I6,1PD16.7)))
 1160 FORMAT(/'0LIST OF VARIABLES FOR HESSIAN MATRIX CALCULATION:'/)
 1170 FORMAT(18I4)
 1180 FORMAT(1X,18I5)
 1190 FORMAT('0LIST CONTAINS THE VALUE',I5,' WHICH IS ILLEGAL OR A ',
     1 'REPEAT')
 1200 FORMAT(/'0*** THE FOLLOWING FORCE CONSTANT MATRIX CONTAINS ONLY ',
     1 'THE ESTIMATED VALUES')
 1210 FORMAT(' NONE - USE INTERNAL OR USER-SUPPLIED ESTIMATES FOR ALL ',
     1 'VARIABLES')
 1220 FORMAT('0ILLEGAL VALUE OF MODE')
 1230 FORMAT('**FC',A68,'FC     1')
 1240 FORMAT(T73,'FC',I6,T1,6F12.6)
 1250 FORMAT ('0RESTART BY RECOVERING THE LAST SET OF NEW PARAMETERS')
 1260 FORMAT ('0RESTART BY STARTING A NEW ITERATION WITH THE ',
     1 'CURRENT PARAMETERS AND HESSIAN MATRIX')
 1270 FORMAT ('0EXACT RESTART')
 1280 FORMAT ('0RESTART TYPE 2 CAN NOT BE USED UNLESS HESSIAN ',
     1 'EVALUATION COMPLETE (MODE = -1), CURRENT MODE =',I4)
 1290 FORMAT(/'0USER-SUPPLIED HESSIAN DIAGONAL ELEMENTS ',
     1 '(MDYNE/ANGSTROM):'//
     2 (1X,6(I6,1PD16.7)))
      END
      SUBROUTINE MB11MP(M,N,A,MAXM,MAXMPN,W,IW)
C
C     HARWELL ROUTINE MB11AD ... LAST LIBRARY UPDATE 18/05/70.
C     LAST MODIFIED BY MIKE PETERSON 08/01/79.
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C*
      DIMENSION A(MAXM,MAXMPN),W(IW)
C*
      DATA ZERO/0.0D0/,PT5/0.5D0/,ONE/1.0D0/
C*
C     PARTITION THE WORKING SPACE ARRAY W.
C     THE FIRST PARTITION HOLDS THE FIRST COMPONENTS OF THE VECTORS OF
C     THE ELEMENTARY TRANSFORMATIONS.
C     THE SECOND PARTITION RECORDS ROW INTERCHANGES.
      NRW=M
C     THE THIRD PARTITION RECORDS COLUMN INTERCHANGES.
      NCW=M+M
C
C     SET THE INITIAL RECORDS OF ROW AND COLUMN INTERCHANGES.
C
      DO 1 I=1,M
    1 W(NRW+I)=PT5  +DFLOAT(I)
      DO 2 I=1,N
    2 W(NCW+I)=PT5  +DFLOAT(I)
C     'KK' COUNTS THE SEPARATE ELEMENTARY TRANSFORMATIONS.
      KK=1
C
C     FIND LARGEST ROW AND MAKE ROW INTERCHANGES.
C
    3 RMAX=ZERO
      DO 4 I=KK,M
      SUM=ZERO
      DO 5 J=KK,N
    5 SUM=SUM+A(I,J)**2
      IF (RMAX-SUM) 6,4,4
    6 RMAX=SUM
      IR=I
    4 CONTINUE
      IF (IR-KK) 7,7,8
    8 SUM=W(NRW+KK)
      W(NRW+KK)=W(NRW+IR)
      W(NRW+IR)=SUM
      DO 9 J=1,N
      SUM=A(KK,J)
      A(KK,J)=A(IR,J)
    9 A(IR,J)=SUM
C
C     FIND LARGEST ELEMENT OF PIVOTAL ROW, AND MAKE COLUMN INTERCHANGES.
C
    7 RMAX=ZERO
      SUM=ZERO
      DO 10 J=KK,N
      SUM=SUM+A(KK,J)**2
      IF(RMAX-DABS(A(KK,J))) 11,10,10
   11 RMAX=DABS(A(KK,J))
      IR=J
   10 CONTINUE
      IF (IR-KK) 12,12,13
   13 RMAX=W(NCW+KK)
      W(NCW+KK)=W(NCW+IR)
      W(NCW+IR)=RMAX
      DO 14 I=1,M
      RMAX=A(I,KK)
      A(I,KK)=A(I,IR)
      A(I,IR)=RMAX
   14 CONTINUE
C
C     REPLACE THE PIVOTAL ROW BY THE VECTOR OF THE TRANSFORMATION.
C
   12 SIGMA=DSQRT(SUM)
      BSQ=DSQRT(SUM+SIGMA*DABS(A(KK,KK)))
      W(KK)=DSIGN(SIGMA+DABS(A(KK,KK)),A(KK,KK))/BSQ
      A(KK,KK)=-DSIGN(SIGMA,A(KK,KK))
      KP=KK+1
      IF (KP-N) 15,15,16
   15 DO 17 J=KP,N
   17 A(KK,J)=A(KK,J)/BSQ
C
C     APPLY THE TRANSFORMATION TO THE REMAINING ROWS OF A.
C
      IF (KP-M) 18,18,16
   18 DO 21 I=KP,M
      SUM=W(KK)*A(I,KK)
      DO 20 J=KP,N
   20 SUM=SUM+A(KK,J)*A(I,J)
      A(I,KK)=A(I,KK)-SUM*W(KK)
      DO 21 J=KP,N
   21 A(I,J)=A(I,J)-SUM*A(KK,J)
      KK=KP
      GO TO 3
C
C     AT THIS STAGE THE REDUCTION OF A IS COMPLETE.
C     NOW WE BUILD UP THE GENERALIZED INVERSE.
C     APPLY THE FIRST ELEMENTARY TRANSFORMATION.
C
   16 KK=M
      KP=M+1
      SUM=W(M)/A(M,M)
      IF (N-M) 33,33,34
   34 DO 35 J=KP,N
   35 A(M,J)=-SUM*A(M,J)
   33 A(M,M)=ONE  /A(M,M)-SUM*W(M)
C
C     NOW APPLY THE OTHER (M-1) TRANSFORMATIONS.
C
   36 KP=KK
      KK=KP-1
      IF (KK) 37,37,38
C
C     FIRST TRANSFORM THE LAST (M-KK) ROWS.
C
   38 DO 39 I=KP,M
      SUM=ZERO
      DO 40 J=KP,N
   40 SUM=SUM+A(KK,J)*A(I,J)
      DO 41 J=KP,N
   41 A(I,J)=A(I,J)-SUM*A(KK,J)
   39 W(I)=-SUM*W(KK)
C
C     THEN CALCULATE THE NEW ROW IN POSITION KK.
C
      DO 42 J=KP,N
      SUM=-W(KK)*A(KK,J)
      DO 43 I=KP,M
   43 SUM=SUM-A(I,KK)*A(I,J)
   42 A(KK,J)=SUM/A(KK,KK)
C
C     AND REVISE THE COLUMN IN POSITION KK.
C
      SUM=ONE  -W(KK)**2
      DO 44 I=KP,M
      SUM=SUM-A(I,KK)*W(I)
   44 A(I,KK)=W(I)
      A(KK,KK)=SUM/A(KK,KK)
      GO TO 36
C
C     RESTORE THE ROW INTERCHANGES.
C
   37 DO 45 I=1,M
   46 IR=IDINT(W(NRW+I))
      IF (I-IR) 47,45,45
   47 SUM=W(NRW+I)
      W(NRW+I)=W(NRW+IR)
      W(NRW+IR)=SUM
      DO 48 J=1,N
      SUM=A(I,J)
      A(I,J)=A(IR,J)
   48 A(IR,J)=SUM
      GO TO 46
   45 CONTINUE
C
C     RESTORE THE COLUMN INTERCHANGES.
C
      DO 49 J=1,N
   50 IR=IDINT(W(NCW+J))
      IF (J-IR) 51,49,49
   51 SUM=W(NCW+J)
      W(NCW+J)=W(NCW+IR)
      W(NCW+IR)=SUM
      DO 52 I=1,M
      SUM=A(I,J)
      A(I,J)=A(I,IR)
   52 A(I,IR)=SUM
      GO TO 50
   49 CONTINUE
      RETURN
      END
      SUBROUTINE FCPRNT(W,WORK,MAX,N,ISYM)
C*
C     SUBROUTINE TO PRINT THE FORCE CONSTANT MATRIX AND DIAGONALIZE IT.
C
C     W AND WORK ARE WORK VECTORS OF LENGTH MAX.
C     MAX IS THE DIMENSION OF WJ, WHICH IS FILLED TO SIZE N.
C     ISYM IS 0 TO SAVE THE SYMMETRIZED WJ, 1 TO SAVE THE ORIGINAL WJ.
C*
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C#
C     PARAMETER (NA=#NA)
C##
      PARAMETER (NA= 36)
C###
      PARAMETER (NA3=3*NA, NV=NA3/2, NV2=2*NV)
C
      COMMON/C711B/WJ(NV,NV),WD(NV,NV),WI(NV,NV2)
      COMMON/IO/IN,IOUT,IODUM(215)
C*
      DIMENSION W(MAX), WORK(MAX)
C*
      DATA PT5/0.5D0/, PT01/0.01D0/
C*
 1000 FORMAT('1FORCE CONSTANT MATRIX IN MDYNE/ANGSTROM (UNSYMMETRIZED)'
     1 //)
 1010 FORMAT('0'/I1,'EIGENVECTORS OF SYMMETRIZED FORCE CONSTANT MATRIX',
     1 ' (AS COLUMNS BY EIGENVALUE NUMBER, THE ROWS ARE THE ',
     2 'OPTIMIZED VARIABLE NUMBERS)'//)
 1020 FORMAT(/'0THIS CRITICAL POINT HAS ORDER',I3/' THERE ARE',I3,
     1 ' DEGENERATE OR INDETERMINATE (DUE TO NUMERICAL ERROR) ',
     2 'EIGENVALUES (ABS VALUE <=',F7.4,')')
 1030 FORMAT('1EIGENVALUES OF SYMMETRIZED FORCE CONSTANT MATRIX ',
     1 '(MDYNE/ANGSTROM)'//)
 1040 FORMAT('0'/I1,'FORCE CONSTANT MATRIX IN MDYNE/ANGSTROM ',
     1 '(SYMMETRIZED)'//)
 1050 FORMAT(1X,I3,F15.6)
C*
      IPAGE=0
      IF(N.GT.10)IPAGE=1
      WRITE(IOUT,1000)
      CALL MATOUT(WJ,MAX,MAX,N,N)
      IF(ISYM.NE.0)CALL TWRITE(32,WJ,MAX,MAX,N,N,0)
C
C     MAKE WJ SYMMETRICAL.
C
      DO 10 J=1,N
      DO 10 I=1,J
      T=PT5*(WJ(I,J)+WJ(J,I))
      WJ(I,J)=T
   10 WJ(J,I)=T
      IF(ISYM.EQ.0)CALL TWRITE(32,WJ,MAX,MAX,N,N,0)
      WRITE(IOUT,1040)IPAGE
      CALL MATOUT(WJ,MAX,MAX,N,N)
      CALL TRED12(N,MAX,WJ,WJ,W,WORK,-2)
      WRITE(IOUT,1030)
      DO 20 I=1,N
   20 WRITE(IOUT,1050)I,W(I)
C
C     FIND THE ORDER OF THE CRITICAL POINT.
C
      J=0
      JJ=0
C
      DO 40 I=1,N
      T=W(I)
      IF(T.GT.PT01)GO TO 40
      IF(DABS(T).LE.PT01)GO TO 30
C
C     NEGATIVE EIGENVALUE.
C
      J=J+1
      GO TO 40
C
C     ZERO EIGENVALUE.
C
   30 JJ=JJ+1
   40 CONTINUE
C
      WRITE(IOUT,1020)J,JJ,PT01
      WRITE(IOUT,1010)IPAGE
      CALL MATOUT(WJ,MAX,MAX,N,N)
      CALL TREAD(32,WJ,MAX,MAX,N,N,0)
      RETURN
      END
