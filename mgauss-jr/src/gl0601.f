C     GL0601       15 AUG 91                                         MRP
C?IBM/GLD/GBR/VAX/UNX
      SUBROUTINE POPGEN
C??
C?CDC
C     PROGRAM POPGEN
C??
C=POPULATION ANALYSIS
C CHAPTER 8: MULLIKEN POPULATION ANALYSIS.
C **********
C
C1INTRODUCTION
C     LINK 0601
C*
C     --------------
C     U OF T VERSION
C     AUGUST 1991
C     --------------
C*
C     MULLIKEN POPULATION ROUTINE
C*
C1OPTIONS
C     ******************************************************************
C     OPTIONS ... IOP( )
C     ******************************************************************
C     IOP(13) ... CALCULATE DIPOLE MOMENT.
C     0  NO.
C     1  YES, AND PRINT THE RESULTS.
C     2  YES, AND PERFORM THE DECOMPOSITION OF CHARGE DISTRIBUTION IN
C        TERMS OF ATOMIC MONOPOLES AND ATOMIC DIPOLES, AND PRINT THE
C        RESULTS. REFERENCE: W.A. SOKOLSKI AND R.A. POIRIER, CHEM.
C        PHYS. LETT., 98, 86-92 (1983).
C     3  YES, BUT DO NOT PRINT (SAVE INTERNALLY IN COMMON /GEN/).
C
C     IOP(14) ... NUMBER OF VIRTUAL ORBITALS PRINTED.
C     N  10+10*N, ROUNDED UP TO THE NEXT MULTIPLE OF 10. PRINTING IS
C        AUTOMATICALLY LIMITED TO NBASIS, THE NUMBER OF AO'S.
C     7  PRINT ALL VIRTUAL ORBITAL COEFFICIENTS.
C
C     IOP(15) ... GEOMETRY CHECK PRINTING.
C     0  NONE.
C     1  DISTANCE MATRIX, BOND ANGLES AND TORSION ANGLES.
C     2  DISTANCE MATRIX ONLY.
C
C     IOP(16) ... PRINTING OF MO COEFFICIENTS AND ORBITAL ENERGIES.
C     0  YES.
C     1  NO.
C     2  YES - IN ADDITION, PRINT THE COEFFICIENTS IN SCIENTIFIC
C     NOTATION (8 FIGURES).
C
C     IOP(17) ... PRINTING OF DENSITY MATRIX.
C     0  NO.
C     1  YES.
C
C     IOP(18) ... MULLIKEN POPULATION ANALYSIS AND BOND ORDER PRINTING.
C     0  ONLY ATOM POPULATION MATRIX, ATOMIC CHARGES, BOND ORDERS AND
C        ATOMIC VALENCES PRINTED.
C     1  ALL RESULTS PRINTED.
C     2  NO POPULATION ANALYSIS OR BOND ORDERS.
C
C     IOP(19) ... PUNCH OVERLAP MATRIX.
C     0  NO.
C     1  YES.
C
C     IOP(20) ... PUNCH CORE HAMILTONIAN MATRIX.
C     0  NO.
C     1  YES.
C
C     IOP(21) ... PUNCH DIPOLE MOMENT INTEGRALS.
C     0  NO.
C     1  YES.
C
C     IOP(22) ... PUNCH MO COEFFICIENTS AND ORBITAL ENERGIES.
C     0  NO.
C     1  YES.
C
C     IOP(23) ... PUNCH DENSITY MATRIX.
C     0  NO.
C     1  YES.
C
C     IOP(24) ... PUNCH FOCK MATRIX.
C     0  NO.
C     1  YES.
C
C     IOP(25) ... UNIT FOR PUNCHED OUTPUT.
C     0  STANDARD PUNCH UNIT (IPUNCH IN COMMON /IO/).
C     N  PUNCH TO UNIT N.
C
C     IOP(26) ... CUT-OFF DISTANCE FOR GEOMETRY CHECK.
C     0  3.5 ANGSTROMS.
C     N  N ANGSTROMS.
C     THIS VALUE IS USED AS AN ARBITRARY INDICATION OF BONDED ATOMS.
C     FOR GENERAL BOND ANGLE REQUESTS BOTH THE I-J AND J-K DISTANCES
C     MUST NOT EXCEED THE CUT-OFF VALUE. FOR GENERAL TORSION ANGLE
C     REQUESTS THE I-J, J-K AND K-L DISTANCES MUST NOT EXCEED THE
C     CUT-OFF VALUE.
C
C     IOP(27) ... PRINT FINAL DENSITY CONVERGENCE AND SPIN.
C     0  NO.
C     1  YES.
C
C     IOP(28) ... PREPARE MRDCI DATA FILE (UNIT 11).
C     0  NO.
C     1  YES.
C
C     IOP(29) ... ENERGY DECOMPOSITION / BSSE CORRECTION.
C     0  NO.
C     1  ENERGY DECOMPOSITION ONLY.
C     2  BSSE CORRECTION ONLY.
C     3  ENERGY DECOMPOSITION AND BSSE CORRECTION.
C
C     IOP(30) ... PRINTING OF MO COEFFICIENTS FOR ED/BSSE RUNS.
C     0  YES.
C     1  NO (THIS IS THE DEFAULT ONCE THE FRAGMENT A, FRAGMENT B, AND
C        A+B SUPERMOLECULE HAVE BEEN COMPLETED).
C     NOTE: FOR FRAGMENT A, FRAGMENT B, AND THE A+B SUPERMOLECULE,
C     THE COEFFICIENT PRINTING OPTION IS CONTROLLED BY IOP(16).
C
C     IOP(31) ... POPULATION ANALYSIS PRINTING FOR ED/BSSE RUNS.
C     0  ONLY ATOM POPULATION MATRIX, ATOMIC CHARGES, BOND ORDERS AND
C        ATOMIC VALENCES PRINTED.
C     1  ALL RESULTS PRINTED.
C     2  NO POPULATION ANALYSIS OR BOND ORDERS (THIS IS THE DEFAULT
C        ONCE THE FRAGMENT A, FRAGMENT B AND A+B SUPERMOLECULE HAVE
C        BEEN COMPLETED).
C     NOTE: FOR FRAGMENT A, FRAGMENT B, AND THE A+B SUPERMOLECULE,
C     THE POPULATION ANALYSIS OPTION IS CONTROLLED BY IOP(18).
C
C     IOP(32) ... FINITE FIELD PHASE MATCHING ON THE CMO MATRIX.
C     0  NONE.
C     1  NONE.
C     2  READ MO SWITCH DATA AND THE ZERO FIELD CMO, THEN PHASE MATCH
C        THE FINITE FIELD MO'S TO THE ZERO FIELD MO'S.
C     NOTE: THIS IS NOT A "BLACK BOX" FACILITY, AND IS INTENDED TO BE
C     USED IN CONJUNCTION WITH THE LMO POLARIZABILITY CHANGES IN LINK
C     0801.
C
C     IOP(33) ... UNIT NUMBER FOR ZERO FIELD CMO (FOR IOP(32)=2).
C     N  READ FROM UNIT N (SET TO 1 BY THE STANDARD ROUTE).
C
C     IOP(34) ... DEBUG PRINTING FOR CMO PHASE MATCHING.
C     0  NO.
C     1  YES.
C
C     IOP(35) TO IOP(60) ... NOT USED.
C     ******************************************************************
C*
C1GEOMETRY-CHECK
C     GEOMETRY CHECK INPUT
C*
C     THE INPUT FOR THE GEOMETRY CHECK OPTION (IOP(15)=1) ALLOWS TWO
C     TYPES OF REQUESTS: SPECIFIC AND GENERAL. FOR THE SPECIFIC
C     REQUESTS, THE ATOM NUMBERS DEFINING THE PARTICULAR ANGLE DESIRED
C     ARE READ: I-J-K FOR BOND ANGLES, I-J-K-L FOR TORSION ANGLES. EG.
C      3 1 811                         (FORMAT IS 4I2)
C     WOULD PRINT THE TORSION ANGLE 3-1-8-11. IN A GENERAL REQUEST, ONE
C     OR TWO OF THE ATOM NUMBERS ARE 0 - THEN ALL POSSIBLE ATOM NUMBERS
C     WILL BE SUBSTITUTED IN THOSE POSITIONS, SUBJECT TO THE CUT-OFF
C     DEFINED BY IOP(26) TO HELP CONSERVE PAPER. THUS
C      0 3 7                           (FORMAT IS 3I2)
C     WOULD PRINT THE THE BOND ANGLES 1-3-7, 2-3-7, 4-3-7, ...
C     NATOMS-3-7.
C*
C     THE BOND ANGLE REQUESTS ARE READ FIRST (GENERAL AND SPECIFIC
C     REQUESTS MAY BE MIXED IN ANY ORDER), UNTIL A CARD WITH I=J=K=0 IS
C     FOUND. THEN THE TORSION ANGLE REQUESTS (GENERAL AND SPECIFIC)
C     ARE READ UNTIL A CARD WITH I=J=K=L=0 IS FOUND. NOTE THAT THE
C     CUT-OFF (IOP(26)) IS APPLIED ONLY FOR GENERAL REQUESTS.
C     IF A GIVEN ANGLE IS NOT PRINTED WHEN REQUESTED, THEN IT IS NOT
C     PROPERLY DEFINED - EG. ONE BOND IS VERY SHORT, TWO ATOMS ARE THE
C     SAME, THREE ATOMS ARE COLINEAR FOR TORSION ANGLES, ETC.
C
C     FOR ED/BSSE RUNS, THE GEOMETRY CHECK IS PERFORMED ONLY DURING
C     THE FIRST PASS.
C*
C1BOND-ORDER
C1ATOMIC-VALENCE
C1VALENCE
C     BOND ORDERS AND ATOMIC VALENCES.
C*
C     BOND ORDERS AND ATOMIC VALENCES ARE CALCULATED ACCORDING TO:
C     I. MAYER, CHEM. PHYS. LETTERS, 97, 270 (1983) AND
C     I. MAYER, I.J.Q.C., 29, 477-483 (1986).
C*
C1LMO-POLARIZABILITY
C     LMO-POLARIZABILITY INPUT.
C*
C     FOR JOBS WITH LMO=2 (WHICH SETS IOP(32)=2), IT MAY BE NECESSARY
C     TO SWITCH MO'S IN DEGENERATE CASES. TO ALLOW FOR THIS, A LINE IS
C     READ (IN I4 FORMAT) WHICH CONTAINS THE NUMBER OF SWITCHES TO BE
C     MADE. IF THAT NUMBER IS NON-ZERO, THEN THAT MANY LINES ARE READ
C     WHERE EACH LINE CONTAINS A PAIR OF NUMBERS (IN 2I4 FORMAT) WHICH
C     ARE THE MO NUMBERS TO BE INTERCHANGED.
C==
C*
C/
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C#
C     PARAMETER (NA=#NA, NB=#NB)
C     PARAMETER (NF=#NF, NC=#NC, NE=2*NB)
C##
      PARAMETER (NA= 36, NB=200)
      PARAMETER (NF=120, NC=120, NE=2*NB)
C###
      PARAMETER (ZERO=0.0D0, ONE=1.0D0)
C
      COMMON /A/ IOP(99)
      COMMON /A/ NATOMS,ICHARG,MULTIP,IAN(NA),NAE,NBE,NED,NBASIS,C(NA,3)
      COMMON /A/ CD(4),ICD(401)
C
      COMMON /POP1/ A(NB,NB)
      COMMON /POP2/ B(NB,NB)
      COMMON /POP3/ D(NB,NB)
      COMMON /POP4/ EIG(NE),RN(NF),FILL4(119),COEF(NC),OCCA(9),OCCB(9),
     1 ICONF(NC),IRHF,NCONF,NCORE,NVAL,NOPEN,NFOCK,IMO(4)
      COMMON /BSINFO/ NVO(NA),IAOFF(NA)
C
      COMMON /GEN/ ENERGY(6),DCONV,SPIN(2),FIELD(3),FE,EMOL,ESOL,
     1 DPOLE(4),VCM
      COMMON /IO/ IN,IOUT,IODUM(15),NFILE(100,2)
C
      CHARACTER ICONFL*4,IPAIR*4,LABEL*12,L1*12,L2*12,L3*12,ICODE*4
C
      DIMENSION E(NA,NA),G(NA,5),ILOWER(NC),IUPPER(NC)
C
      EQUIVALENCE (G(1,1),D(1,5)),(E(1,1),D(1,10))
C
      DATA PT5/0.5D0/, ICONFL/'CONF'/
      DATA PT01/0.01D0/, PT05/0.05D0/, IPAIR/'PAIR'/
      DATA L1/'(ALPHA SPIN)'/, L2/'(BETA SPIN) '/, L3/'(TOTAL)     '/
C
 1000 FORMAT(/'0FINAL DENSITY MATRIX CONVERGENCE IS',1PD13.5)
 1010 FORMAT('1MOLECULAR ORBITALS ',A12,I10,' OCCUPIED MO')
 1020 FORMAT('1DENSITY MATRIX ',A12)
 1030 FORMAT('1MULLIKEN POPULATION MATRIX ',A12)
 1040 FORMAT('1GROSS ORBITAL CHARGES')
 1050 FORMAT('1GROSS ORBITAL CHARGES (ALPHA(1), BETA(2), TOTAL(3)) AND',
     1 ' ORBITAL SPIN DENSITIES(4)')
 1060 FORMAT('1MULLIKEN POPULATION MATRIX CONDENSED TO ATOMS ',A12,
     1 5X,'(DOUBLE THE OFF-DIAGONAL ELEMENTS FOR ''BOND ORDERS'')')
 1070 FORMAT(I1,'TOTAL ATOMIC CHARGES AND NET ATOMIC CHARGES')
 1080 FORMAT(I1,'ATOMIC CHARGES (ALPHA(1), BETA(2)), ATOMIC SPIN ',
     1 'DENSITIES(3), ATOMIC CHARGES (TOTAL(4), NET(5))')
 1090 FORMAT('1 MO')
 1100 FORMAT('0',I3,6(1PD16.7)/(4X,6D16.7))
 1110 FORMAT(/'0S =',F6.3,' (',F6.3,' EXPECTED),   S(S+1) =',F8.4,' (',
     1 F8.4,' EXPECTED)')
 1120 FORMAT('0FINAL ENERGIES:'/' NUCLEAR REPULSION',F20.9,
     1 ', SCF TOTAL ENERGY',F20.9,', CI TOTAL ENERGY',F20.9,' HARTREES')
 1130 FORMAT('1MOLECULAR ORBITALS',I10,' ALPHA SPIN ELECTRONS,',I4,
     1 ' BETA SPIN ELECTRONS')
 1140 FORMAT(/'0FINAL COEFFICIENT MATRIX CONVERGENCE IS',1PD13.5)
 1150 FORMAT('0*** WARNING: SPIN ',
     1 'CONTAMINATION - GEOMETRIES/ENERGIES MAY BE AFFECTED ***')
 1160 FORMAT('0*** WARNING: SUBSTANTIAL ',
     1 'SPIN CONTAMINATION - GEOMETRIES/ENERGIES ARE SIGNIFICANTLY ',
     2 'AFFECTED ***')
 1170 FORMAT(1X)
 1180 FORMAT(' THE FIRST',I4,' MO ARE DOUBLY OCCUPIED FROZEN CORE ',
     1 'ORBITALS')
 1190 FORMAT('0MO',I4,'  TO',I4,' ARE USED FOR PAIR-WISE EXCITATIONS:'/
     1 1X,5(2X,A4,6X,'COEFF',8X))
 1200 FORMAT('0OPEN SHELL ORBITAL OCCUPANCIES:',4X,'MO',5X,
     1 'OCCA',5X,'OCCB')
 1210 FORMAT(34X,I4,1X,2F9.4)
 1220 FORMAT ((1X,5(I3,'-',I3,F11.6,7X)))
 1230 FORMAT('0MO',I4,'  TO',I4,' ARE USED FOR GVB PAIRS:'/
     1 1X,5(2X,A4,6X,'COEFF',8X))
 1240 FORMAT (' *** WARNING: MO',I4,' IS NOT BOUND - CALCULATION IS ',
     1 'NOT VALID ***')
 1250 FORMAT (/'0 EIGENVALUES'/)
 1260 FORMAT (4X,6(1PD16.7))
 1270 FORMAT (6F12.0)
 1280 FORMAT (' SWAP MO',I4,' AND',I4,'.')
 1290 FORMAT (2I4)
 1300 FORMAT (' AO',I4,' IN MO',I4,' HAS LARGEST COEFFICIENT =',F11.5,
     1 ', ZERO FIELD COEFFICIENT =',F11.5,', PRODUCT =',F11.3)
 1310 FORMAT (A4,I4,2I8,2I4)
 1320 FORMAT ('0*** INVALID ZERO FIELD CMO MATRIX HEADER LINE:'/
     1 ' GOT CODE ',A,' (EXPECTED ''***C'')'/
     2 ' GOT DIMENSIONS',I4,' BY',I4,' (EXPECTED NBASIS BY NBASIS)'/
     3 ' GOT SEQUENCE NUMBER',I4,' (EXPECTED 1).')
C*
C     CHECK FOR NON-CONVERGED SCF.
      IF(IOP(1).EQ.0)GO TO 5
      IOP(1)=-2
      DO 1 I=13,60
    1 IOP(I)=0
      IOP(18)=2
      IF (IOP(9) .EQ. 2) THEN
         IOP(22) = 1
      ELSE
         IOP(23) = 1
      END IF
      IOP(31) = 2
C
    5 IF (IOP(4).GT.4 .AND. IOP(30).EQ.1 .AND. IOP(31).EQ.2) RETURN
      MOPRT = NAE + 10 + 10*IOP(14)
      MOPRT = 10 * ((MOPRT+9)/10)
      IF (MOPRT.GT.NBASIS .OR. IOP(14).EQ.7) MOPRT = NBASIS
      IOP18=IOP(18)
      IF (IOP(4) .GT. 4) IOP18 = IOP(31)
      INEWPG=0
      IF(NATOMS.GT.10)INEWPG=1
C
C     CALCULATE AND PRINT DISTANCE MATRIX.
C
      IF (IOP(15).NE.0 .AND. IOP(4).LE.1) CALL DISMAT
      IF (IOP(4) .EQ. 1) RETURN
C
C     READ COEFFICIENTS AND EIGENVALUES.
C
      IF (IOP(10) .EQ. 0) GO TO 410
      IF(IOP(9).EQ.0)GO TO 30
C
C     OPEN SHELL.
C
      KOP=1
      LABEL = L1
      IF(IOP(16).EQ.1)GO TO 55
      IF(IOP(9).NE.2)CALL TREAD(5,EIG,NB+NB,1,NBASIS+NBASIS,1,0)
      IF(IOP(9).EQ.2)CALL TREAD(5,EIG,NFILE(5,1),1,NFILE(5,1),1,0)
      GO TO 40
C
C     CLOSED SHELL.
C
   30 KOP=0
      LABEL = ' '
      IF (IOP(4).LE.4 .AND. IOP(16).EQ.1) GO TO 55
      IF (IOP(4).GT.4 .AND. IOP(30).EQ.1) GO TO 55
      CALL TREAD(5,EIG,NB,1,NBASIS,1,0)
C
   40 CALL TREAD(25,A,NB,NB,NBASIS,NBASIS,0)
      IF(IOP(9).NE.2)WRITE(IOUT,1010)LABEL,NAE
      IF(IOP(9).EQ.2)WRITE(IOUT,1130)NAE,NBE
      CALL GBSOUT(A,EIG,NB,NB,MOPRT,1)
      IF(IOP(9).NE.2)GO TO 530
      WRITE(IOUT,1170)
      IF(NCORE.NE.0)WRITE(IOUT,1180)NCORE
      J=IMO(3)-1
      IF(NVAL.EQ.0)GO TO 510
      K=MIN0(NCONF,5)
      IF (IRHF .NE. 2) WRITE (IOUT,1190) IMO(1),J,(ICONFL,I=1,K)
      IF (IRHF .EQ. 2) WRITE (IOUT,1230) IMO(1),J,(IPAIR,I=1,K)
      DO 500 K=1,NCONF
      I=ICONF(K)/1000
      IUPPER(K)=I
  500 ILOWER(K)=ICONF(K)-1000*I
      WRITE(IOUT,1220)(ILOWER(K),IUPPER(K),COEF(K),K=1,NCONF)
  510 IF(NOPEN.EQ.0)GO TO 530
      WRITE(IOUT,1200)
      DO 520 I=1,NOPEN
      J=J+1
  520 WRITE(IOUT,1210)J,OCCA(I),OCCB(I)
C
C     CHECK THAT THE EIGENVALUES FOR THE OCCUPIED ALPHA SPIN
C     ORBITALS ARE NEGATIVE.
C
  530 J = NAE
      IF (IOP(9) .EQ. 2) J = IMO(4) - 1
      K = 0
      DO 540 I=1,J
      IF (EIG(I) .LT. ZERO) GO TO 540
      IF (K .EQ. 0) WRITE (IOUT,1170)
      K = 1
      WRITE (IOUT,1240) I
  540 CONTINUE
C
      IF(IOP(16).NE.2)GO TO 560
      WRITE(IOUT,1090)
      DO 550 I=1,NBASIS
  550 WRITE(IOUT,1100)I,(A(J,I),J=1,NBASIS)
      WRITE (IOUT,1250)
      WRITE (IOUT,1260) (EIG(J),J=1,NBASIS)
C
  560 IF(KOP.EQ.0)GO TO 50
      IF(IOP(9).EQ.2)GO TO 610
      CALL TREAD(27,B,NB,NB,NBASIS,NBASIS,0)
      DO 570 I=1,NBASIS
  570 EIG(I)=EIG(NBASIS+I)
      WRITE(IOUT,1010)L2,NBE
      CALL GBSOUT(B,EIG,NB,NB,MOPRT,1)
C
C     CHECK THAT THE EIGENVALUES FOR THE OCCUPIED BETA SPIN
C     ORBITALS ARE NEGATIVE.
C
      IF (NBE .EQ. 0) GO TO 590
      K = 0
      DO 580 I=1,NBE
      IF (EIG(I) .LT. ZERO) GO TO 580
      IF (K .EQ. 0) WRITE (IOUT,1170)
      K = 1
      WRITE (IOUT,1240) I
  580 CONTINUE
C
  590 IF(IOP(16).NE.2)GO TO 610
      WRITE(IOUT,1090)
      DO 600 I=1,NBASIS
  600 WRITE(IOUT,1100)I,(B(J,I),J=1,NBASIS)
      WRITE (IOUT,1250)
      WRITE (IOUT,1260) (EIG(J),J=1,NBASIS)
C
  610 IF(IOP(27).EQ.0)GO TO 55
      SE=PT5*DFLOAT(MULTIP-1)
      TE=SE*(SE+ONE)
      WRITE(IOUT,1110)SPIN(1),SE,SPIN(2),TE
      T=DABS(SPIN(1)-SE)
      IF(SE.NE.ZERO)T=T/SE
      IF(T.GE.PT05)GO TO 620
      IF(T.GT.PT01)WRITE(IOUT,1150)
      GO TO 50
C
  620 WRITE(IOUT,1160)
   50 IF(IOP(27).EQ.0)GO TO 55
      IF(IOP(9).NE.2)WRITE(IOUT,1000)DCONV
      IF(IOP(9).EQ.2)WRITE(IOUT,1140)DCONV
      T=ENERGY(1)+ENERGY(2)
      IF(T.NE.ENERGY(3))WRITE(IOUT,1120)ENERGY(1),T,ENERGY(3)
C
C     HANDLE MO PHASE MATCHING FOR LMO=2 RUNS.
C
C     WHEN FIELD IS PRESENT READ ZERO-FIELD COEFFS FROM UNIT IOP(33).
C     FOR EACH CMO FIND THE NUMERICALLY LARGEST COEFF. MULTIPLY IT BY
C     THE CORRESPONDING ZERO-FIELD COEFF. IF PROD -VE CHANGE SIGNS OF
C     COEEFS IN THE CMO.
C
   55 IF (IOP(32) .NE. 2) GO TO 59
      CALL TREAD(25,A,NB,NB,NBASIS,NBASIS,0)
C     READ THE ZERO FIELD COEFFICIENTS FROM UNIT GIVEN BY IOP(33).
      IREAD = IOP(33)
      READ (IREAD,1310) ICODE, I, II, JJ, ISEQ, INUM
      IF (ICODE.NE.'***C' .OR. II.NE.NBASIS .OR. JJ.NE.NBASIS .OR.
     1 ISEQ.NE.1) THEN
         WRITE (IOUT,1320) ICODE, II, JJ, ISEQ
         IOP(1) = -2
         RETURN
      END IF
      DO 5000 II=1,NBASIS
 5000 READ (IREAD,1270) (B(JJ,II),JJ=1,NBASIS)
C     SKIP THE EIGENVALUES.
      READ (IREAD,1270) (D(JJ,1),JJ=1,NBASIS)
C
C     IN SOME DEGENERATE CASES THE MO'S MAY HAVE TO BE SWITCHED.
      READ(IN,1290)NNUM
      IF(NNUM.EQ.0)GO TO 5022
      DO 5024 III=1,NNUM
      READ(IN,1290)JJJ,KKK
      WRITE (IOUT,1280) JJJ, KKK
      DO 5024 LLL=1,NBASIS
      T = A(LLL,JJJ)
      A(LLL,JJJ) = A(LLL,KKK)
      A(LLL,KKK) = T
 5024 CONTINUE
C
C     FIND THE LARGEST (ABS) A COEFFICIENT AND COMPARE SIGN WITH B.
 5022 IF (IOP(34) .NE. 0) WRITE (IOUT,1170)
      DO 5001 II=1,NBASIS
      ANOW=ZERO
      DO 5010 JJ=1,NBASIS
      IF(DABS(A(JJ,II)).LE.ANOW) GO TO 5010
      ANOW=DABS(A(JJ,II))
      NOWJJ=JJ
 5010 CONTINUE
      PROD=A(NOWJJ,II)*B(NOWJJ,II)
      IF (IOP(34) .NE. 0) 
     1 WRITE(IOUT,1300)NOWJJ,II,A(NOWJJ,II),B(NOWJJ,II),PROD
C     IF PRODUCT IS NEGATIVE, CHANGE SIGNS OF COEFFICIENTS.
      IF(PROD.GT.ZERO)GO TO 5001
      DO 5002 JJ=1,NBASIS
      A(JJ,II)=-A(JJ,II)
 5002 CONTINUE
 5001 CONTINUE
C     PUT REVISED COEFFS ON SCRATCH FILE 25.
      CALL TWRITE(25,A,NB,NB,NBASIS,NBASIS,0)
C
C     READ DENSITY MATRICES.
C
   59 IF(IOP18.EQ.2.AND.IOP(17).EQ.0)GO TO 400
      CALL TREAD(19,A,NB,NB,NBASIS,NBASIS,1)
      IF(IOP(17).EQ.0)GO TO 60
      WRITE (IOUT,1020)LABEL
      CALL GBSOUT(A,EIG,NB,NB,NBASIS,0)
   60 IF(KOP.EQ.0)GO TO 70
      CALL TREAD(21,B,NB,NB,NBASIS,NBASIS,1)
      IF(IOP(17).EQ.0)GO TO 70
      WRITE (IOUT,1020)L2
      CALL GBSOUT(B,EIG,NB,NB,NBASIS,0)
   70 IF(IOP18.EQ.2)GO TO 400
      ICOL=0
C
C     READ IN OVERLAP MATRIX.
C
      CALL TREAD(8,D,NB,NB,NBASIS,NBASIS,1)
C
C     NOW---
C     A   ALPHA (OR REGULAR) DENSITY MATRIX
C     B   BETA DENSITY MATRIX
C     D   OVERLAP MATRIX
C
C     DO MULLIKEN POPULATION ANALYSIS.
C
      DO 80 J=1,NBASIS
      DO 80 I=1,J
      A(I,J)=A(I,J)*D(I,J)
   80 A(J,I)=A(I,J)
      IF(KOP.EQ.0)GO TO 100
      DO 90 J=1,NBASIS
      DO 90 I=1,J
      B(I,J)=B(I,J)*D(I,J)
   90 B(J,I)=B(I,J)
C
C     NOW---
C     A   ALPHA (OR REGULAR)
C     B   BETA
C
  100 ICOL=ICOL+1
      IF(IOP18.EQ.0)GO TO 200
      WRITE(IOUT,1030)LABEL
      CALL GBSOUT(A,EIG,NB,NB,NBASIS,0)
C
C     CALCULATE GROSS ORBITAL CHARGES (SAVE IN COLUMN ICOL OF D).
C
      DO 130 I=1,NBASIS
      SUM=ZERO
      DO 120 J=1,NBASIS
  120 SUM=SUM+A(J,I)
  130 D(I,ICOL)=SUM
C
C     PRINT ORBITAL CHARGES (AND SPIN DENSITIES) IF NOW USING TOTAL
C     POPULATION MATRIX.
C
      IF(KOP.EQ.1)GO TO 140
      WRITE(IOUT,1040)
      I1=1
      GO TO 160
  140 IF(ICOL.LT.3)GO TO 200
      WRITE(IOUT,1050)
      I1=4
      DO 150 I=1,NBASIS
  150 D(I,4)=D(I,1)-D(I,2)
  160 CALL GBSOUT(D,EIG,NB,NB,I1,0)
C
C     COMPRESSED FROM ORBITALS TO ATOMS
C
  200 I2=0
      DO 230 I=1,NATOMS
      NVOI=NVO(I)
      I1=I2+1
      I2=I2+NVOI
      J2=0
      DO 230 J=1,I
      SUM=ZERO
      NVOJ=NVO(J)
      IF(NVOI.EQ.0.OR.NVOJ.EQ.0)GO TO 220
      J1=J2+1
      J2=J2+NVOJ
      DO 210 K=I1,I2
      DO 210 L=J1,J2
  210 SUM=SUM+A(K,L)
  220 E(I,J)=SUM
  230 E(J,I)=SUM
      WRITE(IOUT,1060)LABEL
      CALL GBSOUT(E,EIG,NA,NA,NATOMS,2)
      DO 250 I=1,NATOMS
      SUM=ZERO
      DO 240 J=1,NATOMS
  240 SUM=SUM+E(J,I)
C
C     SAVE ATOMIC CHARGES IN COLUMN ICOL OF G.
C
  250 G(I,ICOL)=SUM
C
C     PRINT TOTAL AND NET CHARGES IF NOW USING TOTAL POPULATION.
C
      IF(KOP.EQ.1)GO TO 260
      WRITE(IOUT,1070)INEWPG
      GO TO 270
  260 IF(ICOL.LT.3)GO TO 300
      WRITE(IOUT,1080)INEWPG
C
C     SHIFT TOTAL CHARGE OVER TO COLUMN 4 FOR OPEN SHELL RUNS.
C     SET COLUMN 3 TO ATOMIC SPIN DENSITIES.
C
      DO 265 I=1,NATOMS
      G(I,4)=G(I,3)
  265 G(I,3)=G(I,1)-G(I,2)
      ICOL=4
  270 I1=ICOL+1
      DO 290 I=1,NATOMS
      J=IAN(I)
      IF(J.LT.0)J=0
      G(I,I1)=DFLOAT(J)-G(I,ICOL)
  290 CONTINUE
      CALL GBSOUT(G,EIG,NA,5,I1,2)
      IF(KOP.EQ.0)GO TO 400
C
C     FOR OPEN SHELL, DETERMINE WHAT PASS JUST COMPLETED.
C
  300 IF(ICOL-2)305,320,400
C
C     DONE ALPHA - NOW DO BETA.
C
  305 LABEL = L2
C
C     SWITCH ALPHA AND BETA POPULATION MATRICES
C
      DO 310 J=1,NBASIS
      DO 310 I=1,J
      T=A(I,J)
      A(I,J)=B(I,J)
      A(J,I)=B(I,J)
      B(I,J)=T
  310 B(J,I)=T
      GO TO 100
C
C     DONE BETA - NOW DO TOTAL.
C
  320 LABEL = L3
C
C     COMBINE ALPHA AND BETA POPULATION MATRICES
C
      DO 330 J=1,NBASIS
      DO 330 I=1,J
      A(I,J)=A(I,J)+B(I,J)
  330 A(J,I)=A(I,J)
      GO TO 100
C
C     DO BOND ORDERS AND ATOMIC VALENCES IF REQUIRED.
C
  400 IF (IOP18 .NE. 2) CALL BORDER (INEWPG)
C
C     DO DIPOLE MOMENT IF NECESSARY.
C
      IF(IOP(13).NE.0)CALL DQ
C
C     PUNCH OUT ANY REQUIRED MATRICES.
C
      CALL PUNCH(NBASIS)
C
C     PREPARE MRD-CI DATA FILE.
C
  410 IF(IOP(28).EQ.1)CALL MRDCI
      RETURN
      END
      SUBROUTINE DISMAT
C*
C     --------------
C     U OF T VERSION
C     FEBRUARY 1989
C     --------------
C*
C     CALCULATE INTERATOMIC DISTANCE MATRIX AND ANGLES.
C*
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C#
C     PARAMETER (NA=#NA, NB=#NB)
C##
      PARAMETER (NA= 36, NB=200)
C###
      PARAMETER (ZERO=0.0D0, ONE=1.0D0, TWO=2.0D0)
C
      COMMON /A/ IOP(99)
      COMMON /A/ NATOMS,ICHARG,MULTIP,IAN(NA),NAE,NBE,NE,NBASIS,C(NA,3)
      COMMON /A/ ANTOAU,CDUM(3),ICDUM(401)
C
      COMMON /POP1/ E(NB,NB)
C
      COMMON /IO/ IN,IOUT,IODUM(215)
C
      DIMENSION IP(5),JP(5),KP(5),LP(5),P(5),V1(3),V2(3),A(3),B(3)
C
      DATA TENM5/1.0D-5/, TENP5/1.0D5/, F360/360.0D0/
      DATA TORAD/1.74532925199433D-2/, THRPT5/3.5D0/
      DATA F90/90.0D0/, F180/180.0D0/, BLCRIT/0.75D0/
C
 1000 FORMAT('1BOND ANGLES I-J-K'/)
 1010 FORMAT(4I2)
 1020 FORMAT(1X,3I3,F11.5,4(4X,3I3,F11.5))
 1030 FORMAT('1TORSION ANGLES I-J-K-L'/)
 1040 FORMAT(1X,4I3,F11.5,4(4X,4I3,F11.5))
 1050 FORMAT('1DISTANCE MATRIX')
 1060 FORMAT ('0NUCLEAR REPULSION ENERGY IS',F17.9,' HARTREES.')
 1070 FORMAT (' *** WARNING: DISTANCE BETWEEN ATOMS',I3,' AND',I3,
     1 ' IS',F7.4,' ANGSTROMS - CHECK THE GEOMETRY ***')
C*
C     CALCULATE DISTANCE MATRIX AND NUCLEAR REPULSION ENERGY.
C
      AUTOAN=ONE/ANTOAU
      E1 = ZERO
C
      DO 20 I=1,NATOMS
      IANI = IAN(I)
      CIX=C(I,1)
      CIY=C(I,2)
      CIZ=C(I,3)
C
      DO 20 J=1,I
      IANJ = IAN(J)
      T=DSQRT((CIX-C(J,1))**2+(CIY-C(J,2))**2+(CIZ-C(J,3))**2)
      IF (IANI.LE.0 .OR. IANJ.LE.0 .OR. I.EQ.J) GO TO 10
      IF (T .NE. ZERO) E1 = E1 + DFLOAT(IANI*IANJ)/T
C
   10 T=T*AUTOAN
      E(I,J)=T
   20 E(J,I)=T
C
      WRITE(IOUT,1050)
      CALL GBSOUT(E,E,NB,NB,NATOMS,2)
C
C     CHECK FOR SHORT BOND LENGTHS.
C
      DO 40 I=1,NATOMS
      IF (I.EQ.1 .OR. IAN(I).LE.0) GO TO 40
      M = I - 1
C
      DO 30 J=1,M
   30 IF (IAN(J).GT.0 .AND. E(I,J).LE.BLCRIT) WRITE (IOUT,1070) I, J,
     1 E(I,J)
C
   40 CONTINUE
C
      IF (IOP(10) .EQ. 0) WRITE (IOUT,1060) E1
      IF(IOP(15).NE.1)RETURN
C
C     HANDLE BOND AND DIHEDRAL ANGLE REQUESTS.
C
      CUT=THRPT5
      IF(IOP(26).NE.0)CUT=DFLOAT(IOP(26))
      IQ=1
C     TREAT BOND ANGLES FIRST.
      IPRT=0
  100 READ(IN,1010)I,J,K
      M=MAX0(I,J,K)
      IF(M.LE.0)GO TO 190
      IF(M.GT.NATOMS)GO TO 100
      MI=I
      NI=I
      MJ=J
      NJ=J
      MK=K
      NK=K
      CUTOFF=TENP5
C
C     CHECK FOR GENERAL REQUESTS.
C
      IF(I.GT.0)GO TO 110
      MI=1
      NI=NATOMS
      CUTOFF=CUT
  110 IF(J.GT.0)GO TO 120
      MJ=1
      NJ=NATOMS
      CUTOFF=CUT
  120 IF(K.GT.0)GO TO 130
      MK=1
      NK=NATOMS
      CUTOFF=CUT
  130 DO 180 I=MI,NI
      DO 180 J=MJ,NJ
      DO 180 K=MK,NK
      AI=E(J,K)
      AJ=E(I,K)
      AK=E(I,J)
C     ENSURE WE ACTUALLY HAVE A TRIANGLE.
      IF(AI.LE.TENM5.OR.AI.GT.CUTOFF)GO TO 180
      IF(AJ.LE.TENM5)GO TO 180
      IF(AK.LE.TENM5.OR.AK.GT.CUTOFF)GO TO 180
      IP(IQ)=I
      JP(IQ)=J
      KP(IQ)=K
      T=(AI*AI+AK*AK-AJ*AJ)/(TWO*AI*AK)
      IF(DABS(T).GE.ONE)T=DSIGN(ONE,T)
      IF(DABS(T).LT.TENM5)GO TO 140
      P(IQ)=DATAN(DSQRT(ONE-T*T)/T)/TORAD
      IF(T.LT.ZERO)P(IQ)=P(IQ)+F180
      GO TO 150
  140 P(IQ)=F90
  150 IQ=IQ+1
      IF(IQ.LE.5)GO TO 180
      IF(IPRT.EQ.0)WRITE(IOUT,1000)
      IPRT=1
      WRITE(IOUT,1020)(IP(L),JP(L),KP(L),P(L),L=1,5)
      IQ=1
  180 CONTINUE
      GO TO 100
  190 IQ=IQ-1
      IF(IQ.GT.0.AND.IPRT.EQ.0)WRITE(IOUT,1000)
      IF(IQ.GT.0)WRITE(IOUT,1020)(IP(L),JP(L),KP(L),P(L),L=1,IQ)
C
C     TORSION ANGLES.
C
      IPRT=0
      IQ=1
  200 READ(IN,1010)I,J,K,L
      M=MAX0(I,J,K,L)
      IF(M.GT.NATOMS)GO TO 200
      IF(M.EQ.0)GO TO 290
      MI=I
      NI=I
      MJ=J
      NJ=J
      MK=K
      NK=K
      ML=L
      NL=L
      CUTOFF=TENP5
      M=0
C
C     CHECK FOR GENERAL REQUESTS.
C
      IF(I.GT.0)GO TO 210
      MI=1
      NI=NATOMS
      M=M+1
  210 IF(J.GT.0)GO TO 220
      MJ=1
      NJ=NATOMS
      M=M+1
  220 IF(K.GT.0)GO TO 230
      MK=1
      NK=NATOMS
      M=M+1
  230 IF(L.GT.0)GO TO 240
      ML=1
      NL=NATOMS
      M=M+1
C     IGNORE GENERAL REQUESTS FOR THREE ATOMS.
  240 IF(M.GT.2)GO TO 200
      IF(M.GT.0)CUTOFF=CUT
      DO 280 I=MI,NI
      DO 280 J=MJ,NJ
      DO 280 K=MK,NK
      DO 280 L=ML,NL
      IF(I.EQ.K.OR.I.EQ.L.OR.J.EQ.L)GO TO 280
      AI=E(I,J)
      AJ=E(J,K)
      AK=E(K,L)
C     ENSURE BOND LENGTHS ARE ACCEPTABLE.
      IF(AI.LE.TENM5.OR.AI.GT.CUTOFF)GO TO 280
      IF(AJ.LE.TENM5.OR.AJ.GT.CUTOFF)GO TO 280
      IF(AK.LE.TENM5.OR.AK.GT.CUTOFF)GO TO 280
C     EVALUATE NORMALIZED PERPENDICULARS V1 = IJ X JK, AND V2 = JK X KL.
      DO 250 M=1,3
      T=C(J,M)
      A(M)=T-C(I,M)
  250 B(M)=C(K,M)-T
      CALL CROSS(V1,A,B,T)
      IF(T.LE.TENM5)GO TO 280
      A(1)=C(L,1)-C(K,1)
      A(2)=C(L,2)-C(K,2)
      A(3)=C(L,3)-C(K,3)
      CALL CROSS(V2,B,A,T)
      IF(T.LE.TENM5)GO TO 280
C     ABSOLUTE VALUE OF TORSION ANGLE IS ARCOS(V1.V2).
      T=V1(1)*V2(1)+V1(2)*V2(2)+V1(3)*V2(3)
      IF(DABS(T).GE.ONE)T=DSIGN(ONE,T)
      IF(DABS(T).LT.TENM5)GO TO 260
      P(IQ)=DATAN(DSQRT(ONE-T*T)/T)/TORAD
      IF(T.LT.ZERO)P(IQ)=P(IQ)+F180
      GO TO 265
  260 P(IQ)=F90
C     TAKE V1 X V2 - IF PARALLEL TO JK THEN TORSION ANGLE LIES BETWEEN
C     0 AND 180, IF ANTIPARALLEL THEN LIES BETWEEN 180 AND 360 DEGREES.
  265 CALL CROSS(A,V1,V2,T)
C     LOOK OUT FOR 0 OR 180 DEGREE ANGLES.
      IF(T.LE.TENM5)GO TO 270
C     NOW COMPARE A*E(J,K) WITH B.
      T=DABS((A(1)+A(2)+A(3))*AJ-(B(1)+B(2)+B(3))*AUTOAN)
      IF(T.GT.TENM5)P(IQ)=F360-P(IQ)
  270 IP(IQ)=I
      JP(IQ)=J
      KP(IQ)=K
      LP(IQ)=L
      IQ=IQ+1
      IF(IQ.LE.5)GO TO 280
      IF(IPRT.EQ.0)WRITE(IOUT,1030)
      IPRT=1
      WRITE(IOUT,1040)(IP(M),JP(M),KP(M),LP(M),P(M),M=1,5)
      IQ=1
  280 CONTINUE
      GO TO 200
  290 IQ=IQ-1
      IF(IQ.GT.0.AND.IPRT.EQ.0)WRITE(IOUT,1030)
      IF(IQ.GT.0)WRITE(IOUT,1040)(IP(M),JP(M),KP(M),LP(M),P(M),M=1,IQ)
      RETURN
      END
      SUBROUTINE CROSS(V,A,B,T)
C*
C     EVALUATE V = A X B, RETURNING !V! IN T, THEN NORMALIZING V.
C*
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C*
      DIMENSION V(3),A(3),B(3)
C*
      DATA TENM5/1.0D-5/
C*
      V(1)=A(2)*B(3)-B(2)*A(3)
      V(2)=A(3)*B(1)-B(3)*A(1)
      V(3)=A(1)*B(2)-B(1)*A(2)
      T=DSQRT(V(1)*V(1)+V(2)*V(2)+V(3)*V(3))
      IF(T.LE.TENM5)RETURN
      V(1)=V(1)/T
      V(2)=V(2)/T
      V(3)=V(3)/T
      RETURN
      END
      SUBROUTINE BORDER (INEWPG)
C*
C     --------------
C     U OF T VERSION
C     JANUARY 1987
C     --------------
C*
C     BOND ORDERS AND VALENCES:
C     I. MAYER, CHEM. PHYS. LETTERS, 97, 270 (1983),
C     CAN. J. CHEM., SPECIAL SANDORFY ISSUE (1985), AND
C     I. MAYER, INT. J. QUANTUM CHEM., 29, 477-483 (1986).
C
C     AUTHOR: JANOS ANGYAN, CHINOIN PHARMACEUTICALS, BUDAPEST, HUNGARY.
C*
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C#
C     PARAMETER (NA=#NA, NB=#NB)
C##
      PARAMETER (NA= 36, NB=200)
C###
      PARAMETER (ZERO=0.0D0, TWO=2.0D0)
C
      COMMON /A/ IOP(99)
      COMMON /A/ NATOMS,ICHARG,MULTIP,IAN(NA),NAE,NBE,NE,NBASIS,C(NA,3)
      COMMON /A/ CD(4),ICD(401)
C
      COMMON /POP1/ A(NB,NB)
      COMMON /POP2/ B(NB,NB)
      COMMON /POP3/ S(NB,NB)
      COMMON /BSINFO/ NVO(NA),IAOFF(NA)
      COMMON /IO/ IN,IOUT,IODUM(215)
C
      DIMENSION BO(NA,NA),G(NA,2),FF(NB)
C
      EQUIVALENCE (G(1,1),S(1,1)), (BO(1,1),S(1,3))
C
 1000 FORMAT('1BOND ORDER AND VALENCE INDICES ',
     1 '(I. MAYER, I.J.Q.C., 29, 477-483 (1986))'///
     2 10X,'BOND ORDER MATRIX')
 1020 FORMAT(I1,22X,'VALENCE')
 1030 FORMAT(I1,22X,'VALENCE  FREE VALENCE')
C*
      WRITE (IOUT,1000)
      KOP=IOP(9)
C     READ DENSITY MATRICES
      CALL TREAD (19,A,NB,NB,NBASIS,NBASIS,1)
      IF (KOP.NE.0) CALL TREAD (21,B,NB,NB,NBASIS,NBASIS,1)
C     READ IN OVERLAP MATRIX
      CALL TREAD (8,S,NB,NB,NBASIS,NBASIS,1)
C     NOW---
C     A   ALPHA (OR REGULAR) DENSITY MATRIX
C     B   BETA DENSITY MATRIX
C     S   OVERLAP MATRIX
C
C     CALCULATE PS MATRICES AND STORE IN A AND B (ALPHA AND BETA SPIN).
C
      CALL MAPRO1 (A,NBASIS,NBASIS,NBASIS,S,FF)
      IF (KOP .EQ. 0) GO TO 1
      CALL MAPRO1 (B,NBASIS,NBASIS,NBASIS,S,FF)
      GO TO 2
C
C     CLOSED SHELL BOND ORDERS AND VALENCES.
C
    1 I2=0
C
      DO 150 I=1,NATOMS
      NVOI=NVO(I)
      I1=I2+1
      I2=I2+NVOI
      VI=ZERO
      IF (NVOI.EQ.0) GO TO 110
C
      DO 100 K=I1,I2
      VI=VI+TWO*A(K,K)
      DO 100 L=I1,I2
  100 VI=VI-A(K,L)*A(L,K)
C
  110 G(I,1)=VI
      J2=0
C
      DO 140 J=1,I
      BIJ=ZERO
      NVOJ=NVO(J)
      IF (NVOI.EQ.0 .OR. NVOJ.EQ.0) GO TO 130
      J1=J2+1
      J2=J2+NVOJ
      DO 120 K=I1,I2
      DO 120 L=J1,J2
  120 BIJ=BIJ+A(K,L)*A(L,K)
  130 BO(I,J)=BIJ
  140 BO(J,I)=BIJ
C
  150 BO(I,I)=ZERO
C
      CALL GBSOUT (BO,FF,NA,NA,NATOMS,2)
      WRITE (IOUT,1020) INEWPG
      CALL GBSOUT (G,FF,NA,1,1,2)
      RETURN
C
C     OPEN SHELL BOND ORDERS, VALENCES AND FREE VALENCES.
C
    2 I2=0
C
      DO 250 I=1,NATOMS
      NVOI=NVO(I)
      I1=I2+1
      I2=I2+NVOI
      VI=ZERO
      IF (NVOI.EQ.0) GO TO 210
C
      DO 200 K=I1,I2
      VI=VI+TWO*(A(K,K)+B(K,K))
      DO 200 L=I1,I2
  200 VI=VI-(A(K,L)*A(L,K)+A(K,L)*B(L,K)+B(K,L)*A(L,K)+B(K,L)*B(L,K))
C
  210 G(I,1)=VI
      J2=0
C
      DO 240 J=1,I
      BIJ=ZERO
      NVOJ=NVO(J)
      IF (NVOI.EQ.0 .OR. NVOJ.EQ.0) GO TO 230
      J1=J2+1
      J2=J2+NVOJ
      DO 220 K=I1,I2
      DO 220 L=J1,J2
  220 BIJ=BIJ+A(K,L)*A(L,K)+B(K,L)*B(L,K)
  230 BO(I,J)=TWO*BIJ
  240 BO(J,I)=TWO*BIJ
C
  250 BO(I,I)=ZERO
C
      DO 270 I=1,NATOMS
      FI=G(I,1)
      DO 260 J=1,NATOMS
  260 FI=FI-BO(I,J)
  270 G(I,2)=FI
C
      CALL GBSOUT (BO,FF,NA,NA,NATOMS,2)
      WRITE (IOUT,1030) INEWPG
      CALL GBSOUT (G,FF,NA,2,2,2)
      RETURN
      END
      SUBROUTINE DQ
C*
C     --------------
C     U OF T VERSION
C     SEPTEMBER 1989
C     --------------
C*
C     EVALUATION OF ELECTRIC DIPOLE MOMENT AND MONOPOLE DECOMPOSITION.
C
C     MONOPOLE DECOMPOSITION REFERENCE:
C     W.A. SOKOLSKI AND R.A. POIRIER, CHEM. PHYS. LETT., 98, 86-92
C     (1983).
C*
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C#
C     PARAMETER (NA=#NA, NB=#NB)
C##
      PARAMETER (NA= 36, NB=200)
C###
      PARAMETER (ZERO=0.0D0)
C
      COMMON /A/ IOP(99)
      COMMON /A/ NATOMS,ICHARG,MULTIP,IAN(NA),NAE,NBE,NE,NBASIS,C(NA,3)
      COMMON /A/ ANTOAU,DCONST,CDUM(2),ICDUM(401)
C
      COMMON /POP1/ A(NB,NB)
      COMMON /POP2/ B(NB,NB)
      COMMON /POP3/ S(NB,NB)
C
      COMMON /BSINFO/ NVO(NA),IAOFF(NA)
      COMMON /GEN/ ENERGY(6),DCONV,SPIN(2),FIELD(3),FE,EMOL,ESOL,
     1 D(4),VCM
      COMMON /IO/ IN,IOUT,IODUM(215)
C
      DIMENSION AM(NA),AD(NA,3),P(4)
C
 1000 FORMAT(/'0DIPOLE MOMENT (DEBYE):'/' **********************'/)
 1010 FORMAT(/9X,'ATOMIC DECOMPOSITION OF DIPOLE (ATOMIC UNITS)'/
     1 '0ATOM',3X,'MONOPOLE',12X,'DIPOLE',15X,'TOTAL'/22X,'X',8X,'Y',8X,
     2 'Z')
 1020 FORMAT(5X,'X:',1PD14.6,10X,'Y:',D14.6,10X,'Z:',D14.6,10X,'TOTAL:'
     1 ,D14.6/)
 1030 FORMAT (' *** WARNING: THE DIPOLE MOMENT FOR CHARGED SPECIES IS',
     1 ' ONLY VALID WHEN THE CENTROID OF CHARGE IS AT THE ORIGIN. ***'/)
 1040 FORMAT(1X,I3,3X,4F9.5,2X,F9.5)
 1050 FORMAT(/'0POINT CHARGE CONTRIBUTION (DEBYE):')
C*
C     READ IN ALPHA OR CLOSED SHELL DENSITY MATRIX.
      CALL TREAD(19,A,NB,NB,NBASIS,NBASIS,1)
C     IS THIS AN OPEN SHELL CASE?
C     IF SO READ IN BETA DENSITY MATRIX
C     AND ADD IT TO THE ALPHA PART.
      IF(IOP(9).EQ.0)GO TO 30
C     OPEN SHELL.
      CALL TREAD(21,B,NB,NB,NBASIS,NBASIS,1)
      DO 20 J=1,NBASIS
      DO 20 I=J,NBASIS
      T=A(I,J)+B(I,J)
      A(I,J)=T
   20 A(J,I)=T
C     READ IN OVERLAP MATRIX.
   30 IF(IOP(13).EQ.2)CALL TREAD(8,S,NB,NB,NBASIS,NBASIS,1)
C
C     CALCULATE X Y AND Z COMPONENTS INDEPENDENTLY:
C     X INTEGRALS ON DISK FILE 34,
C     Y ON 35,
C     Z ON 36.
C
      DO 60 K=1,3
      U=ZERO
      T=ZERO
C     BRING IN INTEGRALS.
      CALL TREAD(33+K,B,NB,NB,NBASIS,NBASIS,1)
C     FORM TRACE OF PRODUCT  A*B.
      DO 40 J=1,NBASIS
      DO 40 I=1,NBASIS
   40 T=T-A(I,J)*B(I,J)
C
C     PERFORM THE DECOMPOSITION OF CHARGE DISTRIBUTION IN TERMS OF
C     ATOMIC MONOPOLES AND ATOMIC DIPOLES (W.A.SOKALSKI, JULY, 1981).
C
      IF(IOP(13).NE.2)GO TO 46
      I2=0
      DO 45 II=1,NATOMS
      I1=I2+1
      I2=I2+NVO(II)
      AD(II,K)=ZERO
      AM(II)=ZERO
      IF(IAN(II).LE.0)GO TO 45
      AN=IAN(II)
      ADI=ZERO
      AMI=ZERO
      DO 44 I=I1,I2
      DO 44 J=1,NBASIS
      AMI=AMI-A(I,J)*S(I,J)
      ADI=ADI-A(I,J)*B(I,J)
   44 CONTINUE
      AM(II)=AMI+AN
      AD(II,K)=ADI+C(II,K)*AN
   45 CONTINUE
C
C     ADD IN NUCLEAR CONTRIBUTION.
C
   46 DO 50 I=1,NATOMS
      IF(IAN(I).LE.0)GO TO 50
      AN=IAN(I)
      T=T+C(I,K)*AN
      IF (IOP(13) .EQ. 2) U=U+C(I,K)*(AN-AM(I))
   50 CONTINUE
      P(K)=U*DCONST
   60 D(K)=T*DCONST
C
C     COMPUTE TOTAL MOMENT.
C
      D(4)=DSQRT(D(1)*D(1)+D(2)*D(2)+D(3)*D(3))
      IF (IOP(13) .EQ. 3) RETURN
      WRITE(IOUT,1000)
      WRITE(IOUT,1020)D
      IF (ICHARG .NE. 0) WRITE (IOUT,1030)
C
C     COMPUTE THE POINT CHARGE CONTRIBUTION TO MOLECULAR DIPOLE
C     MOMENT.
C
      IF(IOP(13).NE.2)RETURN
      P(4)=DSQRT(P(1)*P(1)+P(2)*P(2)+P(3)*P(3))
      WRITE(IOUT,1050)
      WRITE(IOUT,1020)P
      WRITE(IOUT,1010)
      DO 70 I=1,NATOMS
      DD=DSQRT(AD(I,1)**2+AD(I,2)**2+AD(I,3)**2)
  70  WRITE(IOUT,1040)I,AM(I),AD(I,1),AD(I,2),AD(I,3),DD
      RETURN
      END
      SUBROUTINE PUNCH(NBASIS)
C*
C     SUBROUTINE TO PUNCH OUT REQUESTED MATRICES.
C
C     EACH MATRIX IS PRECEEDED BY A CARD CONTAINING
C     CODE . FILE . IX . IY . SEQ . NUMBER . ITITLE (A4,I4,2I8,2I4,10A4)
C     WHERE
C     CODE IS A 4 LETTER CODE IDENTIFYING THE MATRIX (EG. '***S'),
C     FILE IS THE FILE NUMBER FOR UNIT IMAT,
C     IX AND IY ARE THE DIMENSIONS OF THE MATRIX,
C     SEQ IS THE SEQUENCE NUMBER OF THIS MATRIX (IE. 1, 2 OR 3), AND
C     NUMBER IS THE TOTAL NUMBER OF MATRICES IN THE SET (EG. 1 FOR THE
C     OVERLAP, 3 FOR THE DIPOLE INTEGRALS, AND 1 OR 2 FOR THE
C     COEFFICIENTS DEPENDING WHETHER IT IS A CLOSED OR OPEN SHELL).
C     ITITLE IS THE FIRST 40 LETTERS OF THE TITLE CARD FOR THIS STEP.
C
C     IN ADDITION, EACH CARD OF A DECK IS SEQUENCED IN COLUMNS 73-80,
C     WITH A 2 LETTER CODE IN COLUMNS 73-74, AND A 6 DIGIT SEQUENCE
C     NUMBER IN COLUMNS 75-80.
C*
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C#
C     PARAMETER (NA=#NA, NB=#NB)
C##
      PARAMETER (NA= 36, NB=200)
C###
      PARAMETER (NA3=3*NA, NZ=NA3-6)
      PARAMETER (NBB=NB*(NB+1)/2, NBF1=NB*NB-NBB)
C
      COMMON /A/ IOP(99),IC1(7),IC2(NA),CD1(NA,3),CD2(4),IC3(401)
C
      COMMON /POP1/ A(NBB),A1(NBF1)
      COMMON /POP2/ C(NB,NB)
C
      COMMON /ZMATC/ TITLE,IELEM(NA),NAMES(NZ)
      COMMON /IO/ IN,IOUT,IPUNCH,IDUM(214)
C
      CHARACTER ID2*2,ICODE2*2,ID*4,ICODE*4
      CHARACTER TITLE*72,IELEM*4,NAMES*8
C
      DIMENSION ICODE(6),ICODE2(6),IFILE(6),NUM(6)
C
      DATA ICODE /'***S','***H','**DM','***C','***D','***F'/
      DATA ICODE2/'*S' , '*H' , 'DM' , '*C' , '*D' , '*F'/
      DATA IFILE/8,13,34,25,19,15/,NUM/1,1,3,2,2,2/
C
 1000 FORMAT('0DECK ',A4,' PUNCHED TO UNIT',I4,' FOR: ',A40)
 1010 FORMAT(T73,A2,I6,T1,6F12.7)
 1020 FORMAT(A4,I4,2I8,2I4,A40,A2,I6)
 1030 FORMAT(T73,A2,I6,T1,6F12.8)
C*
C     GET UNIT NUMBER FOR PUNCHED OUTPUT.
      IUNIT=IPUNCH
      IF(IOP(25).GT.0)IUNIT=IOP(25)
      NTT=NBASIS*(NBASIS+1)/2
      IOP9=IOP(9)
      NEIG=NBASIS
      IF(IOP9.NE.0)NEIG=NEIG+NEIG
C
C     LOOP OVER THE PUNCH OPTIONS.
C
      DO 400 L=1,6
      IF(IOP(L+18).NE.1)GO TO 400
C     GET PARTICULARS ABOUT THE FILE: CODE, FILE NUMBER, DIMENSIONS AND
C     NUMBER OF MATRICES TO PUNCH.
      ID=ICODE(L)
      ID2=ICODE2(L)
      NFILE=IFILE(L)
      N=NUM(L)
      IF(IOP9.EQ.0.AND.L.GE.4)N=1
      IF(IOP9.EQ.2.AND.L.EQ.4)N=1
      IF(IOP9.EQ.2.AND.L.EQ.6)N=1
C     INT IS THE INCREMENT BETWEEN SUCCESSIVE FILE NUMBERS IN MULTI-
C     MATRIX PUNCHES.
      INT=2
      IF(L.EQ.3)INT=1
      NCARD=0
C
      DO 300 I=1,N
C
C     LOOK FOR COEFFICIENT MATRIX PUNCH.
C
      IF(L.EQ.4)GO TO 200
C
C     READ MATRIX AND PUNCH.
C
      CALL TREAD(NFILE,A,NBB2,1,NTT,1,0)
      J=1
      NCARD=NCARD+1
      WRITE(IUNIT,1020)ID,NFILE,NTT,J,I,N,TITLE(1:40),ID2,NCARD
      KEND=0
C
  110 KSTART=KEND+1
      IF(KSTART.GT.NTT)GO TO 300
      KEND=MIN0(KEND+6,NTT)
      NCARD=NCARD+1
      WRITE(IUNIT,1010)ID2,NCARD,(A(K),K=KSTART,KEND)
      GO TO 110
C
C     COEFFICIENT PUNCH (BY MO'S) - GET EIGENVALUES IN A ON FIRST PASS.
C
  200 IF(I.EQ.1)CALL TREAD(5,A,NB+NB,1,NEIG,1,0)
      CALL TREAD(NFILE,C,NB,NB,NBASIS,NBASIS,0)
      NCARD=NCARD+1
      WRITE(IUNIT,1020)ID,NFILE,NBASIS,NBASIS,I,N,TITLE(1:40),ID2,
     1 NCARD
C
      DO 220 J=1,NBASIS
      KEND=0
C
  210 KSTART=KEND+1
      IF(KSTART.GT.NBASIS)GO TO 220
      KEND=MIN0(KEND+6,NBASIS)
      NCARD=NCARD+1
      WRITE(IUNIT,1030)ID2,NCARD,(C(K,J),K=KSTART,KEND)
      GO TO 210
  220 CONTINUE
C
      J=(I-1)*NBASIS
      KEND=0
C
  230 KSTART=KEND+1
      IF(KSTART.GT.NBASIS)GO TO 300
      KEND=MIN0(KEND+6,NBASIS)
      NCARD=NCARD+1
      WRITE(IUNIT,1010)ID2,NCARD,(A(K+J),K=KSTART,KEND)
      GO TO 230
C
  300 NFILE=NFILE+INT
      WRITE(IOUT,1000)ID,IUNIT,TITLE(1:40)
  400 CONTINUE
      RETURN
      END
      SUBROUTINE MRDCI
C*
C     THIS SUBROUTINE COPIES THE ATOM AND BASIS SET INFORMATION, S AND
C     H INTEGRALS, AND SOME MO COEFFICIENTS (EITHER FROM THE INITIAL
C     GUESS OR ANY SCF) TO UNIT 11 FOR THE MRD-CI PROGRAMS.
C
C     AUTHOR: MIKE PETERSON, U OF T CHEMISTRY DEPARTMENT, TORONTO.
C*
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C#
C     PARAMETER (NA=#NA, NB=#NB)
C##
      PARAMETER (NA= 36, NB=200)
C###
      PARAMETER (NA3=3*NA, NZ=NA3-6)
      PARAMETER (NBB=NB*(NB+1)/2, NBF1=NB*NB-NBB)
C
      COMMON /A/ IOP(99)
      COMMON /A/ NATOMS,ICHARG,MULTIP,IAN(NA),NAE,NBE,NED,NBASIS,C(NA,3)
      COMMON /A/ ANTOAU,DCONST,CDUM(2),ICDUM(401)
C
      COMMON /POP1/ A(NB,NB)
      COMMON /POP2/ B(NBB),BB(NBF1)
      COMMON /ZMATC/ TITLE,IELEM(NA),NAMES(NZ)
C
      COMMON /IO/ IN,IOUT,IODUM1(3),IMOINT,IFILE,JFILE,IODUM2(209)
C
      CHARACTER TITLE*72,IELEM*4,NAMES*8
C
 1000 FORMAT ('0MRD-CI DATA WRITTEN TO UNIT',I3)
C
      REWIND IFILE
      IF(IOP(10).EQ.0)RETURN
      NTT=(NBASIS*(NBASIS+1))/2
      WRITE(IFILE)TITLE,NATOMS,ICHARG,MULTIP,NBASIS,NAE,NBE
      WRITE(IFILE)(IAN(I),I=1,NATOMS)
      WRITE(IFILE)((C(I,J),J=1,3),I=1,NATOMS)
C     S AND H MATRICES.
      CALL TREAD(8,B,NBB,1,NTT,1,0)
      WRITE(IFILE)(B(I),I=1,NTT)
      CALL TREAD(13,B,NBB,1,NTT,1,0)
      WRITE(IFILE)(B(I),I=1,NTT)
C     MO COEFFICIENTS AND EIGENVALUES.
      CALL TREAD(25,A,NB,NB,NBASIS,NBASIS,0)
      DO 10 J=1,NBASIS
   10 WRITE(IFILE)(C(I,J),I=1,NBASIS)
      CALL TREAD(5,B,NB,1,NBASIS,1,0)
      WRITE(IFILE)(B(I),I=1,NBASIS)
      ENDFILE IFILE
      REWIND IFILE
      WRITE (IOUT,1000) IFILE
      RETURN
      END
