C     GL0711A      29 MAY 91                                         MRP
C?IBM/GLD/GBR/VAX/UNX
      SUBROUTINE GBOPT
C??
C?CDC
C     PROGRAM GBOPT
C??
C=OPTIMIZATION METHODS
C CHAPTER 11: OPTIMIZATION METHODS.
C ***********
C
C1INTRODUCTION
C     LINK 0711,  VERSION: NOVEMBER 1990.
C*
C     THIS LINK PRINTS THE ENERGY DERIVATIVES FOR THE NUCLEI AND/OR
C     BASIS SET, TRANSFORMS THEM TO NEW COORDINATE SYSTEMS, AND
C     CONTROLS THE OPTIMIZATION OF THE DESIRED PARAMETERS.
C*
C     AUTHOR: MIKE PETERSON, U OF T CHEMISTRY DEPT, TORONTO, CANADA.
C*
C1OPTIONS
C     ******************************************************************
C     OPTIONS ... IOP()
C     ******************************************************************
C     IOP(13) ... ENTRY MODE.
C     0  INITIAL ENTRY (READS VARIATION CARDS).
C     1  SUBSEQUENT ENTRIES.
C     2  RESTART OF FORCE OPTIMIZATION - THE VARIATION CARDS ARE *NOT*
C     READ, BUT THE OPTIMIZATION CONTROL CARDS ARE READ. THE HESSIAN
C     FROM DISK IS USED AUTOMATICALLY.
C
C     IOP(14) ... OPTIMIZATION METHOD.
C     0  NO OPTIMIZATION (ONLY CALCULATE FORCES).
C     1  BROYDEN-FLETCHER-GOLDFARB-SHANNO METHOD (GRADIENT).
C     2  OPTIMALLY CONDITIONED (OC) METHOD OF DAVIDON (GRADIENT).
C     3  VA05 SOLUTION OF THE GRADIENT EQUATIONS.
C     4  OPTIMALLY CONDITIONED (DOC) METHOD OF DAVIDON (NON-GRADIENT).
C     NOTE: WHILE THE BFGS, OC AND DOC METHODS WILL HANDLE #NO
C     OPTIMIZABLE PARAMETERS, THE VA05 METHOD IS LIMITED TO #NV.
C
C     IOP(15) ... OPTIMIZATION OF THE GEOMETRY.
C     0  NO.
C     1  YES.
C
C     IOP(16) ... TYPE OF COORDINATES FOR GEOMETRY OPTIMIZATION.
C     0  INTERNAL COORDINATES.
C     1  CARTESIAN COORDINATES (NO CONSTRAINTS POSSIBLE).
C
C     IOP(17) ... OPTIMIZATION OF THE BASIS SET.
C     0  NO.
C     1  YES.
C
C     IOP(18) ... READ GEOMETRY CONSTRAINTS FOR FREE FORMAT GEOMETRIES.
C     0  NO - USE CONSTRAINTS IMPLICIT IN THE Z MATRIX VARIABLES.
C     1  YES.
C
C     IOP(19) ... PUNCHING OF THE FINAL GEOMETRY.
C     0  NO.
C     1  YES, IN STANDARD FORMAT (SEE LINK 0202).
C
C     IOP(20) ... INTEGRAL ACCURACY CUTOFFS.
C     0  STANDARD CUTOFFS FOR 10**-8 INTEGRAL ACCURACY.
C     1  NO CUTOFFS USED.
C     2  USE OLD "SLOPPY" STO-3G CUTOFFS FOR 10**-6 ACCURACY.
C
C     IOP(21) ... PRINT CONTROL.
C     0  PRINT ONLY THE TOTAL DERIVATIVES.
C     1  NO PRINTING ON SUBSEQUENT ENTRIES (IOP(13)=1).
C     2  PRINT THE DERIVATIVE COMPONENTS (GEOMETRY AND/OR BASIS SET).
C
C     IOP(22) ... PRINTING OF THE B MATRIX.
C     0  NO.
C     1  YES.
C
C     IOP(23) ... INITIAL FORCE CONSTANT GUESS.
C     0  INTERNAL GUESS: FOR INTERNAL COORDINATES, USE BADGER'S RULE
C     FOR BOND STRETCHES, 1.0 FOR BOND ANGLES, 0.5 FOR TORSIONS. FOR
C     DUMMY ATOM STRETCHES, AND FOR CARTESIAN COORDINATES, USE 10.0.
C     1  READ REPLACEMENT CONSTANTS FOR BOND ANGLES, TORSIONS AND
C     CARTESIAN COORDINATES FORCE CONSTANTS,
C     IN 3F12.0 FORMAT (UNITS ARE MDYNE/ANGSTROM).
C     NOTE: FOR OPTIMIZATION RESTARTS, THIS OPTION IS IGNORED, AND
C     THE REPLACEMENT CONSTANTS CARD SHOULD NOT BE SUPPLIED.
C
C     IOP(24) ... FOR EACH SHELL (OPTIMIZED).
C     0  OPTIMIZATION OF ALL COEFFICIENTS IN THE BASIS SET OPTIMIZATION.
C     1  OMISSION OF THE FIRST COEFFICIENT, OPTIMIZATION OF THE
C        REMAINING COEFFICIENTS. (TRY AT YOUR OWN RISK!)
C
C     IOP(25) ... STRUCTURE CONTAINS A RING.
C     0  NO.
C     1  YES - SET THE BOND STRETCH INITIAL GUESS FORCE CONSTANTS TO AT
C     LEAST 7.5, THE BOND ANGLE BEND AND DIHEDRAL INITIAL GUESS
C     FORCE CONSTANTS TO 5.0, THE OC EXTRAPOLATION CONSTANT TO 3.0,
C     AND THE VA05 STEP SIZE TO 0.01 AS AN AID TO CONVERGING MOLECULES
C     CONTAINING RINGS.
C
C     IOP(26) ... USE "FAST" SPDF INTEGRAL ROUTINES.
C     0  YES, IF POSSIBLE.
C     1  NO.
C
C     IOP(27) TO IOP(60) ... NOT USED
C     ******************************************************************
C*
C1CONSTRAINTS
C1VARIATION-CARDS
C     ******************************************************************
C     INPUT FOR INITIAL ENTRY OF OPTIMIZATION RUNS.
C     ******************************************************************
C*
C     FOR OPTIMIZATION RUNS, INCLUDING OPTIMIZATION CHECK RUNS, THE
C     GEOMETRY AND BASIS SET VARIATION CARDS ARE READ IN.
C     FOR RESTART RUNS, THE VARIATION CARDS ARE NOT READ IN, NOR ARE
C     REPLACEMENT FORCE CONSTANTS (SEE IOP(23)).
C*
C2GEOMETRY
C     GEOMETRY OPTIMIZATION.
C*
C     FOR INTERNAL COORDINATES, THE GEOMETRY VARIATION CARDS PERMITTED
C     ARE DESCRIBED IN DETAIL IN VGEOM (LINK 0202). THE MAJOR
C     DIFFERENCE IS THAT PARAMETERS *NOT* SPECIFIED ARE OPTIMIZED
C     AUTOMATICALLY, WHILE AN INCREMENT OF 0.0 IS ALLOWED TO HOLD A
C     PARAMETER (OR SET OF PARAMETERS) FIXED. SEVERAL PARAMETERS MAY BE
C     OPTIMIZED TOGETHER AS A SET: THE GRADIENT COMPONENTS ARE SIMPLY
C     ADDED (AFTER MULTIPLICATION BY THE INCREMENT), AND THE NET FORCE
C     CONSTANT IS THE SUM OF THE INDIVIDUAL FORCE CONSTANTS WEIGHTED
C     BY THE SQUARE OF THE RESPECTIVE INCREMENTS. THE FIRST INCREMENT
C     IS ALWAYS SET TO 1.0, AND THE OTHER INCREMENTS SCALED FROM THAT.
C     THE GEOMETRY PARAMETERS ARE DEFINED IN THE ORDER USED BY THE Z
C     MATRIX: BOND LENGTHS, THEN ALPHA ANGLES, THEN BETA ANGLES.
C     A SET OF PARAMETERS WILL BE REFERENCED BY THE NUMBER OF THE
C     FIRST PARAMETER OF THE SET.
C     SEVERAL PRECAUTIONS CONCERNING LINEAR BOND ANGLES HAVE BEEN
C     TAKEN, AND MOST LINEAR GEOMETRIES SHOULD BE HANDLED PROPERLY.
C     HOWEVER, A CHECK RUN (WHICH CHECKS THE TRANSFORMATION FROM
C     CARTESIAN TO INTERNAL COORDINATES) IS *ALWAYS* RECOMMENDED.
C     THE LIST OF GEOMETRY VARIATION CARDS IS FOLLOWED BY A BLANK CARD.
C     NO VARIATION CARDS ARE READ IF THE GEOMETRY IS NOT OPTIMIZED.
C
C     FOR FREE FORMAT Z MATRIX RUNS, THE DEFAULT MODE IS TO APPLY THE
C     CONSTRAINTS IMPLICITLY GIVEN BY THE VARIABLES USED IN THE Z
C     MATRIX: Z MATRIX PARAMETERS USING THE SAME VARIABLE ARE
C     CONSTRAINED TO BE OPTIMIZED TOGETHER, PARAMETERS DEFINED BY
C     CONSTANTS ARE FIXED. CONSTRAINT CARDS ARE READ ONLY IF NO
C     VARIABLES WERE USED, OR IF GOPT=READ WAS SPECIFIED ON THE *MOL
C     CARD.
C*
C     FOR CARTESIAN COORDINATES, NO CONSTRAINTS ARE POSSIBLE, AND NO
C     VARIATION CARDS ARE READ.
C*
C2BASIS-SET
C     BASIS SET OPTIMIZATION.
C*
C     FOR BASIS SET OPTIMIZATION, THERE ARE TWO TYPES OF VARIATION CARDS
C     1  A CARD IN 15I2 FORMAT IS READ, GIVING THE CENTER NUMBER(S) TO
C     BE OPTIMIZED (TOGETHER). NOTE THAT THE BASIS SETS FOR ALL CENTERS
C     ON THIS CARD MUST BE *IDENTICAL* IN ALL RESPECTS - TYPE, SCALE
C     FACTOR, EXPONENTS, COEFFICIENTS - ELSE YOU ARE IN BIG TROUBLE.
C     2  AFTER THE CENTERS CARD, THERE IS A SET OF CARDS, ONE FOR EACH
C     SHELL ON THE CENTER(S), IN 4I2 FORMAT. THE FOUR VALUES ON EACH
C     CARD REFER TO THE SCALE FACTOR, THE EXPONENTS, THE S/D/F
C     COEFFICIENTS, AND THE P COEFFICIENTS. A 0 WILL CAUSE THAT
C     PARAMETER TO BE OPTIMIZED, WHILE A 1 WILL HOLD IT FIXED. THUS
C     ' 0 0 0 0' OPTIMIZES ALL PARAMETERS FOR THIS SHELL, AND ' 0 0 1 1'
C     OPTIMIZES ONLY THE SCALE FACTOR AND THE EXPONENTS.
C     THE S/D/F COEFFICIENT VALUE IS IGNORED FOR PURE P SHELLS, AND THE
C     P COEFFICIENT VALUE IS USED ONLY FOR SP OR P SHELLS.
C*
C     THE BASIS SET PARAMETERS ARE NUMBERED IN THE ORDER GIVEN BY THE
C     CENTERS CARDS, AND WITHIN A SET OF CENTERS, BY SHELLS. WITHIN A
C     SHELL, THE ORDER IS SCALE FACTOR, THEN BY PRIMITIVES (EXPONENT,
C     S/D/F COEFFICIENT, P COEFFICIENT).
C*
C     ANY CENTERS NOT SPECIFIED ON A CENTERS CARD ARE HELD FIXED.
C     DUMMY ATOMS MAY NOT BE OPTIMIZED. TERMINATE THE LIST OF BASIS SET
C     VARIATION CARDS WITH A BLANK CARD. NO VARIATION CARDS ARE READ IF
C     THE BASIS SET IS NOT OPTIMIZED.
C*
C1CONSTRAINTS
C1VARIATION-CARDS
C     INPUT ORDER.
C*
C     1  GEOMETRY VARIATION CARDS, IF REQUIRED.
C     2  BASIS SET VARIATION CARDS, IF REQUIRED.
C     3  REPLACEMENT DIAGONAL FORCE CONSTANTS, IF IOP(23)=1.
C     4  DATA REQUIRED BY THE PARTICULAR OPTIMIZATION METHOD (SEE THE
C     INDIVIDUAL PROGRAMS FOR DETAILS).
C==
C*
C/
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C#
C     PARAMETER (NA=#NA)
C     PARAMETER (NS=#NS, NP=#NP)
C     PARAMETER (NO=#NO)
C##
      PARAMETER (NA= 36)
      PARAMETER (NS=120, NP=300)
      PARAMETER (NO=125)
C###
      PARAMETER (NA3=3*NA, NZ=NA3-6)
      PARAMETER (ZERO=0.0D0)
C
      INTEGER SHELLA,SHELLN,SHELLT,SHELLC,AOS
C
      COMMON /A/ IOP(99)
      COMMON /A/ NATOMS,ICHARG,MULTIP,IAN(NA),NAE,NBE,NE,NBASIS,C(NA,3)
      COMMON /A/ ANTOAU,DCONST,FCONV,FCCONV,ICDUM(401)
C
      COMMON/B/IXYZ(NS),SHELLA(NS),SHELLN(NS),SHELLT(NS),
     1 SHELLC(NS),AOS(NS),NSHELL,MAXTYP,EXX(NP),C1(NP),C2(NP)
      COMMON/C711A/FSCALE(NS),
     1 SCALE(NS),C1S(NP),C2S(NP)
      COMMON/C711B/B(NA3,NA3)
      COMMON/C711C/IGOPT(NZ),CGOPT(NZ),IBOPT(5,NS),PARSET(NO),
     1 PARGRD(NO)
      COMMON/ZMAT/IZ(NA,4),BL(NA),ALPHA(NA),BETA(NA),
     1 IPAR(15,3),NIPAR(3),NPAR,NSTEP,DX(3),NUM,NUMB,
     2 LABELS(NA,3),IZMASS(NA),ZMASS(NA)
      COMMON/ZMATC/TITLE,IELEM(NA),NAMES(NZ)
      COMMON/IO/IN,IOUT,IPUNCH,IODUM(14),NFILE(100,2)
C
      CHARACTER TITLE*72, IELEM*4, NAMES*8
C
      DIMENSION RESTRT(NA3,2)
C
      EQUIVALENCE (RESTRT(1,1),PARSET(1)), (IGOPT(1),GOPT),
     1 (IXYZ(1),XYZ)
C*
      DATA F180/180.0D0/
      DATA PI/3.14159265358979D0/
C*
 1000 FORMAT('***Z',A68,'*Z     0')
 1010 FORMAT(/'0Z MATRIX PUNCHED TO UNIT',I4)
 1030 FORMAT(2I4,F14.7,2(I4,F14.5),I4,T73,'*Z',I6)
 1040 FORMAT('1NEW INTERNAL COORDINATES FOR: ',A72/)
C*
C     PRINT DERIVATIVES, AND TRANSFORM TO INTERNAL COORDINATES.
      CALL GBPRNT(NZZ)
      IF(IOP(1).LT.0.OR.IOP(14).EQ.0)RETURN
C     SET NUMBER OF PARAMETERS TO OPTIMIZE.
      NPOPT=0
      IF(IOP(13).EQ.0)GO TO 10
      CALL TREAD(1,GOPT,NFILE(1,1),1,NFILE(1,1),1,0)
      NPOPT=IDINT(RESTRT(1,2))
      IF(IOP(13).EQ.1.OR.IOP(5).NE.0)GO TO 10
C     CHECK FOR RESTART WITH FREE FORMAT INPUT, WHERE THE CONSTRAINTS
C     USED IN THE PREVIOUS JOB DO NOT PERMIT FREE FORMAT OUTPUT.
      IF(RESTRT(2,2).NE.ZERO)IOP(5)=1
   10 CALL GBSET(NPOPT,NZZ)
      IF(IOP(1).LT.0)RETURN
C     BRANCH TO OPTIMIZATION TECHNIQUE.
      I=IOP(14)
      GO TO (210,220,230,240),I
  210 CALL BFGS(NPOPT,IOP)
      GO TO 300
  220 CALL OC(NPOPT,IOP,FCCONV)
      GO TO 300
  230 CALL VA05MP(NPOPT,IOP)
      GO TO 300
  240 CALL DOC(NPOPT,IOP)
  300 IF(IOP(10).EQ.0)GO TO 500
      IF(IOP(1).EQ.0)GO TO 305
C     PRINT FINAL DERIVATIVES IF OPTIMIZATION TERMINATED.
      CALL FINALD(NZZ)
      IF(IOP(1).GT.0)GO TO 420
C     PRINT FINAL BASIS SET IF OPTIMIZED.
      IF(IOP(17).EQ.1)IOP(1)=-3
C     FISH OUT THE NEW PARAMETERS.
  305 IF(IOP(15).EQ.0)GO TO 420
C     GEOMETRY.
      IF(IOP(16).EQ.0)GO TO 320
C     CARTESIANS.
      K=0
      DO 310 I=1,NATOMS
      DO 310 J=1,3
      K=K+1
  310 C(I,J)=PARSET(K)
      GO TO 415
C     INTERNAL COORDINATES - THIS IS COMPLICATED BY THE POSSIBILITY
C     OF CONSTRAINED OPTIMIZATION - GET THE CHANGES OF EACH
C     OPTIMIZED PARAMETER INTO PARGRD, THEN UPDATE EACH Z MATRIX
C     PARAMETER BY THE PROPER MULTIPLE OF THOSE CHANGES.
  320 TODEG=F180/PI
      K=NATOMS+NATOMS-3
      DO 360 I=1,NZZ
      J=IGOPT(I)
      IF(J.LE.0)GO TO 360
      IF(I.GE.NATOMS)GO TO 330
C     BOND LENGTH.
      T=PARSET(J)-BL(I+1)
      GO TO 350
C     BOND ANGLE (ALPHA).
  330 IF(I.GT.K)GO TO 340
      N2=I-NATOMS+3
      T=PARSET(J)*TODEG-ALPHA(N2)
      GO TO 350
C     TORSION ANGLE (BETA).
  340 N2=I-K+3
      T=PARSET(J)*TODEG-BETA(N2)
  350 PARGRD(J)=T/CGOPT(I)
  360 CONTINUE
C     NOW UPDATE THE Z MATRIX.
      DO 410 I=1,NZZ
      J=IGOPT(I)
      IF(J)370,410,380
  370 J=IGOPT(-J)
C     BOND LENGTH.
  380 IF(I.GE.NATOMS)GO TO 390
      BL(I+1)=BL(I+1)+CGOPT(I)*PARGRD(J)
      GO TO 410
C     BOND ANGLE (ALPHA).
  390 IF(I.GT.K)GO TO 400
      N2=I-NATOMS+3
      ALPHA(N2)=ALPHA(N2)+CGOPT(I)*PARGRD(J)
      GO TO 410
C     BOND ANGLE (BETA).
  400 N2=I-K+3
      BETA(N2)=BETA(N2)+CGOPT(I)*PARGRD(J)
  410 CONTINUE
  415 IF(IOP(21).NE.1)WRITE(IOUT,1040)TITLE
      CALL BUILDZ
      IF(IOP(5).EQ.0 .AND. IOP(1).NE.0)CALL ZPRINT
C     BASIS SET.
  420 IF(IOP(17).EQ.0)GO TO 490
      DO 460 I=1,NSHELL
      IB=IBOPT(5,I)-1
      IF(IBOPT(1,I).NE.0)GO TO 430
C     SCALE FACTOR.
      IB=IB+1
      SCALE(I)=DEXP(PARSET(IB))
  430 IA=IBOPT(2,I)
      IC1=IBOPT(3,I)
      IC2=IBOPT(4,I)
      T=SCALE(I)*SCALE(I)
      N1=SHELLA(I)
      N2=N1+SHELLN(I)-1
      DO 460 J=N1,N2
C     EXPONENT - RESCALE ALL EXPONENTS.
      IF(IA.NE.0)GO TO 440
      IB=IB+1
      EXX(J)=DEXP(PARSET(IB))
  440 EXX(J)=T*EXX(J)
C     C1 COEFFICENT.
      IF(IC1.NE.0)GO TO 450
      IF(J.EQ.N1 .AND. IOP(24).NE.0)GO TO 450
      IB=IB+1
      C1S(J)=PARSET(IB)
C     C2 COEFFICIENT.
  450 IF(IC2.NE.0)GO TO 460
      IF(J.EQ.N1 .AND. IOP(24).NE.0)GO TO 460
      IB=IB+1
      C2S(J)=PARSET(IB)
  460 CONTINUE
      CALL TWRITE(6,XYZ,NFILE(6,1),1,NFILE(6,1),1,0)
      CALL TWRITE(2,SCALE,NFILE(2,1),1,NFILE(2,1),1,0)
C     PREPARE FOR A RESTART - COPY C, BL, ALPHA AND BETA INTO RESTRT.
  490 K=0
      DO 600 J=1,3
      DO 600 I=1,NATOMS
      K=K+1
  600 RESTRT(K,1)=C(I,J)
      IF(IOP(5).GE.2)GO TO 620
      K = 0
      DO 610 I=1,NATOMS
      K=K+1
      RESTRT(K,2)=BL(I)
      K=K+1
      RESTRT(K,2)=ALPHA(I)
      K=K+1
  610 RESTRT(K,2)=BETA(I)
C     SAVE IN FILE 1.
C     SAVE NUMBER OF PARAMETERS IN BL(1) SLOT.
  620 RESTRT(1,2)=DFLOAT(NPOPT)
C     SAVE GEOMETRY TYPE IN ALPHA(1) SLOT.
      RESTRT(2,2)=DFLOAT(IOP(5))
      CALL TWRITE(1,GOPT,NFILE(1,1),1,NFILE(1,1),1,0)
      IF(IOP(1))525,630,520
  630 RETURN
C     RESTORE THE CARTESIAN COORDINATES TO BOHR.
  500 IF(IOP(15).EQ.0)RETURN
      DO 510 J=1,3
      DO 510 I=1,NATOMS
  510 C(I,J)=C(I,J)*ANTOAU
      RETURN
C     OPTIMIZATION CONVERGED - PRINT FINAL PARAMETERS.
C     WATCH FOR CONVERGENCE ON FIRST ENTRY.
  520 IF(IOP(13).NE.1)IOP(1)=2
      IF(IOP(15).EQ.0)RETURN
      WRITE(IOUT,1040) TITLE
      CALL BUILDZ
      IF(IOP(5).EQ.0)CALL ZPRINT
  525 IF(IOP(15).EQ.0.OR.IOP(16).EQ.1.OR.IOP(19).EQ.0)RETURN
C     PUNCH FINAL Z MATRIX.
      WRITE(IPUNCH,1000)TITLE(1:68)
      DO 530 I=1,NATOMS
  530 WRITE(IPUNCH,1030)IAN(I),IZ(I,1),BL(I),IZ(I,2),ALPHA(I),IZ(I,3),
     1 BETA(I),IZ(I,4),I
      WRITE(IPUNCH,1030)
      IF(IOP(5).EQ.0)CALL ZPUNCH
      WRITE(IOUT,1010)IPUNCH
      RETURN
      END
      SUBROUTINE GBPRNT(NZZ)
C*
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C#
C     PARAMETER (NA=#NA, NB=#NB)
C     PARAMETER (NS=#NS, NP=#NP)
C##
      PARAMETER (NA= 36, NB=200)
      PARAMETER (NS=120, NP=300)
C###
      PARAMETER (NA3=3*NA, NZ=NA3-6, NFOR=8+6*NA3+6*NP)
      PARAMETER (ZERO=0.0D0, ONE=1.0D0)
C
      INTEGER SHELLA,SHELLN,SHELLT,SHELLC,AOS
C
      COMMON /A/ IOP(99)
      COMMON /A/ NATOMS,ICHARG,MULTIP,IAN(NA),NAE,NBE,NE,NBASIS,C(NA,3)
      COMMON /A/ ANTOAU,DCONST,FCONV,FCCONV,ICDUM(401)
C
      COMMON/B/IXYZ(NS),SHELLA(NS),SHELLN(NS),SHELLT(NS),
     1 SHELLC(NS),AOS(NS),NSHELL,MAXTYP,EXX(NP),C1(NP),C2(NP)
      COMMON/C711A/FSCALE(NS),
     1 SCALE(NS),C1S(NP),C2S(NP)
      COMMON/C711B/B(NA3,NA3)
      COMMON/C711D/SAVIMO(4),TXX,VNEXX,VEEXX,VNNXX,FN(NA3,6),
     1 FBEXX(NP,2),FBC1(NP,2),FBC2(NP,2)
      COMMON/ZMAT/IZ(NA,4),BL(NA),ALPHA(NA),BETA(NA),
     1 IPAR(15,3),NIPAR(3),NPAR,NSTEP,DX(3),NUM,NUMB,
     2 LABELS(NA,3),IZMASS(NA),ZMASS(NA)
      COMMON /BSINFC/ NSH(NB), LAO(NB), LABEL(NS), LSHELL(NS),
     1 BLABEL
      COMMON/GEN/E1,E2,EDUM(11),EMOL,ESOL,DPOLE(4),VCM
      COMMON/IO/IN,IOUT,IODUM(15),NFILE(100,2)
C
      CHARACTER NSH*2, LAO*4, LABEL*4, LSHELL*2, IEL*2, BLABEL*200
C
      DIMENSION IEL(56), FOUT(7), BOUT(6), COUT(5), A(3)
      DIMENSION BB(NA3), IR(NA3), IC(NA3)
C
      EQUIVALENCE (FOUT(1),BOUT(1),COUT(1),A(1))
      EQUIVALENCE (BB(1),FN(1,4)), (IR(1),FN(1,5)), (IC(1),FN(1,6))
C
      DATA TORAD/1.74532925199433D-2/
      DATA IEL/' H' , 'HE' , 'LI' , 'BE' , ' B' , ' C' , ' N' , ' O',
     1  ' F' , 'NE' , 'NA' , 'MG' , 'AL' , 'SI' , ' P' , ' S' , 'CL',
     2  'AR' , ' K' , 'CA' , 'SC' , 'TI' , ' V' , 'CR' , 'MN' , 'FE',
     3  'CO' , 'NI' , 'CU' , 'ZN' , 'GA' , 'GE' , 'AS' , 'SE' , 'BR',
     4  'KR' , 'RB' , 'SR' , ' Y' , 'ZR' , 'NB' , 'MO' , 'TC' , 'RU',
     5  'RH' , 'PD' , 'AG' , 'CD' , 'IN' , 'SN' , 'SB' , 'TE' , ' I',
     6  'XE' , ' X' , 'BQ'/
C*
 1000 FORMAT('1ENERGY TERMS:'/'0KINETIC:',F17.9/' V (NE) :',F17.9
     1 /' V (EE) :',F17.9/' NUCLEAR:',F17.9/10X,16('-')/' TOTAL  :',
     2 F17.9//'0ATOMIC POSITION DERIVATIVE COMPONENTS (MDYNE)'/
     3 '0CENTER',15X,
     4 'VNE(OPR)',9X,'VNE(WFN)',10X,'T(WFN)',10X,'VEE(WFN)',10X,
     5 'COEF',12X,'NUCLEAR',11X,'TOTAL')
 1010 FORMAT('0',I2,2X,A2,'     X',7F17.7)
 1020 FORMAT(12X,'Y',7F17.7)
 1030 FORMAT(12X,'Z',7F17.7)
 1040 FORMAT('1BASIS SET DERIVATIVE COMPONENTS (FOR NORMALIZED COEFS)'
     1 //'0CENTER   SHELL',8X,'EXX (1E)',7X,'EXX (2E)',11X,'C1 (1E)',
     2 8X,'C1 (2E)',12X,'C2 (1E)',8X,'C2 (2E)')
 1050 FORMAT('0',I2,2X,A2)
 1060 FORMAT(10X,A2,A4)
 1070 FORMAT(14X,3(1PD19.6,D15.6))
 1080 FORMAT('1INTERNAL COORDINATE DERIVATIVES (MDYNE OR MDYNE-ANGSTROM'
     1 ,'/RADIAN)'//'0  I   AN   Z1     BL',18X,'Z2      ALPHA',16X,
     2 'Z3      BETA',17X,'Z4'/)
 1090 FORMAT(1X,I3,2I5,F11.6,'   (',I3,')   ',I5,F13.6,'   (',I3,')   ',
     1 I5,F13.6,'   (',I3,')   ',I5)
 1100 FORMAT('1CARTESIAN COORDINATE DERIVATIVES IN MDYNE'//'0  I   AN',
     1 12X,'X',16X,'Y',16X,'Z'/)
 1110 FORMAT(1X,I3,I5,3F17.6)
 1120 FORMAT('1BASIS SET DERIVATIVES (IN LOG SPACE FOR SCALE FACTORS ',
     1 'AND EXPONENTS, OR FOR RAW COEFFICIENTS)'//'0CENTER   TYPE    ',
     2 'SCALE FACTOR',4X,'EXPONENT',8X,'S COEF',9X,'P COEF',9X,'D COEF',
     3 9X,'F COEF'/)
 1130 FORMAT(10X,A2,A4,F13.6)
 1140 FORMAT(31X,1PD14.7,4D15.7)
 1150 FORMAT('0AN ATOM HAS NO INTERNAL COORDINATES - USE CARTESIAN ',
     1 'COORDINATES')
 1160 FORMAT('0ERROR IN G MATRIX INVERSION NOT FATAL - USING ',
     1 'CARTESIAN COORDINATES INSTEAD')
 1170 FORMAT(/'0FINAL DERIVATIVES ...')
 1180 FORMAT(/'0FINAL PARAMETERS ...')
 1190 FORMAT('1B MATRIX (INTERNAL X CARTESIAN COORDINATES)'//)
 1200 FORMAT('0ERROR DEFINING B MATRIX FOR INTERNAL COORDINATE',I4)
 1210 FORMAT(/'0DERIVATIVES AT LAST POINT CALCULATED ...')
 1220 FORMAT(/'0PARAMETERS FOR BEST POINT FOUND SO FAR ...')
 1230 FORMAT ('0ENERGY COMPONENTS:   NUCLEAR:',F17.9,',   ELECTRONIC:',
     1 F17.9)
 1240 FORMAT ('0SCRFT ENERGIES:   EMOL:',F17.9,',   ESOL:',F17.9/
     1 ' DIPOLE MOMENT:   (X)',1PD13.5,'   (Y)',D13.5,'   (Z)',
     1 D13.5,'   (TOTAL)',D13.5,'  DEBYES')
 1250 FORMAT (I1,'*** WARNING: FORCE CONSTANT EVALUATION INVOLVING ',
     1 'LINEAR BEND (ATOMS',I4,2(' -',I3),') IS INVALID -'/
     2 ' REDEFINE THE Z MATRIX TO AVOID THE USE OF LINEAR BOND ANGLES.')
 1260 FORMAT ('0GRADIENT LENGTH OVER ALL INTERNAL COORDINATES ',
     1 '(NO CONSTRAINTS):',1PD13.5/
     2 ' LARGEST (ABSOLUTE) GRADIENT COMPONENT:',0PF13.6/)
C*
      CALL TREAD(2,SCALE,NFILE(2,1),1,NFILE(2,1),1,0)
C
C     CONVERT C TO ANGSTROMS.
C
      T=ONE/ANTOAU
      DO 1 J=1,3
      DO 1 I=1,NATOMS
    1 C(I,J)=C(I,J)*T
C
C     SET NORMAL ENTRY FLAG.
C
      IENTRY=0
      ICHK=0
      IF(IOP(10).EQ.0)ICHK=1
C
C     WATCH FOR DERIVATIVE-FREE OPTIMIZATION METHODS.
C
      IGRAD=IOP(61)+IOP(62)
      IF(IGRAD.EQ.0)ICHK=1
      IF(ICHK.EQ.0)GO TO 5
      IZPRNT=0
      IBPRNT=0
      K=3*NATOMS
      DO 2 I=1,K
      FN(I,1)=ZERO
    2 FN(I,3)=ZERO
      DO 3 I=1,NP
      FBEXX(I,1)=ZERO
      FBC1(I,1)=ZERO
    3 FBC2(I,1)=ZERO
      DO 4 I=1,NSHELL
    4 FSCALE(I)=ZERO
      GO TO 85
C
C     SET PRINT FLAGS: 0 FOR NONE, 1 FOR TOTALS ONLY, 2 FOR COMPONENTS.
C
    5 IZPRNT=IOP(15)
      IBPRNT=IOP(17)
      IF(IOP(21)-1)6,7,8
    6 IF(IOP(13).EQ.1)GO TO 9
      IZPRNT=1
      IBPRNT=1
      GO TO 9
C
    7 I=1
      IF(IOP(13).EQ.1)I=0
      IZPRNT=I
      IBPRNT=I
      GO TO 9
C
    8 IZPRNT=2
      IBPRNT=2
C
C     DO NOT PRINT BASIS SET GRADIENT IF NOT CALCULATED.
C
    9 IF(IOP(61).EQ.0)IBPRNT=0
C
C     RECOVER GRADIENT FROM DISK.
C
      CALL TREAD(14,SAVIMO,NFILE(14,1),1,NFILE(14,1),1,0)
C
C     COLLECT TOTAL DERIVATIVE IN FIRST COLUMN OF RESPECTIVE ARRAYS.
C
      T=TXX+VNEXX+VEEXX+VNNXX
      IF(IZPRNT.EQ.2)WRITE(IOUT,1000)TXX,VNEXX,VEEXX,VNNXX,T
C*
C     GEOMETRY DERIVATIVES.
C*
      K=0
C
      DO 80 I=1,NATOMS
      IA=IAN(I)
      IF(IA)10,20,30
   10 IA=56
      GO TO 30
C
   20 IA=55
C
   30 DO 80 J=1,3
      K=K+1
      T=ZERO
      DO 40 L=1,6
      TT=FN(K,L)*FCONV
      FOUT(L)=TT
   40 T=T+TT
      IF(IZPRNT.NE.2)GO TO 80
      FOUT(7)=T
      IF(J-2)50,60,70
   50 WRITE(IOUT,1010)I,IEL(IA),FOUT
      GO TO 80
C
   60 WRITE(IOUT,1020)FOUT
      GO TO 80
C
   70 WRITE(IOUT,1030)FOUT
   80 FN(K,1)=T
C
   85 IF(IOP(15).EQ.0 .AND. IOP(17).EQ.1 .AND. NATOMS.EQ.1)IOP(16)=1
      IF(IOP(16).EQ.0)GO TO 520
C
C     CARTESIAN COORDINATES.
C
   86 IF(IZPRNT.EQ.0)GO TO 90
      WRITE(IOUT,1100)
      N2=0
      DO 500 I=1,NATOMS
      N1=N2+1
      N2=N2+3
  500 WRITE(IOUT,1110)I,IAN(I),(FN(J,1),J=N1,N2)
      GO TO 90
C
C     INTERNAL COORDINATES: SET UP THE B MATRIX.
C     THE B MATRIX ELEMENTS ARE AS DEFINED IN D.F. MCINTOSH,
C     K. MICHAELIAN AND M.R. PETERSON, CAN. J. CHEM., 56, 1289 (1978).
C     THE PROGRAMS BOST, BEND, TORS AND LIBE ARE ESSENTIALLY THOSE OF
C     QCPE PROGRAM 342, BY D.F. MCINTOSH AND M.R. PETERSON.
C
  520 IF(NATOMS.GT.1)GO TO 525
      WRITE(IOUT,1150)
      IF(IOP(15).EQ.1)IOP(1)=-2
      IOP(16)=1
      GO TO 86
C
  525 K=3*NATOMS
      NZZ=K-6
      IF(NATOMS.EQ.2)NZZ=1
      IF(IGRAD.EQ.0)GO TO 480
      IF(IENTRY.NE.0)GO TO 670
      INEWPG = 1
      DO 530 J=1,K
      DO 530 I=1,NZZ
  530 B(I,J)=ZERO
C
      DO 590 I=2,NATOMS
C
C     BOND STRETCH.
C
      N1=IZ(I,1)
      NOB=I-1
      CALL BOST(NOB,N1,I,C)
      IF(I.EQ.2)GO TO 590
C
C     BOND ANGLE 1.
C
      N2=IZ(I,2)
      N3=IZ(I,3)
      N4=IZ(I,4)
      NOB=NATOMS+I-3
      IER=0
      CALL BEND(NOB,N2,N1,I,C,IER)
      IF(IER.NE.0)GO TO 535
C
C     ENSURE ALPHA ANGLE LIES BETWEEN 0 AND 180 DEGREES.
C
C     IF NOT, REVERSE B MATRIX ELEMENTS.
      IF(DSIN(ALPHA(I)*TORAD).GE.ZERO)GO TO 570
      DO 532 J=1,K
  532 B(NOB,J)=-B(NOB,J)
      GO TO 570
C
C     BOND ANGLE IS LINEAR - USE LINEAR BEND.
C     USE ATOM N3 AS REFERENCE.
C     WATCH OUT IN CASE N3 WAS NOT SPECIFIED.
C
  535 IF(N3.EQ.0)GO TO 540
      A(1)=C(N3,1)
      A(2)=C(N3,2)
      A(3)=C(N3,3)
      GO TO 550
C
C     N3 WAS NOT SPECIFIED - USE X AXIS IF THIS IS A 3 ATOM MOLECULE.
C
  540 IF(NATOMS.NE.3)GO TO 560
      A(1)=ONE
      A(2)=ZERO
      A(3)=ZERO
  550 IER=0
C
C     USE IN-PLANE COMPONENT FOR TORSIONS, OUT-OF-PLANE COMPONENT FOR
C     EULER ANGLE SPECIFICATION OF THE GEOMETRY.
C
      J=1
      IF(IABS(N4).EQ.1)J=2
      CALL LIBE(NOB,N2,N1,I,C,A,J,IER)
      IF(IER.EQ.0)GO TO 570
C
C     ERROR DEFINING AN INTERNAL COORDINATE.
C
  560 WRITE(IOUT,1200)NOB
      IOP(1)=-2
      RETURN
C
  570 IF(I.EQ.3)GO TO 590
      IF(N3.EQ.0)GO TO 560
      NOB=NOB+NATOMS-3
      IF(N4.NE.0)GO TO 580
C
C     TORSION.
C
      CALL TORS(NOB,I,N1,N2,N3,C,IER)
      IF(IER)560,590,575
C
C     TORSION WAS LINEAR - GET PERPENDICULAR LINEAR BEND.
C
  575 A(1)=C(N3,1)
      A(2)=C(N3,2)
      A(3)=C(N3,3)
      IER=0
      CALL LIBE(NOB,N2,N1,I,C,A,2,IER)
      IF (IOP(13).NE.1 .AND. IOP(14).EQ.3 .AND. IOP(15).EQ.1) THEN
         WRITE (IOUT,1250) INEWPG, I, N2, N3
         INEWPG = 0
      END IF
      IF(IER.NE.0)GO TO 560
      GO TO 590
C
C     SECOND EULER ANGLE.
C
  580 IF(IABS(N4).NE.1)GO TO 560
      CALL BEND(NOB,N3,N1,I,C,IER)
      IF(IER.EQ.0)GO TO 590
C
C     EULER ANGLE WAS LINEAR - USE LINEAR BEND (PERPENDICULAR COMP).
C
      A(1)=C(N2,1)
      A(2)=C(N2,2)
      A(3)=C(N2,3)
      IER=0
      CALL LIBE(NOB,N3,N1,I,C,A,2,IER)
      IF(IER.NE.0)GO TO 560
  590 CONTINUE
C
      IF(IOP(22).EQ.0)GO TO 600
      WRITE(IOUT,1190)
      CALL MATOUT(B,NA3,NA3,NZZ,K)
C
C     FORM ((BB')**-1) * B * FN.
C     SAVE B * FN IN COLUMN 2 OF FN.
C
  600 DO 630 I=1,NZZ
      T=ZERO
      DO 610 J=1,K
      BB(J)=B(I,J)
  610 T=T+BB(J)*FN(J,1)
      FN(I,2)=T
C     ACCUMULATE ANOTHER ROW OF G = BB'.
      DO 630 J=I,NZZ
      T=ZERO
      DO 620 L=1,K
  620 T=T+BB(L)*B(J,L)
  630 B(I,J)=T
C
      DO 640 I=1,NZZ
      DO 640 J=1,I
  640 B(I,J)=B(J,I)
C
      CALL INVERT(NZZ,IER,IR,IC)
      IF(IER.EQ.0)GO TO 645
C     ERROR IN G MATRIX INVERSION NOT FATAL UNLESS GOPT SPECIFIED.
      IF(IOP(15).EQ.1)GO TO 200
      WRITE(IOUT,1160)
      GO TO 86
C
C     ACCUMULATE FINAL FORCES IN COLUMN 3 OF FN.
C
  645 DO 660 I=1,NZZ
      T=ZERO
      DO 650 J=1,NZZ
  650 T=T+B(I,J)*FN(J,2)
  660 FN(I,3)=T
C
  670 IF(IZPRNT.EQ.0)GO TO 90
C
      WRITE(IOUT,1080)
      I=1
      WRITE(IOUT,1090)I,IAN(1)
C
      I=2
      N1=1
      GLTOT = FN(1,3)**2
      GBIG = DABS(FN(1,3))
      WRITE(IOUT,1090)I,IAN(2),IZ(2,1),FN(1,3),N1
C
      IF(NATOMS.EQ.2)GO TO 690
      I=3
      N1=2
      N2=NATOMS
      GLTOT = GLTOT + FN(2,3)**2 + FN(N2,3)**2
      GBIG = DMAX1 (GBIG, DABS(FN(2,3)), DABS(FN(N2,3)))
      WRITE(IOUT,1090)I,IAN(3),IZ(3,1),FN(2,3),N1,IZ(3,2),FN(N2,3),N2
C
      IF(NATOMS.EQ.3)GO TO 690
      N3=NATOMS+NATOMS-3
      DO 680 I=4,NATOMS
      N1=N1+1
      N2=N2+1
      N3=N3+1
      GLTOT = GLTOT + FN(N1,3)**2 + FN(N2,3)**2 + FN(N3,3)**2
      GBIG = DMAX1 (GBIG, DABS(FN(N1,3)), DABS(FN(N2,3)),
     1 DABS(FN(N3,3)))
  680 WRITE(IOUT,1090)I,IAN(I),IZ(I,1),FN(N1,3),N1,IZ(I,2),FN(N2,3),N2,
     1 IZ(I,3),FN(N3,3),N3,IZ(I,4)
C
  690 GLTOT = DSQRT(GLTOT/DFLOAT(NZZ))
      WRITE (IOUT,1260) GLTOT, GBIG
C*
C     REDUCE BASIS SET DERIVATIVES.
C*
   90 IF(IBPRNT.EQ.2)WRITE(IOUT,1040)
      IF(ICHK.EQ.1)GO TO 480
      IF(IENTRY.NE.0)GO TO 160
      K=0
      IXOLD=0
C
      DO 150 I=1,NSHELL
      IF(IBPRNT.NE.2)GO TO 130
      IX=IXYZ(I)
      IF(IX.EQ.IXOLD)GO TO 120
      IXOLD=IXOLD+1
      IF(IX.EQ.IXOLD)GO TO 110
C     FOUND DUMMY ATOM(S).
      J=IX-1
      DO 100 L=IXOLD,J
      K=K+1
  100 WRITE(IOUT,1050)K,IEL(55)
      IXOLD=IX
  110 IA=IAN(IX)
      IF(IA.LT.0)IA=56
      K=K+1
      WRITE(IOUT,1050)K,IEL(IA)
  120 WRITE(IOUT,1060)LSHELL(I),LABEL(I)
  130 N1=SHELLA(I)
      N2=N1+SHELLN(I)-1
      T=ZERO
      DO 140 L=N1,N2
C     EXPONENT DERIVATIVES IN LOG SPACE (ACCUMULATE SCALE FACTOR DERIV).
      BOUT(1)=FBEXX(L,1)
      BOUT(2)=FBEXX(L,2)
      TT=BOUT(1)+BOUT(2)
      TTT=EXX(L)*TT
      FBEXX(L,1)=TTT
      T=T+TTT
C     COEFFICIENT DERIVATIVES: C1 AND C2 (FOR RAW COEFFS).
      BOUT(3)=FBC1(L,1)
      BOUT(4)=FBC1(L,2)
      TT=ZERO
      IF(C1S(L).NE.ZERO)TT=(BOUT(3)+BOUT(4))*C1(L)/C1S(L)
      FBC1(L,1)=TT
      BOUT(5)=FBC2(L,1)
      BOUT(6)=FBC2(L,2)
      TT=ZERO
      IF(C2S(L).NE.ZERO)TT=(BOUT(5)+BOUT(6))*C2(L)/C2S(L)
      FBC2(L,1)=TT
  140 IF(IBPRNT.EQ.2)WRITE(IOUT,1070)BOUT
  150 FSCALE(I)=T+T
C
C     PRINT REDUCED BASIS SET DERIVATIVES.
C
  160 IF(IBPRNT.EQ.0)GO TO 480
      WRITE(IOUT,1120)
      K=0
      IXOLD=0
      DO 470 I=1,NSHELL
      IX=IXYZ(I)
      IF(IX.EQ.IXOLD)GO TO 420
      IXOLD=IXOLD+1
      IF(IX.EQ.IXOLD)GO TO 410
C     DUMMY ATOM(S).
      J=IX-1
      DO 400 L=IXOLD,J
      K=K+1
  400 WRITE(IOUT,1050)K,IEL(55)
      IXOLD=IX
  410 IA=IAN(IX)
      IF(IA.LT.0)IA=56
      K=K+1
      WRITE(IOUT,1050)K,IEL(IA)
  420 WRITE(IOUT,1130)LSHELL(I),LABEL(I),FSCALE(I)
      N1=SHELLA(I)
      N2=N1+SHELLN(I)-1
      J=SHELLT(I)+1
      COUT(2)=ZERO
      COUT(3)=ZERO
      COUT(4)=ZERO
      COUT(5)=ZERO
      DO 470 L=N1,N2
      COUT(1)=FBEXX(L,1)
      T=FBC1(L,1)
      GO TO (440,430,450,460),J
C     S OR SP SHELL.
  430 COUT(3)=FBC2(L,1)
  440 COUT(2)=T
      GO TO 470
C     D SHELL.
  450 COUT(4)=T
      GO TO 470
C     F SHELL.
  460 COUT(5)=T
  470 WRITE(IOUT,1140)COUT
C
  480 IF(IENTRY.NE.0)GO TO 2020
C     SAVE FORCES ON DISK.
      IF(ICHK.EQ.0)CALL TWRITE(31,SAVIMO,NFOR,1,NFOR,1,0)
C     RESTORE C TO BOHR UNITS IF NO GEOMETRY OPTIMIZATION.
      IF(IOP(14).GT.0 .AND. IOP(15).EQ.1)RETURN
      DO 490 J=1,3
      DO 490 I=1,NATOMS
  490 C(I,J)=C(I,J)*ANTOAU
      RETURN
C
C     INVERSION FAILURE IN GOPT RUN.
C
  200 IOP(1)=-2
      RETURN
C*
C     ENTRY FOR FINAL DERIVATIVE PRINTING.
C*
      ENTRY FINALD(NZZ)
C
      IOP(21)=0
      WRITE(IOUT,1230)E1,E2
      IF (IOP(3) .EQ. 2) WRITE (IOUT,1240) EMOL, ESOL, DPOLE
C     CHECK FOR NON-GRADIENT OPTIMIZATION.
      IGRAD=IOP(61)+IOP(62)
      IF(IGRAD.EQ.0)GO TO 2020
      IENTRY=1
      ICHK=0
      IZPRNT=1
      IBPRNT=1
      IF(IOP(61).EQ.0)IBPRNT=0
      IF(IOP(1).LT.0 .AND. IOP(13).EQ.1)GO TO 2000
      WRITE(IOUT,1170)
      GO TO 2010
C
 2000 WRITE(IOUT,1210)
 2010 CALL TREAD(31,SAVIMO,NFOR,1,NFOR,1,0)
      GO TO 85
C
 2020 IF(IOP(1).LT.0 .AND. IOP(13).EQ.1)GO TO 2030
      WRITE(IOUT,1180)
      RETURN
C
 2030 WRITE(IOUT,1220)
      RETURN
      END
      SUBROUTINE GBSET(NPOPT,NZZ)
C*
C     VERSION: OCTOBER 1987.
C
C     NOTE THAT COMMONS /C711B/ AND /C711D/ ARE USED FOR SCRATCH
C     DURING OPTIMIZATION PHASE OF GBOPT.
C*
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C#
C     PARAMETER (NA=#NA)
C     PARAMETER (NS=#NS, NP=#NP)
C     PARAMETER (NO=#NO)
C##
      PARAMETER (NA= 36)
      PARAMETER (NS=120, NP=300)
      PARAMETER (NO=125)
C###
      PARAMETER (NA3=3*NA, NZ=NA3-6, NV=NA3/2)
      PARAMETER (ZERO=0.0D0, ONE=1.0D0)
C
      INTEGER SHELLA,SHELLN,SHELLT,SHELLC,AOS
C
      COMMON /A/ IOP(99)
      COMMON /A/ NATOMS,ICHARG,MULTIP,IAN(NA),NAE,NBE,NE,NBASIS,C(NA,3)
      COMMON /A/ ANTOAU,DCONST,FCONV,FCCONV,ICDUM(401)
C
      COMMON/B/IXYZ(NS),SHELLA(NS),SHELLN(NS),SHELLT(NS),
     1 SHELLC(NS),AOS(NS),NSHELL,MAXTYP,EXX(NP),C1(NP),C2(NP)
      COMMON/C711A/FSCALE(NS),
     1 SCALE(NS),C1S(NP),C2S(NP)
      COMMON/C711C/IGOPT(NZ),CGOPT(NZ),IBOPT(5,NS),PARSET(NO),
     1 PARGRD(NO)
      COMMON/C711D/SAVIMO(4),TXX,VNEXX,VEEXX,VNNXX,FN(NA3,6),
     1 FBEXX(NP,2),FBC1(NP,2),FBC2(NP,2)
      COMMON/ZMAT/IZ(NA,4),BL(NA),ALPHA(NA),BETA(NA),
     1 IPAR(15,3),NIPAR(3),NPAR,NSTEP,DX(3),NUM,NUMB,
     2 LABELS(NA,3),IZMASS(NA),ZMASS(NA)
      COMMON/ZMATC/TITLE,IELEM(NA),NAMES(NZ)
      COMMON/IO/IN,IOUT,IODUM(215)
C
      CHARACTER TITLE*72, IELEM*4, NAMES*8
C
      DIMENSION ICENT(15), ISHL(NA), NSHL(NA), IZZ(NZ), IZN(NZ)
      DIMENSION DIAGH(NO), DIJ(5,5)
C
      EQUIVALENCE (ISHL(1),FN(1,4),IZZ(1)), (NSHL(1),FN(1,5),IZN(1))
      EQUIVALENCE (DIAGH(1),SAVIMO(1))
C
      DATA F180/180.0D0/
      DATA PT5/0.5D0/, FIVE/5.0D0/, SEVEN5/7.5D0/, TEN/10.0D0/
      DATA PI/3.14159265358979D0/
C     CIJ AND DIJ ARE USED IN BADGER'S RULE FOR STRETCHING FORCE
C     CONSTANTS. THEY WERE FITTED TO SOME EXPERIMENTAL FORCE CONSTANTS
C     THEN CIJ WAS INCREASED BY 10% TO ADJUST FOR THE CHRONIC OVER-
C     ESTIMATION BY AB INITIO CALCULATIONS.
C     CIJ FOR MINIMAL BASIS SETS WAS FOUND BY INCREASING CIJEXT BY 33%.
      DATA CIJMIN/5.485D0/,CIJEXT/4.124D0/
      DATA DIJ/-0.128D0,0.177D0,0.368D0,0.414D0,0.530D0,
     1          0.177D0,0.562D0,0.763D0,0.853D0,0.996D0,
     2          0.368D0,0.763D0,1.008D0,1.078D0,1.226D0,
     3          0.414D0,0.853D0,1.078D0,1.124D0,1.268D0,
     4          0.530D0,0.996D0,1.226D0,1.268D0,1.373D0/
C     CONSTANTS FOR BASIS SET SECOND DERIVATIVES, DETERMINED FOR A
C     SERIES OF ATOMS USING SP BASIS SETS.
C     FOR NOW, D/F ORBITALS HAVE NOT BEEN EXPLICITLY CONSIDERED, BUT
C     THE EXPONENT HESSIAN ELEMENTS WILL BE TAKEN AS FOR UNCONTRACTED
C     FUNCTIONS, WITH CONTRACTION COEFFICIENT ELEMENTS TAKEN AS 1.0.
C     CONSTANT FOR SCALE FACTORS.
      DATA SCH/2.82851D0/
C     CONSTANTS FOR UNCONTRACTED FUNCTIONS.
      DATA EXH1/1.58529D0/,EXH1C/3.73205D0/,PT1/0.1D0/
C     CONTANTS FOR CONTRACTED SP FUNCTION EXPONENTS.
      DATA AEX/5.38073D0/,BEX/-6.87286D0/,CEX/64.868314D0/,
     1     AS/0.556036D0/,BS/-11.5289D0/,CS/32.215974D0/,
     2     AP/0.513637D0/,BP/-34.0904D0/,CP/37.044394D0/
C     CONSTANTS FOR S CONTRACTION COEFFICIENTS.
      DATA SH1/9.84048D0/,SH2/686.328D0/,SIX/6.0D0/
C     CONSTANTS FOR P CONTRACTION COEFFICIENTS.
      DATA PH0/3.0D0/,PH1/1.58103D0/,PH2/2.74881D0/,FOUR/4.0D0/
C
 1000 FORMAT('1OPTIMIZE ALL CARTESIAN COORDINATES'/'0THE FIRST',I4,
     1 ' PARAMETERS ARE THE XYZ COORDINATES OF THE ATOMS')
 1010 FORMAT('1BASIS SET PARAMETER SPECIFICATION (0 IS OPTIMIZED, ',
     1 '1 OR NOT LISTED IS FIXED)'//'0SHELL   SF   EXX   C1   C2',6X,
     2 'CENTERS'/)
 1020 FORMAT(1X,I4,I6,I5,I6,I5,5X,15I3)
 1030 FORMAT(15I2)
 1040 FORMAT('1GEOMETRY OPTIMIZATION CONSTRAINTS GENERATED FROM THE ',
     1 'FREE FORMAT Z MATRIX VARIABLES'/)
 1050 FORMAT('0SHELLS NOT IDENTICAL FOR CENTERS',I4,' AND',I4)
 1060 FORMAT('0ATOM',I4,' SPECIFIED TWICE OR IS A DUMMY ATOM')
 1070 FORMAT('0TOO MANY PARAMETERS TO OPTIMIZE (MAXIMUM IS',I4,')')
 1080 FORMAT(/'0THERE ARE',I4,' PARAMETERS TO BE OPTIMIZED')
 1090 FORMAT('0OPTIMIZATION ERROR ... NO PARAMETERS')
 1100 FORMAT(/'0MAP BETWEEN SHELLS AND OPTIMIZED PARAMETERS'/'0SHELL:',
     1 25I5)
 1110 FORMAT(/'0MAP BETWEEN Z MATRIX PARAMETERS AND OPTIMIZED ',
     1 'PARAMETERS (IGOPT)'/' IGOPT: 0 IS FIXED, I IS OPTIMIZATION ',
     2 'VARIABLE NUMBER, -J REFERS BACK TO Z MATRIX PARAMETER J'/
     3 '0Z MATRIX:',20I5)
 1120 FORMAT(10X,20I5)
 1130 FORMAT('0IGOPT(Z):',20I5)
 1140 FORMAT('0SET',I4,':')
 1150 FORMAT('1GEOMETRY OPTIMIZATION CONSTRAINTS'/)
 1160 FORMAT('0PARAMETER',I4,' SPECIFIED TWICE')
 1170 FORMAT(' INTERVAL',F10.4,6X,'VARIABLES ... ',15I4)
 1180 FORMAT('0ALL PARAMETERS OPTIMIZED INDEPENDENTLY')
 1190 FORMAT('0IBOPT:',25I5)
 1200 FORMAT(7X,25I5)
 1210 FORMAT(/'0INITIAL HESSIAN GUESS CONSTANTS (MDYNE/ANGSTROM):'/
     1 '0BEND:',F8.4,5X,'TORSION:',F8.4,5X,'CARTESIAN:',F8.4)
 1220 FORMAT(3F12.0)
 1230 FORMAT('0*** THE ABOVE SET OF CONSTRAINTS DOES NOT PERMIT FREE ',
     1 'FORMAT Z MATRIX OUTPUT WITH THE PRESENT SET OF Z MATRIX ',
     2 'VARIABLES'/)
 1240 FORMAT('0*** INDEPENDENT OPTIMIZATION OF PARAMETER',I4,
     1 ' DOES NOT PERMIT FREE FORMAT Z MATRIX OUTPUT WITH THE PRESENT ',
     2 'SET OF Z MATRIX VARIABLES')
 1250 FORMAT('0VARIABLE    CONSTRAINT    Z MATRIX PARAMETERS')
 1260 FORMAT('0',A8,F12.4,6X,25I4)
 1270 FORMAT(9X,F12.4,6X,25I4)
 1280 FORMAT('0*CONSTS*',F12.4,6X,25I4)
 1290 FORMAT ('0INVALID REPLACEMENT FORCE CONSTANT(S) READ - VALUES',
     1 ' MUST BE GREATER THAN 0.0.')
 1300 FORMAT ('0*** THE FIRST USE OF Z MATRIX VARIABLE ',A8,
     1 ' FOR ATOM',I4,' HAS NEGATIVE SIGN -'/
     2 5X,'CHANGE THE SIGNS OF ALL OCCURENCES OF VARIABLE ',A8,
     3 'IN THE Z MATRIX (AND IN THE VARIABLES LIST),'/
     4 5X,'AND RESUBMIT THE JOB PLEASE. ***')
C*
      TORAD=PI/F180
      MAXPAR=NO
      IF(IOP(14).EQ.3)MAXPAR=NV
C     PRESET GRADIENT COMPONENTS TO ZERO.
      DO 700 I=1,MAXPAR
  700 PARGRD(I)=ZERO
      IF(IOP(15).EQ.0)GO TO 200
      K=3*NATOMS
      IF(IOP(16).EQ.0)GO TO 720
C
C     OPTIMIZE CARTESIAN COORDINATES.
C     TREAT AS IF GEOMETRY INPUT WAS IN ANGSTROMS, REGARDLESS OF
C     ACTUAL SOURCE.
C
      IOP(5)=2
      IF(IOP(13).NE.0)GO TO 705
      WRITE(IOUT,1000)K
      NPOPT=K
  705 N1=0
      IF(NPOPT.GT.MAXPAR)GO TO 380
      DO 710 I=1,NATOMS
      DO 710 L=1,3
      N1=N1+1
      PARSET(N1)=C(I,L)
  710 PARGRD(N1)=FN(N1,1)
      GO TO 200
C
C     OPTIMIZE INTERNAL COORDINATES.
C     READ THE COORDINATE CONSTRAINTS IF THIS IS THE INITIAL ENTRY.
C     IZZ PREVENTS A Z MATRIX PARAMETER FROM BEING SPECIFIED TWICE.
C
  720 IF(IOP(13).NE.0)GO TO 890
      IF(IOP(5).EQ.0 .AND. IOP(18).EQ.0)GO TO 500
      DO 730 I=1,NZZ
      IZZ(I)=0
      CGOPT(I)=ONE
  730 IGOPT(I)=1
      L=0
      WRITE(IOUT,1150)
  740 KEY=1
      CALL ZPARAM(KEY,IZFREE)
      IF(KEY)750,760,810
  750 RETURN
  760 L=L+1
      WRITE(IOUT,1140)L
C
C     SET IGOPT(I). THE POSSIBILITIES ARE:
C     J ... THIS IS THE J'TH PARAMETER TO BE OPTIMIZED.
C     -K ... VARY THIS PARAMETER TOGETHER WITH Z MATRIX PARAMETER K.
C     0 ... NO OPTIMIZATION.
C     WHILE THE VARIATION CARDS ARE BEING READ, USE A 1 TO INDICATE
C     THE PARAMETERS TO BE OPTIMIZED.
C     CGOPT CONTAINS THE RELATIVE INCREMENTS FOR THE SET MEMBERS.
C
      IXOLD=-IPAR(1,1)
      T=DX(1)
      DO 800 I=1,NUM
      IF(T.NE.ZERO)DX(I)=DX(I)/T
      IF(T.EQ.ZERO)DX(I)=ZERO
      J=NIPAR(I)
      WRITE(IOUT,1170)DX(I),(IPAR(K,I),K=1,J)
      IF(T.NE.ZERO)GO TO 780
C     FIX THESE VARIABLES.
      DO 770 K=1,J
      IX=IPAR(K,I)
      IF(IZZ(IX).NE.0)GO TO 450
      IZZ(IX)=1
      IGOPT(IX)=0
  770 CGOPT(IX)=ZERO
      GO TO 800
C     FOUND A SET OF PARAMETERS.
  780 DO 790 K=1,J
      IX=IPAR(K,I)
      IF(IZZ(IX).NE.0)GO TO 450
      IZZ(IX)=1
      CGOPT(IX)=DX(I)
  790 IGOPT(IX)=IXOLD
      IGOPT(-IXOLD)=1
  800 CONTINUE
      IF(IZFREE.EQ.0)GO TO 740
      WRITE(IOUT,1230)
      IOP(5)=1
      GO TO 740
C*
C     GENERATE CONSTRAINTS FOR FREE FORMAT OPTIMIZATIONS.
C*
  500 WRITE(IOUT,1040)
      L=0
C
C     LOOP OVER THE Z MATRIX PARAMETER LABELS, SCANNING FOR EACH
C     VARIABLE NUMBER IN TURN.
C
      DO 600 IVAR=1,NZZ
      KOUNT=0
      NIZZ=0
      NIZN=0
      DO 580 K=1,3
      DO 580 I=2,NATOMS
      LAB=LABELS(I,K)
      LABS=IABS(LAB)/100
      IVTYPE = IABS(LAB) / 2
      IVTYPE = IVTYPE - 2*(IVTYPE/2)
      IF (LABS .NE. IVAR) GO TO 580
      IF (IVTYPE .NE. 0) THEN
         KOUNT = 1
         GO TO 580
      END IF
C     FOUND A MATCHING LABEL - SAVE THE FIRST LABEL SIGN.
      IF (KOUNT.EQ.0) THEN
         IF (LAB .LT. 0) GO TO 430
         LABSAV=LAB
      END IF
C     GET A PARAMETER NUMBER FOR THIS LABEL.
      IF(K-2)520,530,540
C     BOND LENGTH.
  520 N=I-1
      GO TO 550
C     ALPHA BOND ANGLE.
  530 N=I+NATOMS-3
      GO TO 550
C     BETA ANGLE.
  540 N=I+2*NATOMS-6
C     COMPARE SIGN OF THE VARIABLE FOR THIS PARAMETER AGAINST FIRST USE.
  550 IF(LAB*LABSAV.LT.0)GO TO 560
C     SAME SIGN.
      NIZZ=NIZZ+1
      IZZ(NIZZ)=N
      CGOPT(N)=ONE
      IF(KOUNT.NE.0)GO TO 570
      IGOPT(N)=1
      KOUNT=1
      GO TO 580
C     OPPOSITE SIGN.
  560 NIZN=NIZN+1
      IZN(NIZN)=N
      CGOPT(N)=-ONE
  570 IGOPT(N)=-IZZ(1)
      KOUNT=KOUNT+1
  580 CONTINUE
C
C     PRINT UNLESS THIS VARIABLE ONLY USED ONCE.
C
      IF(KOUNT-1)610,600,590
  590 IF(L.EQ.0)WRITE(IOUT,1250)
      L=L+1
      LSTOP=MIN0(NIZZ,25)
      WRITE(IOUT,1260) NAMES(IVAR),ONE,(IZZ(I),I=1,LSTOP)
  591 LSTART=LSTOP+1
      IF(LSTART.GT.NIZZ)GO TO 595
      LSTOP=MIN0(NIZZ,LSTOP+25)
      WRITE(IOUT,1270)ONE,(IZZ(I),I=LSTART,LSTOP)
      GO TO 591
  595 IF(NIZN.EQ.0)GO TO 600
      T=-ONE
      LSTOP=MIN0(NIZN,25)
      WRITE(IOUT,1270)T,(IZN(I),I=1,LSTOP)
  596 LSTART=LSTOP+1
      IF(LSTART.GT.NIZN)GO TO 600
      LSTOP=MIN0(NIZN,LSTOP+25)
      WRITE(IOUT,1270)T,(IZN(I),I=LSTART,LSTOP)
      GO TO 596
  600 CONTINUE
C
C     ALL VARIABLES SCANNED - LOOK FOR CONSTANTS.
C
  610 NIZZ=0
      DO 660 K=1,3
      KOUNT=K+1
      IF(KOUNT.GT.NATOMS)GO TO 670
      DO 660 I=KOUNT,NATOMS
      LABS = IABS(LABELS(I,K))
      IVTYPE = LABS / 2
      IVTYPE = IVTYPE - 2*(IVTYPE/2)
      IF (LABS/100.NE.0 .AND. IVTYPE.EQ.0) GO TO 660
C     GET THE PARAMETER NUMBER.
      IF(K-2)620,630,640
C     BOND LENGTH.
  620 N=I-1
      GO TO 650
C     ALPHA BOND ANGLE.
  630 N=I+NATOMS-3
      GO TO 650
C     BETA ANGLE.
  640 N=I+2*NATOMS-6
  650 NIZZ=NIZZ+1
      IZZ(NIZZ)=N
      IGOPT(N)=0
      CGOPT(N)=ZERO
  660 CONTINUE
C
  670 IF(NIZZ.EQ.0)GO TO 810
      IF(L.EQ.0)WRITE(IOUT,1250)
      L=L+1
      LSTOP=MIN0(NIZZ,25)
      WRITE(IOUT,1280)ZERO,(IZZ(I),I=1,LSTOP)
  680 LSTART=LSTOP+1
      IF(LSTART.GT.NIZZ)GO TO 810
      LSTOP=MIN0(NIZZ,LSTOP+25)
      WRITE(IOUT,1270)ZERO,(IZZ(I),I=LSTART,LSTOP)
      GO TO 680
C
  810 IF(L.EQ.0)WRITE(IOUT,1180)
C     NOW INSERT PROPER PARAMETER NUMBERS IN IGOPT.
      DO 820 I=1,NZZ
      IF(IGOPT(I).LE.0)GO TO 820
      NPOPT=NPOPT+1
      IGOPT(I)=NPOPT
  820 CONTINUE
C
C     ENSURE PARAMETERS OPTIMIZED INDEPENDENTLY ARE UNIQUE VARIABLES
C     FOR FREE FORMAT Z MATRIX OUTPUT.
C
      IF(IOP(5).NE.0.OR.IOP(18).EQ.0)GO TO 880
      NBETA=NATOMS+NATOMS-2
      DO 870 N=1,NZZ
      IF(IZZ(N).NE.0)GO TO 870
C     PARAMETER N WAS NOT SPECIFIED ON A CONSTRAINTS CARD - TRANSLATE
C     N TO AN ATOM NUMBER AND GET THE LABEL FROM LABELS.
      IF(N.GE.NATOMS)GO TO 830
C     BOND LENGTH.
      L=LABELS(N+1,1)
      GO TO 850
C     ALPHA BOND ANGLE.
  830 IF(N.GE.NBETA)GO TO 840
      L=LABELS(N-NATOMS+3,2)
      GO TO 850
C     BETA ANGLE.
  840 L=LABELS(N-2*NATOMS+6,3)
C     WHERE DID THIS Z MATRIX PARAMETER COME FROM IN THE Z MATRIX INPUT.
  850 L=IABS(L)/100
      IF(L.EQ.0)GO TO 870
C     SCAN ALL THE LABELS FOR USES OF VARIABLE L.
      MATCH=0
      DO 860 J=1,3
      DO 860 I=2,NATOMS
      K=IABS(LABELS(I,J))/100
  860 IF(K.EQ.L)MATCH=MATCH+1
      IF(MATCH.EQ.1)GO TO 870
      WRITE(IOUT,1240)N
      IOP(5)=1
      GO TO 880
  870 CONTINUE
C
C     PRINT TABLE BETWEEN Z MATRIX PARAMETER NUMBERS AND OPTIMIZED
C     PARAMETER NUMBERS.
C
  880 J=MIN0(20,NZZ)
      WRITE(IOUT,1110)(I,I=1,J)
      IF(NZZ.GT.20)WRITE(IOUT,1120)(I,I=21,NZZ)
      WRITE(IOUT,1130)(IGOPT(I),I=1,J)
      IF(NZZ.GT.20)WRITE(IOUT,1120)(IGOPT(I),I=21,NZZ)
C
C     FINISHED CONSTRAINTS - REDUCE AND COPY PARAMETERS AND GRADIENT.
C
  890 IF(NPOPT.GT.MAXPAR)GO TO 380
      K=NATOMS+NATOMS-3
      DO 950 I=1,NZZ
      N1=IGOPT(I)
      IF(N1)900,950,910
  900 N1=IGOPT(-N1)
      GO TO 940
C     SAVE PARAMETER AND GRADIENT.
C     BOND LENGTH.
  910 IF(I.GE.NATOMS)GO TO 920
      PARSET(N1)=BL(I+1)
      GO TO 940
C     FIRST BOND ANGLE.
  920 IF(I.GT.K)GO TO 930
      N2=I-NATOMS+3
      PARSET(N1)=ALPHA(N2)*TORAD
      GO TO 940
C     TORSION ANGLE OR SECOND EULER ANGLE.
  930 N2=I-K+3
      PARSET(N1)=BETA(N2)*TORAD
  940 PARGRD(N1)=PARGRD(N1)+CGOPT(I)*FN(I,3)
  950 CONTINUE
C*
C     GET BASIS SET VARIATION CARDS.
C*
  200 IF(IOP(17).EQ.0)GO TO 370
      IF(IOP(13).NE.0)GO TO 300
      WRITE(IOUT,1010)
C     SET UP A MAP BETWEEN ATOMS AND THE FIRST SHELL ON THAT ATOM IN
C     ISHL (0 IF NO SHELLS).
C     COUNT THE NUMBER OF SHELLS IN NSHL.
      DO 230 I=1,NATOMS
      ISHL(I)=0
  230 NSHL(I)=0
      DO 240 I=1,NSHELL
      IX=IXYZ(I)
      IF(ISHL(IX).EQ.0)ISHL(IX)=I
      NSHL(IX)=NSHL(IX)+1
      IBOPT(5,I)=0
      DO 240 J=1,4
  240 IBOPT(J,I)=1
C     READ THE CENTERS TO BE OPTIMIZED.
  250 READ(IN,1030)ICENT
      IX=ICENT(1)
      IF(IX.EQ.0)GO TO 300
      NUM=1
      DO 260 I=2,15
      IF(ICENT(I).LE.0)GO TO 270
  260 NUM=I
C
C     FIND OUT HOW MANY PARAMETERS ARE DEFINED BY THESE CENTERS.
C
C     IBOPT IS USED TO STORE THE SHELL OPTIMIZATION INDICATORS:
C     THE FIRST 4 VALUES FOR A SHELL ARE FOR THE SCALE FACTOR, THE
C     EXPONENTS, THE S/D/F COEFFICIENTS, AND THE P COEFFICIENTS. A 0
C     MEANS TO OPTIMIZE THE VALUE(S), A 1 MEANS HOLD IT FIXED.
C     THE FIFTH INDICATOR CONTAINS THE NUMBER OF THE FIRST OPTIMIZATION
C     PARAMETER FROM THIS SHELL (OR 0 IF ENTIRE SHELL IS FIXED).
C
  270 ISHLIX=ISHL(IX)-1
      NSHLIX=NSHL(IX)
      IJ=IX
      IF(NSHLIX.EQ.0)GO TO 480
      DO 280 I=1,NSHLIX
      READ(IN,1030)ISF,IEXX,IC1,IC2
      ISHLIX=ISHLIX+1
      IF(SHELLC(ISHLIX).NE.0)IC1=1
      IF(SHELLT(ISHLIX).NE.1)IC2=1
C     DO NOT OPTIMIZE CONTRACTION COEFFICIENTS, OR BOTH THE SCALE
C     FACTOR AND EXPONENT, FOR UNCONTRACTED SHELLS.
      N1=SHELLN(ISHLIX)
      IF(N1.GT.1)GO TO 275
      IC1=1
      IC2=1
      IF(ISF.EQ.0 .AND. IEXX.EQ.0)IEXX=1
  275 IF(I.EQ.1)WRITE(IOUT,1020)ISHLIX,ISF,IEXX,IC1,IC2,
     * (ICENT(J),J=1,NUM)
      IF(I.GT.1)WRITE(IOUT,1020)ISHLIX,ISF,IEXX,IC1,IC2
      IBOPT(1,ISHLIX)=ISF
      IBOPT(2,ISHLIX)=IEXX
      IBOPT(3,ISHLIX)=IC1
      IBOPT(4,ISHLIX)=IC2
      IBOPT(5,ISHLIX)=NPOPT+1
      IF(ISF.EQ.0)NPOPT=NPOPT+1
      IF(IEXX.EQ.0)NPOPT=NPOPT+N1
      IF(IOP(24).EQ.0)GO TO 278
      IF(IC1.EQ.0)NPOPT=NPOPT+N1-1
      IF(IC2.EQ.0)NPOPT=NPOPT+N1-1
      GO TO 280
  278 IF(IC1.EQ.0)NPOPT=NPOPT+N1
      IF(IC2.EQ.0)NPOPT=NPOPT+N1
  280 IF(IBOPT(5,ISHLIX).GT.NPOPT)IBOPT(5,ISHLIX)=0
      NSHL(IX)=0
      IF(NUM.EQ.1)GO TO 250
      DO 290 J=2,NUM
      IJ=ICENT(J)
      IF(NSHL(IJ).NE.NSHLIX)GO TO 470
      NSHL(IJ)=0
      ISHLIX=ISHL(IX)-1
      JSHL=ISHL(IJ)-1
      DO 290 I=1,NSHLIX
      ISHLIX=ISHLIX+1
      JSHL=JSHL+1
      IF(SHELLT(JSHL).NE.SHELLT(ISHLIX))GO TO 470
      IF(SHELLC(JSHL).NE.SHELLC(ISHLIX))GO TO 470
      DO 290 K=1,5
  290 IBOPT(K,JSHL)=IBOPT(K,ISHLIX)
      GO TO 250
C     COPY PARAMETERS AND ACCUMULATE GRADIENTS.
  300 IF(NPOPT.GT.MAXPAR)GO TO 380
      DO 350 I=1,NSHELL
      IX=IBOPT(5,I)-1
C     SCALE FACTOR.
      T=SCALE(I)
      IF(IBOPT(1,I).NE.0)GO TO 310
      IX=IX+1
      PARSET(IX)=DLOG(T)
      PARGRD(IX)=PARGRD(IX)+FSCALE(I)
  310 IEXX=IBOPT(2,I)
      IC1=IBOPT(3,I)
      IC2=IBOPT(4,I)
      T=ONE/(T*T)
      N1=SHELLA(I)
      N2=N1+SHELLN(I)-1
      DO 340 J=N1,N2
C     EXPONENT - UNSCALE ALL EXPONENTS.
      TT=EXX(J)*T
      EXX(J)=TT
      IF(IEXX.NE.0)GO TO 320
      IX=IX+1
      PARSET(IX)=DLOG(TT)
      PARGRD(IX)=PARGRD(IX)+FBEXX(J,1)
C     C1 COEFFICIENT.
  320 IF(IC1.NE.0)GO TO 330
      IF(J.EQ.N1 .AND. IOP(24).NE.0)GO TO 330
      IX=IX+1
      PARSET(IX)=C1S(J)
      PARGRD(IX)=PARGRD(IX)+FBC1(J,1)
C     C2 COEFFICIENT.
  330 IF(IC2.NE.0)GO TO 340
      IF(J.EQ.N1 .AND. IOP(24).NE.0)GO TO 340
      IX=IX+1
      PARSET(IX)=C2S(J)
      PARGRD(IX)=PARGRD(IX)+FBC2(J,1)
  340 CONTINUE
  350 CONTINUE
      IF(IOP(13).GT.0)RETURN
      J=MIN0(25,NSHELL)
      WRITE(IOUT,1100)(I,I=1,J)
      IF(NSHELL.GT.25)WRITE(IOUT,1200)(I,I=26,NSHELL)
      WRITE(IOUT,1190)(IBOPT(5,I),I=1,J)
      IF(NSHELL.GT.25)WRITE(IOUT,1200)(IBOPT(5,I),I=26,NSHELL)
  370 IF(IOP(13).NE.0)RETURN
  380 WRITE(IOUT,1080)NPOPT
      IF(NPOPT.EQ.0)GO TO 440
      IF(NPOPT.GT.MAXPAR)GO TO 460
C*
C     INITIALIZE DIAGONAL FORCE CONSTANT MATRIX.
C*
      FBEND=ONE
      FTORS=PT5
      IF (IOP(25) .EQ. 1) THEN
         FBEND = FIVE
         FTORS = FIVE
      END IF
      FCART=TEN
      IF(IOP(23).EQ.1)READ(IN,1220)FBEND,FTORS,FCART
      WRITE(IOUT,1210)FBEND,FTORS,FCART
      IF (FBEND.LE.ZERO .OR. FTORS.LE.ZERO .OR. FCART.LE.ZERO) GO TO 490
      DO 10 I=1,NPOPT
   10 DIAGH(I)=ZERO
      IF(IOP(15).EQ.0)GO TO 120
C     GEOMETRICAL FORCE CONSTANTS ARE IN HARTREE/ANGSTROM**2 FOR THE
C     DOC METHOD.
      FACTOR=ONE
      IF(IOP(14).EQ.4)FACTOR=ONE/FCCONV
      IF(IOP(16).EQ.0)GO TO 30
C
C     CARTESIAN COORDINATES.
C
      K=3*NATOMS
      FCART=FCART*FACTOR
      DO 20 I=1,K
   20 DIAGH(I)=FCART
      GO TO 120
C
C     INTERNAL COORDINATES.
C
   30 K=NATOMS+NATOMS-3
      CIJ=CIJMIN
      IF(IOP(6).NE.0)CIJ=CIJEXT
      CIJ=CIJ*FACTOR
      FBEND=FBEND*FACTOR
      FTORS=FTORS*FACTOR
      DO 110 I=1,NZZ
      J=IGOPT(I)
      IF(J)40,110,50
   40 J=IGOPT(-J)
   50 IF(I.GE.NATOMS)GO TO 70
C     BOND LENGTH - USE BADGER'S RULE TO ESTIMATE: R.M. BADGER, J.
C     CHEM. PHYS., 2, 128 (1934). THE CONSTANTS HAVE BEEN REFITTED.
C     IF EITHER ATOM IS A DUMMY, USE FCART INSTEAD.
      N1=IZ(I+1,1)
      N1=IAN(N1)
      N2=IAN(I+1)
      IF(N1.GT.0 .AND. N2.GT.0)GO TO 60
      T=FCART
      GO TO 100
C     GET ROW OF PERIODIC SYSTEM.
   60 IA=(N1+13)/8
      IF(N1.GT.18)IA=(N1+53)/18
      IB=(N2+13)/8
      IF(N2.GT.18)IB=(N2+53)/18
      T=CIJ/((BL(I+1)-DIJ(IA,IB))**3)
      IF (IOP(25).EQ.1 .AND. T.LT.SEVEN5*FACTOR) T = SEVEN5 * FACTOR
      GO TO 100
C     BOND ANGLE.
   70 IF(I.GT.K)GO TO 90
   80 T=FBEND
      GO TO 100
C     TORSION ANGLE - IS IT THE SECOND EULER ANGLE THOUGH?
   90 IA=I-K+3
      IF(IZ(IA,4).NE.0)GO TO 80
      T=FTORS
  100 DIAGH(J)=DIAGH(J)+T*CGOPT(I)*CGOPT(I)
  110 CONTINUE
C
C     BASIS SET.
C
  120 IF(IOP(17).EQ.0)RETURN
      DO 150 I=1,NSHELL
      IB=IBOPT(5,I)-1
      IF(IB.LT.0)GO TO 150
C     SCALE FACTOR.
      SCALEH=ZERO
      IBSCAL=0
      IF(IBOPT(1,I).NE.0)GO TO 130
      IB=IB+1
      IBSCAL=IB
  130 N1=SHELLA(I)
      N2=N1+SHELLN(I)-1
      DO 140 J=N1,N2
      T=DLOG(EXX(J))
      IF(N1.EQ.N2.OR.SHELLT(I).GE.2)GO TO 132
C     CONTRACTED SP FUNCTION - ESTIMATE EXPONENT HESSIAN.
      EXXH=CEX*DEXP(BEX*(T-AEX)**2)
      IF(SHELLT(I).EQ.0.OR.(SHELLT(I).EQ.1 .AND. SHELLC(I).EQ.0))
     1 EXXH=EXXH+CS*DEXP(BS*(C1S(J)-AS)**2)
      IF(SHELLT(I).EQ.1)EXXH=EXXH+CP*DEXP(BP*(C2S(J)-AP)**2)
      GO TO 134
C     UNCONTRACTED FUNCTION, OR D/F EXPONENT.
  132 EXXH=EXH1C+EXH1*T
      IF(EXXH.LT.PT1)EXXH=PT1
  134 SCALEH=SCALEH+EXXH
      IF(IBOPT(2,I).NE.0)GO TO 136
      IB=IB+1
      DIAGH(IB)=DIAGH(IB)+EXXH
C     S/D/F CONTRACTION COEFFICIENT.
  136 IF(IBOPT(3,I).NE.0)GO TO 139
      IF(J.EQ.N1 .AND. IOP(24).NE.0)GO TO 139
      IF(SHELLT(I).GE.2)GO TO 137
      FBASIS=SH1*T*T
      IF(T.GT.SIX)FBASIS=FBASIS+SH2*(T-SIX)*T
      GO TO 138
  137 FBASIS=ONE
  138 IB=IB+1
      DIAGH(IB)=DIAGH(IB)+FBASIS
C     P CONTRACTION COEFFICIENT.
  139 IF(IBOPT(4,I).NE.0)GO TO 140
      IF(J.EQ.N1 .AND. IOP(24).NE.0)GO TO 140
      FBASIS=PH0+PH1*T*T*T*T
      IF(T.GT.FOUR)FBASIS=FBASIS+PH2*(T-FOUR)*T*T*T*T
      IB=IB+1
      DIAGH(IB)=DIAGH(IB)+FBASIS
  140 CONTINUE
      IF(IBSCAL.NE.0)DIAGH(IBSCAL)=DIAGH(IBSCAL)+SCH*SCALEH
  150 CONTINUE
      RETURN
C
C     ERROR EXITS.
C
C     FIRST USE OF A Z MATRIX VARIABLE WAS WITH NEGATIVE SIGN.
  430 WRITE (IOUT,1300) NAMES(IVAR), I, NAMES(IVAR)
      IOP(1)=-2
      RETURN
C     NO PARAMETERS TO OPTIMIZE.
  440 WRITE(IOUT,1090)
      IOP(1)=-2
      RETURN
C     Z MATRIX PARAMETER SPECIFIED TWICE.
  450 WRITE(IOUT,1160)IX
      IOP(1)=-2
      RETURN
C     TOO MANY PARAMETERS TO OPTIMIZE.
  460 WRITE(IOUT,1070)MAXPAR
      IOP(1)=-2
      RETURN
C     SHELLS NOT IDENTICAL FOR ALL ATOMS ON SAME CENTER CARD.
  470 WRITE(IOUT,1050)IJ,IX
      IOP(1)=-2
      RETURN
C     ATOM SPECIFIED TWICE OR HAS NO SHELLS.
  480 WRITE(IOUT,1060)IJ
      IOP(1)=-2
      RETURN
C     INVALID REPLACEMENT FORCE CONSTANT READ IN.
  490 WRITE (IOUT,1290)
      IOP(1) = -2
      RETURN
      END
      SUBROUTINE BOST(NOB,I,J,C)
C
C     THIS SUBROUTINE COMPUTES THE B MATRIX ELEMENTS FOR A BOND STRETCH
C     AS DEFINED BY WILSON.
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C#
C     PARAMETER (NA=#NA)
C##
      PARAMETER (NA= 36)
C###
      PARAMETER (NA3=3*NA)
C
      COMMON/C711B/B(NA3,NA3)
C
      DIMENSION C(NA,3), EIJ(3)
C
      DATA TENM8/1.0D-8/
C
      CALL VEC(EIJ,C,J,I)
      II=3*(I-1)
      JJ=3*(J-1)
      DO 20 M=1,3
      T=EIJ(M)
      IF(DABS(T).LT.TENM8)GO TO 20
      B(NOB,II+M)=-T
      B(NOB,JJ+M)=T
   20 CONTINUE
      RETURN
      END
      SUBROUTINE BEND(NOB,I,J,K,C,IER)
C
C     THIS SUBROUTINE COMPUTES THE B MATRIX ELEMENTS OF A VALENCE
C     ANGLE BENDING COORDINATE AS DEFINED BY WILSON.
C     I AND K ARE THE NUMBERS OF THE END ATOMS.
C     J IS THE NUMBER OF THE CENTRAL ATOM.
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C#
C     PARAMETER (NA=#NA)
C##
      PARAMETER (NA= 36)
C###
      PARAMETER (NA3=3*NA)
      PARAMETER (ZERO=0.0D0, ONE=1.0D0)
C
      COMMON/C711B/B(NA3,NA3)
C
      DIMENSION C(NA,3), EJI(3), EJK(3)
C
      DATA TENM8/1.0D-8/, PT9999/0.99999D0/
C
      DJISQ=ZERO
      DJKSQ=ZERO
      DO 20 M=1,3
      TP=C(J,M)
      T=C(I,M)-TP
      EJI(M)=T
      DJISQ=DJISQ+T*T
      T=C(K,M)-TP
      EJK(M)=T
   20 DJKSQ=DJKSQ+T*T
      DJI=DSQRT(DJISQ)
      DJK=DSQRT(DJKSQ)
      DOTJ=ZERO
      DO 30 M=1,3
      T=EJI(M)/DJI
      EJI(M)=T
      TP=EJK(M)/DJK
      EJK(M)=TP
   30 DOTJ=DOTJ+T*TP
      IF(DABS(DOTJ).GT.PT9999)GO TO 60
      SINJ=DSQRT(ONE-DOTJ*DOTJ)
      II=3*(I-1)
      JJ=3*(J-1)
      KK=3*(K-1)
      DO 40 M=1,3
      SMI=(DOTJ*EJI(M)-EJK(M))/(DJI*SINJ)
      IF(DABS(SMI).GE.TENM8)B(NOB,II+M)=SMI
      SMK=(DOTJ*EJK(M)-EJI(M))/(DJK*SINJ)
      IF(DABS(SMK).GE.TENM8)B(NOB,KK+M)=SMK
      SUM=SMI+SMK
   40 IF(DABS(SUM).GE.TENM8)B(NOB,JJ+M)=-SUM
      RETURN
C     SWITCH TO A LINEAR BEND AS SIN(I-J-K) IS CLOSE TO 0.0.
   60 IER=1
      RETURN
      END
      SUBROUTINE TORS(NOB,I,J,K,L,C,IER)
C
C     THIS SUBROUTINE COMPUTES THE B MATRIX ELEMENTS FOR TORSION AS
C     DEFINED BY R L HILDERBRANDT IN J MOLEC SPEC, 44, 599 (1972).
C     CODED BY M PETERSON, DEPT OF CHEMISTRY, UNIV OF TORONTO.
C     J AND K DEFINE THE BOND UNDER TORSION.
C     NI AND NL ARE THE NUMBER OF ATOMS ATTACHED TO J AND K RESPECTIVELY
C
C     THE CODE WILL HANDLE ENTIRE GROUP TORSIONS, BUT IS CURRENTLY USED
C     ONLY FOR SIMPLE 4 ATOM TORSIONS (I-J-K-L).
C
C     IATOM, LATOM: ATOM NUMBERS FOR THE I- AND L-TYPE ATOMS (SIZE: 5)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C#
C     PARAMETER (NA=#NA)
C##
      PARAMETER (NA= 36)
C###
      PARAMETER (NA3=3*NA)
      PARAMETER (ZERO=0.0D0, ONE=1.0D0)
C
      COMMON/C711B/B(NA3,NA3)
C
      DIMENSION C(NA,3), SJ(3), SK(3), EJK(3), EIJ(3), ELK(3), CR(3)
C
C     DIMENSION IATOM(5), LATOM(5)
C
      DATA TENM8/1.0D-8/, PT9999/0.99999D0/
      DATA NI/1/, NL/1/
C
      DJKSQ=ZERO
      DO 20 M=1,3
      SJ(M)=ZERO
      SK(M)=ZERO
      T=C(K,M)-C(J,M)
      EJK(M)=T
   20 DJKSQ=DJKSQ+T*T
      DJK=ONE/DSQRT(DJKSQ)
      DO 30 M=1,3
   30 EJK(M)=EJK(M)*DJK
      JJ=3*(J-1)
      KK=3*(K-1)
C     LOOP OVER THE I-TYPE ATOMS
      DO 60 N=1,NI
C     I=IATOM(N)
      DIJSQ=ZERO
      DO 40 M=1,3
      T=C(J,M)-C(I,M)
      EIJ(M)=T
   40 DIJSQ=DIJSQ+T*T
      DIJ=ONE/DSQRT(DIJSQ)
      COSJ=ZERO
      DO 50 M=1,3
      T=EIJ(M)*DIJ
      EIJ(M)=T
   50 COSJ=COSJ-T*EJK(M)
      IF(DABS(COSJ).GT.PT9999)GO TO 120
      SIN2J=(ONE-COSJ*COSJ)*DFLOAT(NI)
      II=3*(I-1)
      CALL VPROD(CR,EIJ,EJK)
      DO 60 M=1,3
      T=CR(M)/SIN2J
      SMI=T*DIJ
      IF(DABS(SMI).GE.TENM8)B(NOB,II+M)=-SMI
      SMK=T*COSJ*DJK
      SK(M)=SK(M)+SMK
      SMJ=SMI-SMK
   60 SJ(M)=SJ(M)+SMJ
C     LOOP OVER THE L-TYPE ATOMS
      DO 90 N=1,NL
C     L=LATOM(N)
      DLKSQ=ZERO
      DO 70 M=1,3
      T=C(K,M)-C(L,M)
      ELK(M)=T
   70 DLKSQ=DLKSQ+T*T
      DLK=ONE/DSQRT(DLKSQ)
      COSK=ZERO
      DO 80 M=1,3
      T=ELK(M)*DLK
      ELK(M)=T
   80 COSK=COSK+EJK(M)*T
      IF(DABS(COSK).GT.PT9999)GO TO 110
      SIN2K=(ONE-COSK*COSK)*DFLOAT(NL)
      LL=3*(L-1)
      CALL VPROD(CR,EJK,ELK)
      DO 90 M=1,3
      T=CR(M)/SIN2K
      SML=T*DLK
      IF(DABS(SML).GE.TENM8)B(NOB,LL+M)=-SML
      SMJ=T*COSK*DJK
      SJ(M)=SJ(M)+SMJ
      SMK=SML-SMJ
   90 SK(M)=SK(M)+SMK
      DO 100 M=1,3
      SMJ=SJ(M)
      IF(DABS(SMJ).GE.TENM8)B(NOB,JJ+M)=SMJ
      SMK=SK(M)
  100 IF(DABS(SMK).GE.TENM8)B(NOB,KK+M)=SMK
      RETURN
C     FATAL ERROR - ATOMS J-K-L ARE COLINEAR.
  110 IER=-2
      RETURN
C     ATOMS I-J-K ARE COLINEAR - TRY LINEAR BEND.
  120 IER=1
      RETURN
      END
      SUBROUTINE LIBE(NOB,I,J,K,C,A,IC,IER)
C
C     THIS SUBROUTINE COMPUTES THE B MATRIX ELEMENTS FOR A LINEAR BEND
C     OR FOR A PAIR OF PERPENDICULAR LINEAR BENDS.
C     I AND K ARE THE END ATOMS.
C     J IS THE CENTRAL ATOM.
C
C     A GIVES THE CARTESIAN COORDINATES OF A POINT IN SPACE, SUCH
C     THAT THE VECTOR FROM ATOM J TO POINT A IS PERPENDICULAR TO
C     THE LINE I-J-K AND SERVES TO ORIENT THE COORDINATES IN SPACE.
C     IF IC IS 1, THE IN-PLANE COMPONENT IS RETURNED; IF IC IS 2, THE
C     OUT-OF-PLANE (PERPENDICULAR) COMPONENT IS RETURNED.
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C#
C     PARAMETER (NA=#NA)
C##
      PARAMETER (NA= 36)
C###
      PARAMETER (NA3=3*NA)
      PARAMETER (ZERO=0.0D0)
C
      COMMON/C711B/B(NA3,NA3)
C
      DIMENSION C(NA,3), A(3), EJK(3), UP(3), UN(3)
C
      DATA TENM8/1.0D-8/
C
      DJISQ=ZERO
      DJKSQ=ZERO
      DJASQ=ZERO
      DUPSQ=ZERO
      DO 20 M=1,3
      TP=C(J,M)
      T=C(I,M)-TP
      DJISQ=DJISQ+T*T
      T=C(K,M)-TP
      EJK(M)=T
      DJKSQ=DJKSQ+T*T
   20 UN(M)=A(M)-TP
      DJI=DSQRT(DJISQ)
      DJK=DSQRT(DJKSQ)
C     MAKE JA PERPENDICULAR TO I-J-K.
      CALL VPROD(UP,EJK,UN)
      CALL VPROD(UN,UP,EJK)
      DO 10 M=1,3
      DJASQ=DJASQ+UN(M)*UN(M)
   10 DUPSQ=DUPSQ+UP(M)*UP(M)
      IF(DJASQ.LE.TENM8)GO TO 60
      II=3*(I-1)
      JJ=3*(J-1)
      KK=3*(K-1)
      IF(IC.EQ.2)GO TO 45
      DJA=DSQRT(DJASQ)
      DO 40 M=1,3
      T=-UN(M)/DJA
      IF(DABS(T).LT.TENM8)GO TO 40
      SMI=T/DJI
      B(NOB,II+M)=SMI
      SMK=T/DJK
      B(NOB,KK+M)=SMK
      B(NOB,JJ+M)=-SMI-SMK
   40 CONTINUE
      RETURN
   45 DUP=DSQRT(DUPSQ)
      DO 50 M=1,3
      T=-UP(M)/DUP
      IF(DABS(T).LT.TENM8)GO TO 50
      SMI=T/DJI
      B(NOB,II+M)=SMI
      SMK=T/DJK
      B(NOB,KK+M)=SMK
      B(NOB,JJ+M)=-SMI-SMK
   50 CONTINUE
      RETURN
C     A IS COLINEAR WITH I-J-K.
   60 IER=-2
      RETURN
      END
      SUBROUTINE INVERT(MA,IER,IR,IC)
C
C     THIS ROUTINE INVERTS MATRIX A IN PLACE.
C
C     A IS (NA3 X NA3), BUT ONLY PORTION MA X MA IS USED.
C     DETA RETURNS THE DETERMINANT OF A.
C     IER IS 0 FOR A NORMAL RETURN, -2 IF THE INVERSION FAILS.
C     IR AND IC ARE WORK ARRAYS (SIZE: MA).
C     DETA CONTAINS THE DETERMINANT OF A (NOT RETURNED, BUT COULD BE).
C
C     THIS ROUTINE MODIFIED FROM U OF T FORTRAN LIBRARY (PGM 'MINVRD').
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C#
C     PARAMETER (NA=#NA)
C##
      PARAMETER (NA= 36)
C###
      PARAMETER (NA3=3*NA)
      PARAMETER (ZERO=0.0D0, ONE=1.0D0)
C
      COMMON/C711B/A(NA3,NA3)
      COMMON/IO/IN,IOUT,IODUM(215)
C
      DIMENSION IR(MA), IC(MA)
C
      DOUBLE PRECISION MACHEP
C
      SAVE MACHEP
C
      DATA MACHEP/0.0D0/, PT5/0.5D0/, SIXTEN/16.0D0/
C
C     COMPUTE MACHEP, THE RELATIVE MACHINE PRECISION, IF NECESSARY.
C
      IF (MACHEP .EQ. ZERO) THEN
         EPS = ONE
C
    1    EPS = PT5 * EPS
         TOL1 = EPS + ONE
         IF ((TOL1.GT.ONE) .AND. (TOL1-EPS.EQ.ONE)) GO TO 1
         IF (TOL1-EPS .EQ. ONE) EPS = EPS + EPS
         MACHEP = EPS
      END IF
C
      IER=0
      DO 10 I=1,MA
      IR(I)=0
   10 IC(I)=0
      DETA=ONE
      DO 200 M=1,MA
C     FIND LARGEST (ABSOLUTE) ELEMENT OF A LEFT.
      TEMP=ZERO
      DO 20 K=1,MA
      IF(IR(K).NE.0)GO TO 20
      DO 30 L=1,MA
      IF(IC(L).NE.0)GO TO 30
      T=DABS(A(K,L))
      IF(T.LT.TEMP)GO TO 30
      I=K
      J=L
      TEMP=T
   30 CONTINUE
   20 CONTINUE
C     FIRST TIME, SET ERROR THRESHOLD.
      IF(M.EQ.1)THRES=TEMP*SIXTEN*MACHEP
C     PIVOT ELEMENT IS A(I,J).
      PIV=A(I,J)
      DETA=DETA*PIV
      IR(I)=J
      IC(J)=I
C     CHECK FOR A NEAR ZERO PIVOT ELEMENT.
      IF(TEMP.GT.THRES)GO TO 100
C     HAS WE ALREADY FOUND A ZERO PIVOT?
      IF(IER.NE.0)GO TO 200
      IER=-2
      IROW=J
      ICOL=I
      GO TO 200
  100 PIV=ONE/PIV
      DO 40 K=1,MA
   40 A(I,K)=A(I,K)*PIV
      A(I,J)=PIV
      DO 50 K=1,MA
      IF(K.EQ.I)GO TO 50
      PIV1=A(K,J)
      DO 60 L=1,MA
   60 A(K,L)=A(K,L)-PIV1*A(I,L)
      A(K,J)=PIV1
   50 CONTINUE
      DO 70 K=1,MA
   70 A(K,J)=-PIV*A(K,J)
      A(I,J)=PIV
  200 CONTINUE
C     RESTORE ORIGINAL ROW AND COLUMN ORDER.
      DO 80 I=1,MA
      K=IC(I)
      M=IR(I)
      IF(K.EQ.I)GO TO 80
      DETA=-DETA
      DO 90 L=1,MA
      TEMP=A(K,L)
      A(K,L)=A(I,L)
   90 A(I,L)=TEMP
      DO 95 L=1,MA
      TEMP=A(L,M)
      A(L,M)=A(L,I)
   95 A(L,I)=TEMP
      IC(M)=K
      IR(K)=M
   80 CONTINUE
      IF(IER.EQ.0)RETURN
C     MATRIX INVERSION ERROR.
C     IROW AND ICOL ARE THE ROW AND COLUMN NOS FOR A SINGULAR MATRIX:
C     ROW 'IROW' IS DEPENDENT: ROW 'IROW' = SUM  A(K,ICOL)*ROW 'K'
C     FOR K=1,2,...,MA , K.NE.IROW.
      WRITE(IOUT,1000)
      DO 250 J=1,MA
      IF(J.EQ.IROW)WRITE(IOUT,1010)J
  250 IF(J.NE.IROW)WRITE(IOUT,1020)J,A(J,ICOL)
      RETURN
 1000 FORMAT(/'0ERROR IN MATRIX INVERSION ... REMOVE LINEAR DEPENDENCE:'
     1 /'0 TERM   CONTRIBUTION TO DEPENDENCE'/)
 1010 FORMAT(' *',I4,' *',8X,'DEPENDENT TERM')
 1020 FORMAT(2X,I4,9X,F12.5)
      END
