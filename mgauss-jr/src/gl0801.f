C     GL0801       15 AUG 91                                         MRP
C?IBM/GLD/GBR/VAX/UNX
      SUBROUTINE BOYLOC
C??
C?CDC
C     PROGRAM BOYLOC
C??
C=LOCALIZED ORBITALS
C CHAPTER 12: LOCALIZED ORBITALS.
C ***********
C
C1INTRODUCTION
C     LINK 0801
C*
C     THIS PROGRAM PERFORMS BOYS LOCALIZATION AND SIZE CALCULATIONS.
C==
C*
C1
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C#
C     PARAMETER (NA=#NA, NB=#NB)
C##
      PARAMETER (NA= 36, NB=200)
C###
      PARAMETER (NB1=NB*(NB+1))
C
      COMMON /A/ IOP(99),IC1(NA),IC2(4),NBE,NE,NBASIS,CD1(NA,3),
     1 CD2(4),IC3(401)
      COMMON/C801A/C(NB,NB)
      COMMON/C801B/XY(NB1)
      COMMON/C801C/S(NB,NB)
      COMMON/C801D/NMO,IPASS,CLMO(3,NB)
C
      COMMON/IO/IN,IOUT,IPUNCH,IODUM1(7),IFORMT,IODUM2(206)
C
      IPASS=1
      IBOYS = IOP(28)
      IF (IBOYS .NE. 0) REWIND IFORMT
C
   10 CALL LOCAL
      IF(IOP(1).NE.0)RETURN
      IF(IOP(14).EQ.1)CALL MOSIZE
      IF(IOP(1).NE.0.OR.IOP(9).EQ.0.OR.IPASS.NE.1.OR.NBE.EQ.0) THEN
         IF (IBOYS .NE. 0) THEN
            IF (IBOYS .EQ. 1) ENDFILE IFORMT
            REWIND IFORMT
         END IF
         RETURN
      END IF
      IPASS=2
      GO TO 10
      END
      SUBROUTINE LOCAL
C*
C     THIS PROGRAM PERFORMS BOYS LOCALIZATION AND SIZE CALCULATIONS
C=
C1INTRODUCTION
C     VERSION: AUGUST 1991.
C
C     THE LMO COEFFICIENTS WILL BE SAVED ON DISK:
C     ALPHA OR CLOSED SHELL IN FILE 40, BETA IN FILE 42.
C
C1OPTIONS
C     ******************************************************************
C     OPTIONS ... IOP()
C     ******************************************************************
C
C     IOP(13) = 0 USE 0.08 AS CRITICAL TOLERANCE TO FIND BONDS IN FBOND
C             = N USE 0.02*N AS THE CRITICAL TOLERANCE TO FIND BONDS
C
C     IOP(14) = 0 SIZES ARE NOT CALCULATED
C             = 1 LMO SIZES ARE CALCULATED
C
C     IOP(15) = 0 NO PUNCHING OF THE L.C.A.O.-L.O. MATRIX
C             = 1 PUNCH OF THE L.C.A.O.-L.O. MATRIX
C
C     IOP(16) = N MAXIMUM NUMBER OF ITERATIONS = (300 + 50*N)
C
C     IOP(17) = N LOCALIZATION CRITERIUM THRESHOLD EQUALS 10**-N
C             = 0 5*10**-6 IS ASSUMED
C
C     IOP(18) = 0 DO NOT PRINT SECOND MOMENT INTEGRALS FOR SIZE CALC.
C             = 1 PRINT SECOND MOMENT INTEGRALS FROM SIZE CALCULATION
C
C     IOP(19) = 0 DO NOT PUNCH 'SIZE' CARDS.
C               1 PUNCH 'SIZE' CARDS FOR CORRELATION ENERGY FITS.
C                 THE CARDS WILL CONTAIN THE SIZE (R), THE ELLIPSOID
C                 AXIS LENGTHS, AND THE CENTROID OF CHARGE (ALL IN
C                 ANGSTROMS, WITH FORMAT 7F10.5) FOR EACH LMO.
C               2 PUCH SIZE DATA ( AS IN 1 ) AND SECOND MOMENT MATRIX
C                 EVALUATED AT THE CENTROID OF CHARGE. FORMAT USE IS
C                 XX,YY,ZZ,XY,XZ,YZ.
C
C     IOP(20) TO IOP(22) ARE USED BY THE ONE ELECTRON PROPERTIES
C             PROGRAM (LINK 0802).
C
C     IOP(23) = 0 DO NOT READ LOCALIZATION CONTROL CARD(S).
C             = 1 READ LOCALIZATION CONTROL CARD(S) - SEE BELOW.
C
C     IOP(24) IS USED BY THE ONE ELECTRON PROPERTIES PROGRAM
C             (LINK 0802).
C
C     IOP(25) IS USED BY THE ONE ELECTRON PROPERTIES PROGRAM
C             (LINK 0802), AND THE POLARIZABILITY ESTIMATE PROGRAM
C             (LINK 0803).
C
C     IOP(26) = 0 NO PUNCHING OF THE L.C.A.O.-L.O. MATRIX.
C             = 1 PUNCH THE L.C.A.O.-L.O. TRANSFORMATION MATRIX.
C
C     IOP(27) IS USED BY THE ONE ELECTRON PROPERTIES PROGRAM
C             (LINK 0802).
C
C     IOP(28) = 0 USE STANDARD BOYS LOCALIZATION.
C               1 ZERO FIELD LMO POLARIZABILITY CASE: SAVE LMO
C                 ROTATION DATA TO UNIT IFORMT.
C               2 FINITE FIELD LMO POLARIZABILITY CASE: READ LMO
C                 ROTATION DATA FROM UNIT IFORMT.
C
C     IOP(29) = 0 NO DEBUG PRINTING FOR LMO POLARIZABILITY.
C             = 1 DO DEBUG PRINTING FOR LMO POLARIZABILITY.
C
C     IOP(30) TO IOP(60) ARE NOT USED.
C     ******************************************************************
C
C1INTRODUCTION
C     LOCALIZATION CONTROL CARDS MAY BE USED TO LOCALIZE THE CMO IN
C     SUBSETS - EG TO SEPARATE SIGMA AND PI TYPE ORBITALS, OR BY
C     SYMMETRIES. THE CARD FORMAT IS 36I2, WHERE EACH ENTRY GIVES THE
C     SUBSET NUMBER EACH MO BELONGS TO. THE SUBSETS MUST BE NUMBERED
C     SEQUENTIALLY FROM 1. TWO SETS OF CONTROL CARDS ARE REQUIRED FOR
C     OPEN SHELL MOLECULES - ONE FOR THE ALPHA SPIN MO, ONE FOR BETA.
C     NOTE THAT ONLY NAE, THE NUMBER OF OCCUPIED (ALPHA) MO, CONTROL
C     CARD ENTRIES ARE READ, NOT THE TOTAL NUMBER OF ATOMIC ORBITALS.
C     NBE ENTRIES ARE READ FOR THE OCCUPIED BETA SPIN ORBITALS FOR OPEN
C     SHELL MOLECULES. E.G. THE CARD
C      1 1 1 2 1 2 3
C     WOULD LOCALIZE MO 1, 2, 3 AND 5 AS A GROUP, THEN 4 AND 6
C     TOGETHER, AND MO 7 IS ALONE IN THE THIRD GROUP.
C*
C     NOTE THAT MOST RHF OPEN SHELL STATES WILL NOT LOCALIZE PROPERLY
C     AS THEY ARE NOT REPRESENTABLE BY A SINGLE DETERMINANT.
C*
C     LOCAL IS AN EXTENSIVELY MODIFIED VERSION OF BOYLOC, QCPE 10, 330
C     (1975) BY D. PEETERS
C==
C*
C/
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      CHARACTER TITLE*72,IELEM*4,NAMES*8
C#
C     PARAMETER (NA=#NA, NX=#NB)
C##
      PARAMETER (NA= 36, NX=200)
C###
      PARAMETER (NA3=3*NA, NZ=NA3-6)
      PARAMETER (NXX=NX*(NX+1)/2, NBF1=NX*NX-NXX, NBP1=NX+1)
      PARAMETER (NE=2*NX)
C
      COMMON /A/ IOP(99)
      COMMON /A/ NATOMS,ICHARG,MULTIP,IAN(NA),NAE,NBE,NEDUM,NBASIS
      COMMON /A/ COORD(NA,3),ANTOAU,CDUM(3),ICDUM(401)
C
      COMMON/C801A/C(NX,NX)
      COMMON/C801B/X(NXX),Y(NXX)
      COMMON/C801C/Z(NXX),FILL(NBF1)
      COMMON/C801D/NMO,IPASS,CLMO(3,NX)
      COMMON/ZMATC/TITLE,IELEM(NA),NAMES(NZ)
C
      COMMON/IO/IN,IOUT,IPUNCH,IODUM1(7),IFORMT,IODUM2(206)
C
      DIMENSION T(NX,NX),S(NX,NX),XX(NX,NX)
      DIMENSION F(NX),EIG(NE),LMOSET(NX)
C
C     THE COMMON BLOCKS ARE STRUCTURED AS FOLLOWS:
C     /C801B/X(NXX),Y(NXX)      OR   /C801B/F(NX),T(NX,NX)
C     /C801C/Z(NXX),FILL(NBF1)  OR   /C801C/S(NX,NX)
C
      EQUIVALENCE (X(1),XX(1,1),F(1))
      EQUIVALENCE (T(1,1),X(NBP1)),(S(1,1),Z(1))
C
      DATA ZERO/0.D0/,ONE/1.0D0/,TWO/2.0D0/,PT25/0.25D0/,TEN/10.0D0/
      DATA TENM8/1.D-8/,PT5/0.5D0/,PT707/0.70710675D0/
      DATA PT38/0.3826834325D0/,PT92/0.9238795329D0/,TENM5/1.0D-5/
      DATA CRIT/5.0D-6/
C
 1000 FORMAT('1',24('*'),/' * LOCALIZATION PROGRAM *',21X,
     1 'BOYS PROCEDURE'/1X,24('*')///)
 1010 FORMAT('03 SUCCESSIVE FUNCTION DECREASES ... LOCALIZATION ',
     1 'PROCESS TERMINATED')
 1020 FORMAT('***L',I4,2I8,2I4,A40,'*L',I6)
 1030 FORMAT(T73,'*L',I6,T1,6F12.7)
 1040 FORMAT(' ALPHA SPIN ORBITALS'///)
 1050 FORMAT(' BETA SPIN ORBITALS'///)
 1060 FORMAT('0LOCALIZATION PROCESS HAS NOT CONVERGED AFTER',
     1   I6,' ITERATIONS'/' ',61('*')///)
 1070 FORMAT(' AT ITERATION ',I3,' THE LOCALIZATION FUNCTION = ',D15.8)
 1080 FORMAT(' ',50('*'),' FUNCTION DECREASING AT ITERATION ',I4)
 1090 FORMAT('0LOCALIZATION PROCESS HAS CONVERGED AT ITERATION',I4///)
 1100 FORMAT(' *** WARNING: LMO FROM RHF SCF RUNS ARE DETERMINED AT ',
     1 'THE USERS RISK ***'///)
 1110 FORMAT('0DECK ***L PUNCHED TO UNIT',I4,' FOR: ',A40)
 1120 FORMAT('***T  42',2I8,2I4,A40,'*T',I6)
 1130 FORMAT(T73,'*T',I6,T1,6F12.7)
 1140 FORMAT('0DECK ***T PUNCHED TO UNIT',I4,' FOR: ',A40)
 1150 FORMAT(' CA =',F12.8,', SA =',F12.8,', I =',I4,', J =',I4)
 1160 FORMAT('0THE ABOVE LOCALIZATION ROTATIONS WERE SAVED',
     1 ' ON FILE',I4,'.')
 1170 FORMAT('0*** WARNING: THE ABOVE LOCALIZATION(S) WERE DONE BY',
     1 ' APPLYING THE ORBITAL ROTATIONS FROM FILE',I4,'.')
 2000 FORMAT(//'0CENTROIDS OF THE LOCALIZED ORBITALS'/
     1 '0   MO',17X,'ANGSTROMS',33X,'BOHR'/)
 2010 FORMAT(' ',I5,5X,3F10.5,10X,3F10.5)
 2020 FORMAT('1LOCALIZED ORBITALS')
 2040 FORMAT('1TRANSFORMATION MATRIX (CMO BY LMO)'//)
 2060 FORMAT(//'0ENERGY PARTITIONING (IN HARTREES)'//
     1 20X,'EIG',22X,'H',23X,'N',20X,'TOTAL'/)
 2070 FORMAT('0',I4,4(F20.5,4X))
C*
      WRITE(IOUT,1000)
      IF(IOP(9).EQ.2)WRITE(IOUT,1100)
      NCARD=0
      IBOYS = IOP(28)
      IF(IPASS.EQ.2)GO TO 20
C     CLOSED SHELL OR ALPHA SPIN.
      IC=25
      IL=40
      NMO=NAE
      IF(IOP(9).NE.0)WRITE(IOUT,1040)
      GO TO 30
C     BETA SPIN.
   20 IC=27
      IL=42
      NMO=NBE
      WRITE(IOUT,1050)
   30 EPSI=CRIT
      IF(IOP(17).NE.0)EPSI=TEN**(-IOP(17))
      THRD=TENM8
C     LOOP OVER ALL POSSIBLE SUBSET NUMBERS.
      DO 290 LSET=1,100
      CALL SUBSET(IC,IL,NMOSET,LSET,LMOSET,EIG,NX)
      IF(IOP(1).NE.0.OR.IOP(10).EQ.0)RETURN
      IF(NMOSET.EQ.0)GO TO 300
      IFL=0
      NIT=0
      F1=ZERO
C     TRANSFORMS A.O. INTEGRALS INTO M.O. INTEGRALS
C     DO Y FIRST, AND SAVE ON DISK TEMPORARILY.
      CALL TREAD(35,XX,NX,NX,NBASIS,NBASIS,1)
      CALL SIM(XX,NMOSET,NBASIS,EIG)
      I=(NMOSET*(NMOSET+1))/2
      CALL TWRITE(33,X,NXX,1,I,1,0)
      CALL TREAD(34,XX,NX,NX,NBASIS,NBASIS,1)
      CALL SIM(XX,NMOSET,NBASIS,EIG)
      CALL TREAD(36,S,NX,NX,NBASIS,NBASIS,1)
      CALL SIM(S,NMOSET,NBASIS,EIG)
      CALL TREAD(33,Y,NXX,1,I,1,0)
      IF(NMOSET.EQ.1)GO TO 56
   10 NIT=NIT+1
      IF(NIT.LE.300+50*IOP(16))GO TO 110
      WRITE(IOUT,1060) NIT
      GO TO 58
  110 IND=0
      INDI=1
      F2=F1
      F1=ZERO
      DO 40 I=2,NMOSET
      INDJ=0
      IND=IND+1
      INDI=INDI+I
      NVEC=I-1
      DO 40 J=1,NVEC
      INDJ=INDJ+J
      IND=IND+1
      XI=X(INDI)
      XJ=X(INDJ)
      XD=XI-XJ
      YI=Y(INDI)
      YJ=Y(INDJ)
      YD=YI-YJ
      ZI=Z(INDI)
      ZJ=Z(INDJ)
      ZD=ZI-ZJ
      XC=X(IND)
      YC=Y(IND)
      ZC=Z(IND)
      B=XD*XC+YD*YC+ZD*ZC
      A=PT25*(XD*XD+YD*YD+ZD*ZD)-(XC*XC+YC*YC+ZC*ZC)
      IF(DABS(A).LE.THRD)A=ZERO
      IF(DABS(B).LE.THRD)B=ZERO
C     SELECTS ROTATION ANGLE
      IF(A) 150,152,154
  150 IF(B) 164,160,156
  152 IF(B) 172, 40,176
  154 IF(B) 164,184,156
  156 T1=ONE/DSQRT(A*A+B*B)
      C4=A*T1
      TEMP=DSQRT(TWO+C4+C4)
C     HADDON AND WILLIAMS  CHEM. PHYS. LETTERS 42 453 1976
      CA=PT5*DSQRT(TWO+TEMP)
      SA=-PT5*DSQRT(TWO-TEMP)
      GO TO 32
  160 SA=PT707
      CA=PT707
      GO TO 32
  164 T1=ONE/DSQRT(A*A+B*B)
      C4=A*T1
      TEMP=DSQRT(TWO+C4+C4)
      SA=PT5*DSQRT(TWO-TEMP)
      CA=PT5*DSQRT(TWO+TEMP)
      GO TO 32
  172 SA=PT38
      CA=PT92
      GO TO 32
  176 CA=PT38
      SA=PT92
      GO TO 32
  184 CA=ONE
      SA=ZERO
C     ROTATES THE M.O. COEFFICIENTS AND THE DIPOLE MOMENT INTEGRALS
C     IF IBOYS=1, SAVE THE LMO ROTATION DATA ON UNIT IFORMT.
C     IF IBOYS=2, READ THE LMO ROTATION DATA FROM UNIT IFORMT.
   32 IF (IBOYS .EQ. 1) THEN
         WRITE (IFORMT) CA, SA
         IF (IOP(29) .NE. 0) WRITE (IOUT,1150) CA, SA, I, J
      ELSE IF (IBOYS .EQ. 2) THEN
         READ (IFORMT) CA, SA
         IF (IOP(29) .NE. 0) WRITE (IOUT,1150) CA, SA, I, J
      END IF
      DO 36 IP=1,NBASIS
      C1=C(IP,I)
      C2=C(IP,J)
      C(IP,I)=C1*CA-C2*SA
   36 C(IP,J)=C2*CA+C1*SA
      CSA=CA*SA
      CCA=CA*CA
      SSA=SA*SA
      CALL ROTAT(X,I,J,CA,SA,NMOSET)
      X(INDI)=XI*CCA+XJ*SSA-TWO*XC*CSA
      X(INDJ)=XI*SSA+XJ*CCA+TWO*XC*CSA
      X(IND)=XD*CSA+XC*(CCA-SSA)
      CALL ROTAT(Y,I,J,CA,SA,NMOSET)
      Y(INDI)=YI*CCA+YJ*SSA-TWO*YC*CSA
      Y(INDJ)=YI*SSA+YJ*CCA+TWO*YC*CSA
      Y(IND)=YD*CSA+YC*(CCA-SSA)
      CALL ROTAT(Z,I,J,CA,SA,NMOSET)
      Z(INDI)=ZI*CCA+ZJ*SSA-TWO*ZC*CSA
      Z(INDJ)=ZI*SSA+ZJ*CCA+TWO*ZC*CSA
      Z(IND)=ZD*CSA+ZC*(CCA-SSA)
   40 CONTINUE
      IND=0
      DO 46 I=1,NMOSET
      IND=IND+I
   46 F1=F1+X(IND)**2+Y(IND)**2+Z(IND)**2
      WRITE(IOUT,1070)NIT,F1
      IF (IBOYS - 1) 6000, 6001, 6002
C     DO NORMAL BOYS LOCALIZATION.
 6000 IF(F1-F2.GT.EPSI)GO TO 10
      IF(F1-F2.GT.-TENM5)GO TO 56
      IFL=IFL+1
      WRITE(IOUT,1080) NIT
      IF(IFL.LE.3)GO TO 10
      WRITE(IOUT,1010)
      GO TO 58
   56 WRITE(IOUT,1090) NIT
      GO TO 58
C     IBOYS=1 CASE - RECORD THE NO-FIELD BEHAVIOUR.
 6001 IF(F1-F2.GT.EPSI)THEN
         NEXT=1
         WRITE(IFORMT)NEXT
         GO TO 10
      ENDIF
      IF(F1-F2.GT.-TENM5)THEN
         NEXT=2
         WRITE(IFORMT)NEXT
         GO TO 56
      ENDIF
      IFL=IFL+1
      WRITE(IOUT,1080)NIT
      IF(IFL.LE.3)THEN
         NEXT=3
         WRITE(IFORMT)NEXT
         GO TO 10
      ENDIF
      WRITE(IOUT,1010)
      NEXT=4
      WRITE(IFORMT)NEXT
      GO TO 58
C     IBOYS=2 CASE - DUPLICATE THE NO-FIELD BEHAVIOUR.
 6002 READ(IFORMT)NEXT
      IF(NEXT.EQ.1)GO TO 10
      IF(NEXT.EQ.2)GO TO 56
      IFL=IFL+1
      WRITE(IOUT,1080)NIT
      IF(NEXT.EQ.3)GO TO 10
      WRITE(IOUT,1010)
C     END OF SPECIAL BOYS CODE.
   58 IND1=0
      DO 62 I=1,NMOSET
      IND1=IND1+I
      CLMO(1,I)=X(IND1)
      CLMO(2,I)=Y(IND1)
   62 CLMO(3,I)=Z(IND1)
      CALL TREAD(IC,S,NX,NX,NBASIS,NMO,0)
      CALL LSHFT(S,NBASIS,NMO,LSET,LMOSET)
      DO 75 J=1,NMOSET
      DO 75 I=1,NBASIS
   75 T(J,I)=S(I,J)
      CALL TREAD(8,S,NX,NX,NBASIS,NBASIS,1)
      CALL MAPRO1 (T,NMOSET,NBASIS,NBASIS,S,F)
      CALL MAPRO1 (T,NMOSET,NBASIS,NMOSET,C,F)
C     GET EIGENVALUES.
      IF(IPASS.EQ.2)GO TO 870
      CALL TREAD(5,EIG,NX,1,NMO,1,0)
      GO TO 890
  870 CALL TREAD(5,EIG,NX+NX,1,NBASIS+NMO,1,0)
      DO 880 I=1,NMO
  880 EIG(I)=EIG(NBASIS+I)
  890 K=0
      DO 900 I=1,NMO
      IF(LMOSET(I).NE.LSET)GO TO 900
      K=K+1
      EIG(K)=EIG(I)
  900 CONTINUE
C     FOCK MATRIX OVER LMO BASIS (DIAGONAL ELEMENTS ONLY)
      DO 950 I=1,NMOSET
      SUM=ZERO
      DO 940 K=1,NMOSET
  940 SUM=SUM+T(K,I)*T(K,I)*EIG(K)
C     SAVE 'EIGENVALUES' OF LMO IN BETA EIGENVALUE POSITIONS
  950 EIG(NX+I)=SUM
C     SORT LMO EIGENVALUES INTO ASCENDING ORDER
      IF(NMOSET.EQ.1)GO TO 290
      NMOM1=NMOSET-1
      DO 250 IQ=1,NMOM1
      I=IQ+1
      EIGK=EIG(NX+IQ)
      IP=IQ
      DO 210 J=I,NMOSET
      IF(EIG(NX+J).GE.EIGK)GO TO 210
      EIGK=EIG(NX+J)
      IP=J
  210 CONTINUE
      IF(IP.EQ.IQ)GO TO 250
C     SWITCH LMO IP AND IQ
      EIG(NX+IP)=EIG(NX+IQ)
      EIG(NX+IQ)=EIGK
C     SWITCH CENTROIDS OF CHARGE
      DO 220 I=1,3
      A=CLMO(I,IP)
      CLMO(I,IP)=CLMO(I,IQ)
  220 CLMO(I,IQ)=A
C     SWITCH COLUMNS OF C AND T MATRICES
      DO 230 I=1,NBASIS
      A=C(I,IP)
      C(I,IP)=C(I,IQ)
  230 C(I,IQ)=A
      DO 240 I=1,NMOSET
      A=T(I,IP)
      T(I,IP)=T(I,IQ)
  240 T(I,IQ)=A
  250 CONTINUE
  290 CONTINUE
C     PRINT CENTROIDS, LMO AND TRANSFORMATION MATRIX
  300 IF (IBOYS .EQ. 1) THEN
         WRITE (IOUT,1160) IFORMT
      ELSE IF (IBOYS .EQ. 2) THEN
         WRITE (IOUT,1170) IFORMT
      END IF
      WRITE(IOUT,2000)
      DO 310 I=1,NMO
      XI = CLMO(1,I) / ANTOAU
      YI = CLMO(2,I) / ANTOAU
      ZI = CLMO(3,I) / ANTOAU
  310 WRITE(IOUT,2010)I,XI,YI,ZI,(CLMO(J,I),J=1,3)
      WRITE(IOUT,2020)
      CALL GBSOUT(C,EIG,NX,NX,NMO,0)
      WRITE(IOUT,2040)
      CALL MATOUT(T,NX,NX,NMO,NMO)
C
C     PUNCH LMO COEFFICIENTS IF REQUIRED.
C
      IF(IOP(15).EQ.0)GO TO 340
      J=1
      IF(IOP(9).NE.0)J=2
      NCARD=NCARD+1
      WRITE(IPUNCH,1020)IL,NBASIS,NMO,IPASS,J,TITLE(1:40),NCARD
C
      DO 330 I=1,NMO
      KEND=0
C
  320 KSTART=KEND+1
      IF(KSTART.GT.NBASIS)GO TO 330
      KEND=MIN0(KEND+6,NBASIS)
      NCARD=NCARD+1
      WRITE(IPUNCH,1030) NCARD, (C(K,I),K=KSTART,KEND)
      GO TO 320
  330 CONTINUE
C
      WRITE (IOUT,1110) IPUNCH, TITLE(1:40)
C
C     PUNCH LMO T MATRIX IF REQUIRED.
C
  340 IF(IOP(26).EQ.0)GO TO 370
      J=1
      IF(IOP(9).NE.0)J=2
      NCARD=NCARD+1
      WRITE(IPUNCH,1120)NMO,NMO,IPASS,J,TITLE(1:40),NCARD
C
      DO 360 I=1,NMO
      KEND=0
C
  350 KSTART=KEND+1
      IF(KSTART.GT.NMO)GO TO 360
      KEND=MIN0(KEND+6,NMO)
      NCARD=NCARD+1
      WRITE(IPUNCH,1130) NCARD, (T(K,I),K=KSTART,KEND)
      GO TO 350
  360 CONTINUE
C
      WRITE (IOUT,1140) IPUNCH, TITLE(1:40)
C
C     SAVE LMO ON DISK
C
  370 CALL TWRITE(IL,C,NX,NX,NBASIS,NMO,0)
C     MONOELECTRONIC L.O. ENERGY CONTRIBUTION
      CALL TREAD(13,T,NX,NX,NBASIS,NBASIS,1)
      DO 980 I=1,NMO
      SUM=ZERO
      DO 970 IP=1,NBASIS
      DO 970 IQ=1,NBASIS
  970 SUM=SUM+C(IP,I)*C(IQ,I)*T(IP,IQ)
C     SAVE MONOELECTRONIC CONTRIBUTION IN ALPHA POSITIONS OF EIG
  980 EIG(I)=SUM
C     TOTAL ENERGY ANALYSIS USING THE L.O. ORBITALS
C     EIG(NX+I) HAS THE LMO EIGENVALUE (WAS CALLED E)
C     EIG(I) HAS THE MONOELECTRONIC CONTRIBUTION (WAS EN)
C     F(I) HAS THE NUCLEAR CONTRIBUTION (WAS RN)
      CALL FBOND(NMO)
      WRITE(IOUT,2060)
      DO 990 I=1,NMO
      A=EIG(NX+I)+EIG(I)+F(I)
  990 WRITE(IOUT,2070)I,EIG(NX+I),EIG(I),F(I),A
      RETURN
      END
      SUBROUTINE SUBSET(IC,IL,NMOSET,LSET,LMOSET,EIG,NX)
C*
C     SUBROUTINE TO GET SUBSET NUMBER LSET FROM THE MO'S ON FILE IC.
C     NMO IS THE TOTAL NUMBER OF MO, OF WHICH NMOSET ARE IN THE
C     CURRENT SUBSET, DETERMINED FROM THE CONTROL CARD STORED IN LMOSET.
C     IL IS THE FILE NUMBER FOR THE LMO COEFFICIENTS. NMOSET IS SET TO
C     0 AFTER THE LAST SUBSET.
C*
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C#
C     PARAMETER (NA=#NA, NB=#NB)
C##
      PARAMETER (NA= 36, NB=200)
C###
      PARAMETER (NE=2*NB)
      PARAMETER (ZERO=0.0D0)
C
      COMMON /A/ IOP(99),IC1(NA),IC2(6),NBASIS,CC1(NA,3),CC2(4),IC3(401)
C
      COMMON/C801A/C(NB,NB)
      COMMON/C801B/F(NB),T(NB,NB)
      COMMON/C801D/NMO,IPASS,CLMO(3,NB)
C
      COMMON/IO/IN,IOUT,IODUM(215)
C
      DIMENSION LMOSET(NX),EIG(NE)
C
      SAVE LCOUNT
C*
 1000 FORMAT(36I2)
 1010 FORMAT(' LMO SUBSETS:'/)
 1020 FORMAT(1X,36I3)
 1030 FORMAT(//'0LOCALIZATION FOR SUBSET',I3///)
 1040 FORMAT('0LOCALIZATION SUBSET SPECIFICATION ERROR: NOT ALL MO ',
     1 'INCLUDED')
C*
      IF(LSET-2)10,160,100
C     LCOUNT KEEPS COUNT OF LMO'S ALREADY LOCALIZED.
   10 LCOUNT=0
      DO 20 I=1,NMO
   20 LMOSET(I)=1
      IF(IOP(23).EQ.0)GO TO 30
C     READ LOCALIZATION CONTROL CARD.
      READ(IN,1000)(LMOSET(I),I=1,NMO)
      WRITE(IOUT,1010)
      WRITE(IOUT,1020)(LMOSET(I),I=1,NMO)
      IF(IOP(10).EQ.0)RETURN
      GO TO 210
C     NO SUBSETS.
   30 NMOSET=NMO
      IF(IOP(10).NE.0)CALL TREAD(IC,C,NX,NX,NBASIS,NMO,0)
      RETURN
C     SHIFT THIS SUBSET INTO CORRECT POSITIONS IN EIG, CLMO, C AND T.
  100 DO 150 JJ=1,NMOSET
      J=NMOSET+1-JJ
      EIG(NX+LCOUNT+J)=EIG(NX+J)
      DO 110 I=1,3
  110 CLMO(I,LCOUNT+J)=CLMO(I,J)
      DO 120 I=1,NBASIS
  120 C(I,LCOUNT+J)=C(I,J)
      DO 130 I=1,NMO
  130 T(I,LCOUNT+J)=ZERO
      DO 140 I=1,NMOSET
  140 T(LCOUNT+I,LCOUNT+J)=T(I,J)
  150 CONTINUE
      CALL TREAD(31,CLMO,3,NX,3,LCOUNT,0)
      CALL TREAD(32,EIG,NX+NX,1,NX+LCOUNT,1,0)
      CALL TREAD(4,T,NX,NX,NMO,LCOUNT,0)
      CALL TREAD(IL,C,NX,NX,NBASIS,LCOUNT,0)
      GO TO 200
C     BLOCK OFF FIRST PART OF T MATRIX IF NECESSARY.
  160 IF(NMOSET.EQ.NMO)GO TO 200
      JJ=NMOSET+1
      DO 170 I=1,NMOSET
      DO 170 J=JJ,NMO
  170 T(J,I)=ZERO
  200 LCOUNT=LCOUNT+NMOSET
C     GET NUMBER OF LMO IN NEXT SUBSET.
  210 NMOSET=0
      DO 220 I=1,NMO
  220 IF(LMOSET(I).EQ.LSET)NMOSET=NMOSET+1
      IF(NMOSET.EQ.0)GO TO 900
      IF(LSET.EQ.1)GO TO 230
C     SAVE CURRENT MATRICES ON DISK TEMPORARILY.
      CALL TWRITE(31,CLMO,3,NX,3,LCOUNT,0)
      CALL TWRITE(32,EIG,NX+NX,1,NX+LCOUNT,1,0)
      CALL TWRITE(4,T,NX,NX,NMO,LCOUNT,0)
      CALL TWRITE(IL,C,NX,NX,NBASIS,LCOUNT,0)
  230 CALL TREAD(IC,C,NX,NX,NBASIS,NMO,0)
      CALL LSHFT(C,NBASIS,NMO,LSET,LMOSET)
      WRITE(IOUT,1030)LSET
      RETURN
C     NO MO FOUND FOR CURRENT SUBSET - ARE ALL MO USED.
  900 IF(LCOUNT.EQ.NMO)RETURN
      WRITE(IOUT,1040)
      IOP(1)=-2
      RETURN
      END
      SUBROUTINE LSHFT(A,M,N,LSET,LMOSET)
C*
C     SUBROUTINE TO COMPRESS OUT UNWANTED COLUMNS OF MATRIX A,
C     DIMENSIONED #NB X #NB. M AND N SUPPLY CURRENT DIMENSIONS. ONLY
C     COLUMNS WITH LMOSET(I)=LSET ARE RETAINED.
C*
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C#
C     PARAMETER (NB=#NB)
C##
      PARAMETER (NB=200)
C###
      DIMENSION A(NB,NB),LMOSET(NB)
C
      JJ=0
      DO 20 J=1,N
      IF(LMOSET(J).NE.LSET)GO TO 20
      JJ=JJ+1
      DO 10 I=1,M
   10 A(I,JJ)=A(I,J)
   20 CONTINUE
      RETURN
      END
      SUBROUTINE SIM(X,NMO,NBASIS,WORK)
C*
C     THIS SUBROUTINE TRANSFORMS A.O. INTEGRALS INTO M.O. INTEGRALS
C*
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C#
C     PARAMETER (NB=#NB)
C##
      PARAMETER (NB=200)
C###
      PARAMETER (ZERO=0.0D0)
C
      COMMON/C801A/C(NB,NB)
C
      DIMENSION X(NB,NB),WORK(NB)
C
      DO 18 IP=1,NBASIS
      DO 12 J=1,NMO
      PROD=ZERO
      DO 10  K=1,NBASIS
   10 PROD = PROD+C(K,J)*X(IP,K)
   12 WORK(J)=PROD
      DO 14 J=1,NMO
   14 X(IP,J)= WORK(J)
   18 CONTINUE
      DO 28 J=1,NMO
      DO 22 I=1,NMO
      PROD=ZERO
      DO 20 K=1,NBASIS
   20 PROD= PROD+ C(K,I)*X(K,J)
   22 WORK(I)= PROD
      DO 24 I=1,NMO
   24 X(I,J)= WORK(I)
   28 CONTINUE
      IND=0
      DO 36 J=1,NMO
      DO 36 I=1,J
      IND=IND+1
   36 X(IND,1)=X(I,J)
      RETURN
      END
      SUBROUTINE ROTAT(X,I,J,CA,SA,NMO)
C
C     THIS SUBROUTINE ROTATES M.O. OFF DIAGONAL INTEGRALS
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C#
C     PARAMETER (NB=#NB)
C##
      PARAMETER (NB=200)
C###
      PARAMETER (NBB=NB*(NB+1)/2)
C
      DIMENSION X(NBB)
C
      DO 28 K=1,NMO
      IF(K-I)4,28,8
    4 IND1=(I*(I-1))/2+K
      GO TO 12
    8 IND1=(K*(K-1))/2+I
   12 IF(K-J)16,28,20
   16 IND2=(J*(J-1))/2+K
      GO TO 24
   20 IND2=(K*(K-1))/2+J
   24 A=X(IND1)
      B=X(IND2)
      X(IND1)=CA*A-SA*B
      X(IND2)=+SA*A+CA*B
   28 CONTINUE
      RETURN
      END
      SUBROUTINE FBOND(NMO)
C*
C     THIS SUBROUTINE FINDS THE NATURE OF THE BONDS.
C*
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C#
C     PARAMETER (NA=#NA, NX=#NB)
C##
      PARAMETER (NA= 36, NX=200)
C###
      PARAMETER (ZERO=0.0D0, ONE=1.0D0)
C
      COMMON /A/ IOP(99)
      COMMON /A/ NATOMS,ICHARG,MULTIP,IAN(NA),NAE,NBE,NE,NBASIS
      COMMON /A/ COORD(NA,3),CDUM(4),ICDUM(401)
C
      COMMON/C801A/C(NX,NX)
      COMMON/C801B/F(NX),T(NX,NX)
      COMMON/C801C/DUM(NX,NX)
      COMMON /BSINFO/ NVO(NA), IAOFF(NA)
C
      COMMON/IO/IN,IOUT,IODUM(215)
C
      DIMENSION IA(NX),IB(NX)
C
      EQUIVALENCE (IA(1),DUM(1,1)),(IB(1),DUM(1,2))
C*
      DATA TENM5/1.D-5/,PT5/0.5D0/,PT08/0.08D0/,PT02/0.02D0/
C
 1000 FORMAT('1BONDS IDENTIFIED USING CRITICAL LEVEL',F8.4/
     1 '0LMO BOND IDENTIFICATION MATRIX (ATOMS BY LMO)')
 1010 FORMAT('1NUCLEAR PARTITIONING NOT POSSIBLE AT CRITICAL LEVEL',
     1 F8.4/'0LMO BOND IDENTIFICATION MATRIX (ATOMS BY LMO)')
 1020 FORMAT('0LMO',I3,' IS CENTERED ON ATOM',I3)
 1030 FORMAT('0LMO',I3,' IS CENTERED ON ATOMS',I3,' AND',I3)
C
C     FORM BOND IDENTIFICATION MATRIX - SUM THE SQUARES OF THE LMO
C     COEFFICIENTS FOR A CENTER
      DO 10 I=1,NMO
      I2=0
      DO 30 J=1,NATOMS
      SUM=ZERO
      IF(IAN(J).EQ.0)GO TO 30
      I1=I2+1
      I2=I2+NVO(J)
      DO 20 K=I1,I2
   20 SUM=SUM+C(K,I)*C(K,I)
   30 T(J,I)=SUM
   10 CONTINUE
C     IDENTIFY MAJOR CONTRIBUTORS TO EACH LMO
      CRIT=PT08
      IF(IOP(13).NE.0)CRIT=DFLOAT(IOP(13))*PT02
      DO 60 I=1,NMO
      I1=0
      I2=0
      DO 50 J=1,NATOMS
      IF(T(J,I).LT.CRIT)GO TO 50
C     FOUND 3 MAJOR CONTRIBUTIONS - GIVE UP
      IF(I2.NE.0)GO TO 200
      IF(I1.NE.0)GO TO 40
C     FOUND FIRST MAJOR CONTRIBUTION
      I1=J
      GO TO 50
C     FOUND SECOND MAJOR ATOM FOR THIS LMO
   40 I2=J
   50 CONTINUE
C     HAVE WE FOUND AT LEAST 1 MAJOR CONTRIBUTOR - IF NOT, GIVE UP
      IF(I1.EQ.0)GO TO 200
      IF(I2.EQ.0)I2=I1
      IA(I)=I1
   60 IB(I)=I2
      WRITE(IOUT,1000)CRIT
      CALL GBSOUT(T,F,NX,NX,NMO,2)
C     REFERENCE FOR NUCLEAR PARTITIONING:
C     J.M. PARKS AND R.G. PARR, J. C. P. 28, 335 (1958)
      DO 80 I=1,NATOMS
      DO 80 J=1,I
      DX=COORD(I,1)-COORD(J,1)
      DY=COORD(I,2)-COORD(J,2)
      DZ=COORD(I,3)-COORD(J,3)
      RAD=DSQRT(DX*DX+DY*DY+DZ*DZ)
      IF(RAD.GT.TENM5)GO TO 70
      T(I,J)=ZERO
      T(J,I)=ZERO
      GO TO 80
   70 T(I,J)=ONE/RAD
      T(J,I)=T(I,J)
   80 CONTINUE
      DO 100 I=1,NMO
      SUM=ZERO
      I1=IA(I)
      I2=IB(I)
      IF(I1.EQ.I2)WRITE(IOUT,1020)I,I1
      IF(I1.NE.I2)WRITE(IOUT,1030)I,I1,I2
      DO 90 J=1,NMO
      I3=IA(J)
      I4=IB(J)
   90 SUM=SUM+T(I1,I3)+T(I1,I4)+T(I2,I3)+T(I2,I4)
  100 F(I)=SUM*PT5
      RETURN
C     BONDS NOT IDENTIFIED
  200 WRITE(IOUT,1010)CRIT
      CALL GBSOUT(T,F,NX,NX,NMO,2)
      DO 210 I=1,NMO
  210 F(I)=ZERO
      RETURN
      END
      SUBROUTINE MOSIZE
C*
C     SECOND MOMENT OVER LMO.
C
C     ROUTINE SPECIALLY ADAPTED FROM OEPROP BY RAY POIRIER.
C     6D TO 5D AND 10F TO 7F TRANSFORMATION ADDED BY MIKE PETERSON.
C     VERSION: JANUARY 1987.
C*
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C#
C     PARAMETER (NA=#NA, NB=#NB)
C     PARAMETER (NS=#NS, NP=#NP)
C##
      PARAMETER (NA= 36, NB=200)
      PARAMETER (NS=120, NP=300)
C###
      PARAMETER (NB2=NB*NB)
      PARAMETER (ZERO=0.0D0, ONE=1.0D0, TWO=2.0D0)
C
      INTEGER SHELLA,SHELLN,SHELLT,AOS,SHELLC
C
      COMMON /A/ IOP(99)
      COMMON /A/ NATOMS,ICHARG,MULTIP,IAN(NA),NE(3),NBASIS,C(NA,3)
      COMMON /A/ CDUM(4),ICDUM(401)
C
      COMMON/C801A/CC(NB,NB)
      COMMON/C801C/INEW,JNEW,KK,LL,ITYPE,JTYPE,ANORM(20),DINT(NB,6),
     1 AO(600)
      COMMON/C801D/NMO,IPASS,CLMO(3,NB)
      COMMON/B/IXYZ(NS),SHELLA(NS),SHELLN(NS),SHELLT(NS),
     1 SHELLC(NS),AOS(NS),NSHELL,MAXTYP,EXX(NP),C12(NP,2)
C
      COMMON/IO/IN,IOUT,IODUM(215)
C
      DIMENSION VAL(6),IULIM(4)
      DIMENSION FILL(NB2)
C
      EQUIVALENCE (FILL(1),INEW)
C
      DATA FOUR/4.0D0/
      DATA PT5/0.5D0/, THREE/3.0D0/, FIVE/5.0D0/, IULIM/1,4,6,10/
C*
 1000 FORMAT('1SECOND MOMENT INTEGRALS OVER LMOS'//13X,'XX',10X,
     1'YY',10X,'ZZ',10X,'XY',10X,'XZ',10X,'YZ'/)
 1010 FORMAT(1X,I5,6(1X,F11.6))
C*
      IF(IOP(10).EQ.0)RETURN
C     SET AO NORMALIZATION CONSTANTS FOR D/F SHELLS.
      ROOT2 = DSQRT(TWO)
      ROOT3=DSQRT(THREE)
      ROOT5=DSQRT(FIVE)
      R1=PT5*ROOT5/ROOT2
      R2=THREE/(ROOT5+ROOT5)
      R3=PT5*ROOT3
      R4=PT5*ROOT3/ROOT2
      Z1=FOUR/ROOT5
      Z2=ONE/ROOT5
      Z3=THREE/ROOT5
      DO 10 I=1,13
   10 ANORM(I)=ONE
      ANORM( 8)=ROOT3
      ANORM( 9)=ROOT3
      ANORM(10)=ROOT3
      ANORM(14)=ROOT5
      ANORM(15)=ROOT5
      ANORM(16)=ROOT5
      ANORM(17)=ROOT5
      ANORM(18)=ROOT5
      ANORM(19)=ROOT5
      ANORM(20)=ROOT3*ROOT5
      R3OV2=PT5*ROOT3
      DO 20 MM=1,6
      DO 20 I=1,NMO
   20 DINT(I,MM)=ZERO
C
C     LOOP OVER SHELLS - GET AO LIMITS FOR EACH SHELL.
C
      DO 900 ISHELL=1,NSHELL
      ITYPE=SHELLT(ISHELL)
      IAOS=AOS(ISHELL)-1
      ISTART=SHELLC(ISHELL)+1
C
      DO 900 JSHELL=1,ISHELL
      JTYPE=SHELLT(JSHELL)
      JAOS=AOS(JSHELL)-1
      JSTART=SHELLC(JSHELL)+1
      IEND=IULIM(ITYPE+1)
      JEND=IULIM(JTYPE+1)
      IMJ=ISHELL-JSHELL
C
C     SET TRANSFORMATION FLAG: A TRANSFORMATION IS REQUIRED IF PURE D/F
C     ORBITALS ARE PRESENT, OR IF CARTESIAN F ORBITALS ARE PRESENT
C     (DUE TO DIFFERENT ORDERING OF THE COMPONENTS BETWEEN MONSTERGAUSS
C     AND THE OEP PACKAGE).
C     OFFSET       MG        OEP
C     ------       ---       ---
C        0         XXX       XXX
C        1         YYY       YYY
C        2         ZZZ       ZZZ
C        3         XYY       XXY
C        4         XXY       XXZ
C        5         XXZ       XYY
C        6         XZZ       YYZ
C        7         YZZ       XZZ
C        8         YYZ       YZZ
C        9         XYZ       XYZ
C
      ITRANS=0
      IF(IOP(8).EQ.1.AND.(ITYPE.GE.2.OR.JTYPE.GE.2))ITRANS=1
      IF (ITYPE.EQ.3 .OR. JTYPE.EQ.3) ITRANS=1
C
C     LOOP OVER AO'S FOR THIS PAIR OF SHELLS.
C
      DO 100 KK=ISTART,IEND
      IF(IMJ.EQ.0)JEND=KK
      DO 100 LL=JSTART,JEND
C     PASS SHELL NUMBERS TO PROPB WHERE THEY CAN BE CHANGED.
      INEW=ISHELL
      JNEW=JSHELL
      CALL PROPB(VAL)
C     SAVE THE INTEGRAL VALUES IN AO(LL,KK,MM), WHERE
C     1 <= LL,KK <= 10, 1 <= MM <= 6. ALL INDEXING IS DONE LINEARLY.
      J1=LL+10*(KK-1)
      DO 100 MM=1,6
      AO(J1)=VAL(MM)
  100 J1=J1+100
C
C     AVOID THE TRANSFORMATION IF POSSIBLE.
C
      IF(ITRANS.EQ.0)GO TO 800
C     AT LEAST ONE SHELL IS D/F TYPE - EXPAND AO TO FULL MATRICES IF
C     ISHELL=JSHELL.
      IF(IMJ.NE.0)GO TO 200
C
      DO 110 K=ISTART,IEND
      DO 110 L=ISTART,K
      J1=L+10*(K-1)
      J2=K+10*(L-1)
      DO 110 MM=1,6
      AO(J2)=AO(J1)
      J1=J1+100
  110 J2=J2+100
C
C     DO D/F TRANSFORMATION AT J CENTER IF NECESSARY.
C
  200 IF (JTYPE-2) 300,210,250
C     D TRANSFORMATION.
  210 IF (IOP(8) .EQ. 0) GO TO 300
C     LOOP OVER EACH OF THE 6 INTEGRAL BLOCKS.
      DO 220 MM=1,6
      J1=100*MM+10*ISTART-109
C     LOOP OVER ALL BASIS FUNCTIONS AT I CENTER.
      DO 220 K=ISTART,IEND
C     SAVE X**2.
      T=AO(J1)
      AO(J1  )=AO(J1+2)-PT5*(T+AO(J1+1))
      T=R3OV2*(T-AO(J1+1))
      AO(J1+1)=AO(J1+4)
      AO(J1+2)=AO(J1+5)
      AO(J1+4)=AO(J1+3)
      AO(J1+3)=T
  220 J1=J1+10
      JEND=5
      GO TO 300
C
C     F TRANSFORMATION.
C     LOOP OVER EACH OF THE 6 INTEGRAL BLOCKS.
  250 DO 260 MM=1,6
      J1=100*MM+10*ISTART-109
C     LOOP OVER ALL BASIS FUNCTIONS AT I CENTER.
      DO 260 K=ISTART,IEND
C     FOR CARTESIAN F ORBITALS, SIMPLY RE-ORDER THE FUNCTIONS.
      IF (IOP(8) .EQ. 0) THEN
         T=AO(J1+3)
         AO(J1+3)=AO(J1+5)
         AO(J1+5)=AO(J1+4)
         AO(J1+4)=T
         T=AO(J1+6)
         AO(J1+6)=AO(J1+7)
         AO(J1+7)=AO(J1+8)
         AO(J1+8)=T
C     FOR PURE F ORBITALS, APPLY 10F-7F TRANSFORM TO THE ORIGINAL ORDER.
      ELSE
         F0 =AO(J1+2)-R2*(AO(J1+4)+AO(J1+6))
         F1P=R4*(Z1*AO(J1+7)-AO(J1)-Z2*AO(J1+5))
         F1M=R4*(Z1*AO(J1+8)-AO(J1+1)-Z2*AO(J1+3))
         F2P=R3*(AO(J1+4)-AO(J1+6))
         F2M=AO(J1+9)
         F3P=R1*(AO(J1)-Z3*AO(J1+5))
         F3M=R1*(Z3*AO(J1+3)-AO(J1+1))
         AO(J1  )=F0
         AO(J1+1)=F1P
         AO(J1+2)=F1M
         AO(J1+3)=F2P
         AO(J1+4)=F2M
         AO(J1+5)=F3P
         AO(J1+6)=F3M
      END IF
  260 J1=J1+10
      IF (IOP(8) .EQ. 1) JEND=7
C
C     DO D/F TRANSFORMATION AT I CENTER IF NECESSARY.
C
  300 IF (ITYPE-2) 800,310,350
C     D TRANSFORMATION.
  310 IF (IOP(8) .EQ. 0) GO TO 800
C     LOOP OVER EACH OF THE 6 INTEGRAL BLOCKS.
      DO 320 MM=1,6
      J1=100*(MM-1)+JSTART
C     LOOP OVER ALL BASIS FUNCTIONS AT J CENTER.
      DO 320 L=JSTART,JEND
C     SAVE X**2.
      T=AO(J1)
      AO(J1   )=AO(J1+20)-PT5*(T+AO(J1+10))
      T=R3OV2*(T-AO(J1+10))
      AO(J1+10)=AO(J1+40)
      AO(J1+20)=AO(J1+50)
      AO(J1+40)=AO(J1+30)
      AO(J1+30)=T
  320 J1=J1+1
      IEND=5
      GO TO 800
C
C     F TRANSFORMATION.
C     LOOP OVER EACH OF THE 6 INTEGRAL BLOCKS.
  350 DO 360 MM=1,6
      J1=100*(MM-1)+JSTART
C     LOOP OVER ALL BASIS FUNCTIONS AT J CENTER.
      DO 360 L=JSTART,JEND
C     FOR CARTESIAN F ORBITALS, SIMPLY RE-ORDER THE FUNCTIONS.
      IF (IOP(8) .EQ. 0) THEN
         T=AO(J1+30)
         AO(J1+30)=AO(J1+50)
         AO(J1+50)=AO(J1+40)
         AO(J1+40)=T
         T=AO(J1+60)
         AO(J1+60)=AO(J1+70)
         AO(J1+70)=AO(J1+80)
         AO(J1+80)=T
C     FOR PURE F ORBITALS, APPLY 10F-7F TRANSFORM TO THE ORIGINAL ORDER.
      ELSE
         F0 =AO(J1+20)-R2*(AO(J1+40)+AO(J1+60))
         F1P=R4*(Z1*AO(J1+70)-AO(J1)-Z2*AO(J1+50))
         F1M=R4*(Z1*AO(J1+80)-AO(J1+10)-Z2*AO(J1+30))
         F2P=R3*(AO(J1+40)-AO(J1+60))
         F2M=AO(J1+90)
         F3P=R1*(AO(J1)-Z3*AO(J1+50))
         F3M=R1*(Z3*AO(J1+30)-AO(J1+10))
         AO(J1   )=F0
         AO(J1+10)=F1P
         AO(J1+20)=F1M
         AO(J1+30)=F2P
         AO(J1+40)=F2M
         AO(J1+50)=F3P
         AO(J1+60)=F3M
      END IF
  360 J1=J1+1
      IF (IOP(8) .EQ. 1) IEND=7
C
C     FISH OUT THE INTEGRALS AND ADD TO THE MO INTEGRALS IN DINT.
C
  800 DO 850 KK=ISTART,IEND
      IF(IMJ.EQ.0)JEND=KK
C
      DO 850 LL=JSTART,JEND
      J1=LL+10*(KK-1)
      DO 810 MM=1,6
      VAL(MM)=AO(J1)
  810 J1=J1+100
      K=IAOS+KK
      L=JAOS+LL
      COD=TWO
      IF(K.EQ.L)COD=ONE
      DO 820 I=1,NMO
      FAC=CC(K,I)*CC(L,I)*COD
      DO 820 MM=1,6
  820 DINT(I,MM)=DINT(I,MM)+FAC*VAL(MM)
  850 CONTINUE
C
  900 CONTINUE
C
      IF(IOP(18).NE.1)GO TO 920
      WRITE(IOUT,1000)
      DO 910 I=1,NMO
  910 WRITE(IOUT,1010)I,(DINT(I,K),K=1,6)
C
  920 CALL SIZES
      RETURN
      END
      SUBROUTINE PROPB(VA)
C
C     EVALUATE SECOND MOMENT FOR ONE PAIR OF SHELLS.
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C#
C     PARAMETER (NA=#NA, NB=#NB)
C     PARAMETER (NS=#NS, NP=#NP)
C##
      PARAMETER (NA= 36, NB=200)
      PARAMETER (NS=120, NP=300)
C###
      PARAMETER (NB2=NB*NB)
      PARAMETER (ZERO=0.0D0, ONE=1.0D0)
C
      INTEGER SHELLA,SHELLN,SHELLT,SHELLC,AOS
C
      COMMON /A/ IOP(99),IC1(7),IC2(NA),C(NA,3),CD(4),IC3(401)
C
      COMMON/C801C/INEW,JNEW,KK,LL,ITYPE,JTYPE,ANORM(20),DINT(NB,6),
     1 AO(600)
      COMMON/B/IXYZ(NS),SHELLA(NS),SHELLN(NS),SHELLT(NS),
     1 SHELLC(NS),AOS(NS),NSHELL,MAXTYP,EXX(NP),C12(NP,2)
C
      DIMENSION FILL(NB2)
      DIMENSION A(3),B(3),E(3),D(3),V(7),VA(6),VAL(6)
      DIMENSION AA(20),BB(20),DD(84),IAONUM(4)
      DIMENSION LIN(84),MIN(84),NIN(84)
C
      EQUIVALENCE (FILL(1),INEW)
C
       DATA LIN/0,1,0,0,2,0,0,1,1,0,3,0,0,2,2,1,0,1,0,1,4,0,0,3,3,1,0,1,
     1 0,2,2,0,2,1,1,5,0,0,4,4,0,1,1,0,3,3,0,2,2,0,2,2,1,3,1,1,6,0,0,5,5
     2 ,0,1,1,0,4,4,0,2,2,0,3,3,0,4,1,1,2,2,2,1,1,3,3/
       DATA MIN/0,0,1,0,0,2,0,1,0,1,0,3,0,1,0,2,2,0,1,1,0,4,0,1,0,3,3,0,
     1 1,2,0,2,1,2,1,0,5,0,1,0,4,4,0,1,2,0,3,3,0,2,2,1,2,1,3,1,0,6,0,1,0
     2 ,5,5,0,1,2,0,4,4,0,2,3,0,3,1,4,1,2,1,3,2,3,1,2/
       DATA NIN/0,0,0,1,0,0,2,0,1,1,0,0,3,0,1,0,1,2,2,1,0,0,4,0,1,0,1,3,
     1 3,0,2,2,1,1,2,0,0,5,0,1,1,0,4,4,0,2,2,0,3,3,1,2,2,1,1,3,0,0,6,0,1
     2 ,1,0,5,5,0,2,2,0,4,4,0,3,3,1,1,4,2,3,1,3,2,2,1/
      DATA TENM8/1.0D-8/, TENM10/1.0D-10/, TWENTY5/25.0D0/
      DATA NT/6/, IAONUM/0,0,4,10/
C*
      DO 9 I=1,NT
      V(I)=ZERO
    9 VA(I)=ZERO
      M=IAONUM(ITYPE+1)+KK
      N=IAONUM(JTYPE+1)+LL
C     ORDER THE AO TYPES SO THAT M .GE. N.
      IF(M.GE.N)GO TO 10
      I=M
      M=N
      N=I
      I=INEW
      INEW=JNEW
      JNEW=I
   10 I=IXYZ(INEW)
      A(1)=C(I,1)
      A(2)=C(I,2)
      A(3)=C(I,3)
      J=IXYZ(JNEW)
      B(1)=C(J,1)
      B(2)=C(J,2)
      B(3)=C(J,3)
      ICOEF=1
      IF(M.GE.2.AND.M.LE.4)ICOEF=2
      JCOEF=1
      IF(N.GE.2.AND.N.LE.4)JCOEF=2
      IST=SHELLA(INEW)
      JST=SHELLA(JNEW)
      IEND=IST+SHELLN(INEW)-1
      JEND=JST+SHELLN(JNEW)-1
      DO 80 K=IST,IEND
      DO 85 L=JST,JEND
      DO 90 I=1,20
      AA(I)=ZERO
   90 BB(I)=ZERO
      COEF=C12(K,ICOEF)*C12(L,JCOEF)*ANORM(M)*ANORM(N)
      IF (DABS(COEF).LT.TENM8)GO TO 85
      ALPHA=EXX(K)
      BETA=EXX(L)
C
C     THIS COMPUTES THE CENTRE, EXPONENT, AND MULTIPLYING FACTOR OF
C     A SINGLE GAUSSIAN WHICH CAN REPLACE THE PRODUCT OF TWO GAUSSIAN
C     CENTRES A AND B, AND EXPONENTS ALPHA AND BETA.
C
      GAMA=ALPHA+BETA
      DO 1 I=1,3
    1 E(I)=(ALPHA*A(I)+BETA*B(I))/GAMA
      ABSQD=ZERO
      DO 2 I=1,3
    2 ABSQD=ABSQD+(B(I)-A(I))*(B(I)-A(I))
      IF (ALPHA*BETA*ABSQD/GAMA .GT. TWENTY5) GO TO 85
      EFACT=COEF*DEXP(-ALPHA*BETA*ABSQD/GAMA)
      IF(DABS(EFACT).LE.TENM8)GO TO 85
      AA(M)=ONE
      BB(N)=ONE
      CALL SHFT71 (AA, A, E, M)
      CALL SHFT71 (BB, B, E, N)
      DO 24 I=1,84
   24 DD(I)=ZERO
      IF (M .LE. 10) THEN
         CALL PRODS1 (AA, BB, DD, M, N, MN)
      ELSE
         CALL PRODF1 (AA, BB, DD, MN)
      END IF
      DO 3 I=1,NT
    3 VAL(I)=ZERO
      DO 25 I=1,3
   25 D(I)=E(I)
      DO 60 I=1,MN
      IF(DABS(DD(I))-TENM8)60,60,40
   40 CALL OPAB4 (LIN(I), MIN(I), NIN(I), GAMA, V, D, 7)
      DO 50 J=1,NT
      IF(DABS(V(J)).LE.TENM10)GO TO 50
      VAL(J)=DD(I)*V(J)+VAL(J)
   50 CONTINUE
   60 CONTINUE
      DO 70 I=1,NT
   70 VA(I)=VA(I)+EFACT*VAL(I)
   85 CONTINUE
   80 CONTINUE
      RETURN
      END
      SUBROUTINE SIZES
C
C     TRANSFORM SECOND MOMENTS TO CENTROIDS OF CHARGE.
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C#
C     PARAMETER (NA=#NA, NB=#NB)
C##
      PARAMETER (NA= 36, NB=200)
C###
      PARAMETER (NB2=NB*NB)
      PARAMETER (ZERO=0.0D0, ONE=1.0D0)
C
      COMMON /A/ IOP(99),IC1(NA),IC2(7),CD1(NA,3),ANTOAU,CD4(3),IC3(401)
C
      COMMON/C801C/ID1(6),CCD1(20),DINT(NB,6),A1(6),SS(3),W(3),S(3,3)
      COMMON/C801D/NMO,IPASS,CLMO(3,NB)
C
      COMMON/IO/IN,IOUT,IPUNCH,IODUM(214)
C
      DIMENSION FILL(NB2)
C
      EQUIVALENCE (FILL(1),ID1(1))
C
      DATA THREE/3.0D0/, FOUR/4.0D0/,
     1 PI/3.14159265358979D0/
      DATA C1/-3.093D-5/,C2/-0.05062963D0/,C3/8.58D-6/,C4/0.34455439D0/,
     1 C5/-0.42202423D0/,C6/0.03504838D0/,AR1/-5.74995D0/,
     2 AV1/-0.842304D0/,AR2/-0.635068D0/,AV2/-0.721951D0/
C*
 1000 FORMAT('1LMO',10X,'CENTROID OF CHARGE',15X,'ELLIPSOID AXES ',
     1 'LENGTHS',10X,'ELIP',9X,'R**2',9X,'R')
 1010 FORMAT(7F10.5,'  SZ',I6)
 1020 FORMAT('0',I3,2(1X,3F11.5),F12.5,F13.5,F12.5)
 1030 FORMAT(/'0CORRELATION ENERGY ESTIMATES (IN HARTREES) BASED ON ',
     1 '2 TERM POWER SERIES IN R AND V'/
     2 '0FOR MOLECULES CONTAINING ATOMS H - NE ONLY:',F10.4/
     3 '0FOR MOLECULES CONTAINING ATOMS H - AR ONLY:',F10.4)
 1040 FORMAT(/'0ALL LENGTHS IN ANGSTROMS (R**2 IN ANGSTROMS**2)',20X,
     1 'ELLIPTICITY DEFINED AS A/C')
C*
C     ESTIMATE THE CORRELATION ENERGY.
      E1=ZERO
      E2=ZERO
      THREEI=ONE/THREE
      FAC=FOUR*PI*THREEI
      WRITE(IOUT,1000)
C
      DO 100 NI=1,NMO
      AX=CLMO(1,NI)
      AY=CLMO(2,NI)
      AZ=CLMO(3,NI)
      A1(1)=-AX*AX
      A1(2)=-AY*AY
      A1(3)=-AZ*AZ
      A1(4)=-AX*AY
      A1(5)=-AX*AZ
      A1(6)=-AY*AZ
      DO 10 I=1,6
   10 A1(I)=A1(I)-DINT(NI,I)
C     SET UP S TO BE DIAGONALIZED (IN PLACE)
      S(1,1)=A1(1)
      S(2,2)=A1(2)
      S(3,3)=A1(3)
      S(2,1)=A1(4)
      S(3,1)=A1(5)
      S(3,2)=A1(6)
      IF(IOP(19).GT.1)WRITE(IPUNCH,1010)S(1,1),S(2,2),S(3,3),S(2,1),
     1 S(3,1),S(3,2)
      CALL TRED12(3,3,S,S,SS,W,-1)
      SIZE=SS(1)+SS(2)+SS(3)
      SSIZE=DSQRT(SIZE)
      SS(1)=DSQRT(SS(1))
      SS(2)=DSQRT(SS(2))
      SS(3)=DSQRT(SS(3))
      ELIP=SS(3)/SS(1)
      VOL=(FAC*SS(1)*SS(2)*SS(3))**THREEI
      TR=SSIZE**AR1
      TV=VOL**AV1
      E1=E1+C1*TR+C2*TV+C3*TR*TV
      TR=SSIZE**AR2
      TV=VOL**AV2
      E2=E2+C4*TR+C5*TV+C6*TR*TV
C     CONVERT TO ANGSTROMS FOR PRINTING/PUNCHING.
      SS(1) = SS(1) / ANTOAU
      SS(2) = SS(2) / ANTOAU
      SS(3) = SS(3) / ANTOAU
      SIZE = SIZE / (ANTOAU**2)
      SSIZE = SSIZE / ANTOAU
      AX = AX / ANTOAU
      AY = AY / ANTOAU
      AZ = AZ / ANTOAU
      IF(IOP(19).GT.0)WRITE(IPUNCH,1010)SSIZE,SS(3),SS(2),SS(1),
     1 AX,AY,AZ,NI
  100 WRITE(IOUT,1020)NI,AX,AY,AZ,SS(3),SS(2),SS(1),ELIP,SIZE,SSIZE
C
      WRITE(IOUT,1040)
      IF(IOP(6).EQ.0.AND.IOP(9).EQ.0)WRITE(IOUT,1030)E1,E2
      RETURN
      END
