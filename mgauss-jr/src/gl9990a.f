C/    GL9990A      28 NOV 88                                         MRP
      SUBROUTINE FILLC(ITYPE,IC,C1,C2,C)
C*
C     --------------
C     U OF T VERSION
C     FEBRUARY 1979
C     --------------
C*
C     ROUTINE TO OBTAIN COEFFICIENTS FOR THE PRIMITIVE GAUSSIANS.
C*
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C#
C     PARAMETER (NP=#NP)
C##
      PARAMETER (NP=300)
C###
      DIMENSION C1(NP),C2(NP),C(20)
C
      SAVE ROOT3, ROOT5
C
      DATA THREE/3.0D0/,FIVE/5.0D0/
C*
      I=ITYPE+1
      T=C1(IC)
      GO TO (10,20,30,40),I
C     S SHELL.
   10 C(1)=T
      RETURN
C     SP OR P SHELL.
   20 C(1)=T
      T=C2(IC)
      C(2)=T
      C(3)=T
      C(4)=T
      RETURN
C     D SHELL - WATCH OUT FOR NORMALIZATION.
   30 C(5)=T
      C(6)=T
      C(7)=T
      T=T*ROOT3
      C(8)=T
      C(9)=T
      C(10)=T
      RETURN
C     F SHELL - WATCH OUT FOR NORMALIZATION.
   40 C(11)=T
      C(12)=T
      C(13)=T
      T=T*ROOT5
      C(14)=T
      C(15)=T
      C(16)=T
      C(17)=T
      C(18)=T
      C(19)=T
      C(20)=T*ROOT3
      RETURN
C*
      ENTRY FILLST
C*
C     ENTRY TO PRESET THE INTERNAL CONSTANTS FOR FILLC.
      ROOT3=DSQRT(THREE)
      ROOT5=DSQRT(FIVE)
      RETURN
      END
      SUBROUTINE FILLCP(ITYPE,IC,C1,C2,C,CMAXI)
C*
C     --------------
C     U OF T VERSION
C     APRIL 1981
C     --------------
C*
C     ROUTINE TO OBTAIN COEFFICIENTS FOR THE PRIMITIVE GAUSSIANS.
C     THE ABSOLUTE VALUE OF THE LARGEST CONTRACTION COEFFICIENT IS
C     RETURNED IN CMAXI.
C*
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C#
C     PARAMETER (NP=#NP)
C##
      PARAMETER (NP=300)
C###
      DIMENSION C1(NP),C2(NP),C(20)
C
      SAVE ROOT3, ROOT5
C
      DATA THREE/3.0D0/,FIVE/5.0D0/
C*
      I=ITYPE+1
      T=C1(IC)
      CMAXI=DABS(T)
      GO TO (10,20,30,40),I
C     S SHELL.
   10 C(1)=T
      RETURN
C     SP OR P SHELL.
   20 C(1)=T
      T=C2(IC)
      C(2)=T
      C(3)=T
      C(4)=T
      CMAXI=DMAX1(DABS(T),CMAXI)
      RETURN
C     D SHELL - WATCH OUT FOR NORMALIZATION.
   30 C(5)=T
      C(6)=T
      C(7)=T
      T=T*ROOT3
      C(8)=T
      C(9)=T
      C(10)=T
      RETURN
C     F SHELL - WATCH OUT FOR NORMALIZATION.
   40 C(11)=T
      C(12)=T
      C(13)=T
      T=T*ROOT5
      C(14)=T
      C(15)=T
      C(16)=T
      C(17)=T
      C(18)=T
      C(19)=T
      C(20)=T*ROOT3
      RETURN
C*
      ENTRY SETCP
C*
C     ENTRY TO PRESET THE INTERNAL CONSTANTS FOR FILLCP.
      ROOT3=DSQRT(THREE)
      ROOT5=DSQRT(FIVE)
      RETURN
      END
      SUBROUTINE FILMAT(F,A,NDA)
C*
C     ----------------
C     QCPE GAUSSIAN 80
C     U OF T VERSION
C     OCTOBER 1985
C     ----------------
C*
C     THIS ROUTINE FILLS THE MATRIX A (IN LINEAR FORM), WITH THE
C     INTEGRALS FROM F. LIND SUPPLIES THE INDEXING INTO ARRAY A:
C     SETTING LIND(I)=(I*(I-1))/2 GIVES UPPER TRIANGLE (BY COLUMNS);
C     SETTING LIND(I)=NBASIS*(I-1) GIVES RECTANGULAR PACKING.
C     FOR UPPER TRIANGULAR PACKING, IAOS SHOULD BE GREATER THAN JAOS,
C     OR EQUAL (BUT WITH IMJ SET TO 0 FOR SHELL DUPLICATE ELIMINATION).
C
C     THIS ROUTINE RECEIVES AS INPUT THE AO NUMBERS (IAOS, JAOS ALREADY
C     BIASED BY THE VALUES ISTART AND JSTART RESPECTIVELY), THE
C     SHELL DUPLICATE TEST VARIABLE IMJ (0 IF SHELLS IDENTICAL, 1 IF
C     NOT IDENTICAL), AND LIMITING INFORMATION , ALL VIA /LIMIT/.
C     NDA IS THE DIMENSION OF MATRIX A.
C     IF NECESSARY, PUREDF IS CALLED TO TRANSFORM TO PURE D OR PURE F.
C
C     NOTE THAT IEND AND JEND MAY BE CHANGED BY PUREDF.
C*
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C#
C     PARAMETER (NA=#NA, NB=#NB)
C##
      PARAMETER (NA= 36, NB=200)
C###
      COMMON /A/ IOP(99),IC1(NA),IC2(7),CD1(NA,3),CD2(4),IC3(401)
C
      COMMON/LIMIT/IMJ,ISTART,JSTART,IEND,JEND,IRANGE,JRANGE,
     1 ITYPE,JTYPE,IAOS,JAOS,IOP8,JOP8,LIND(NB)
C
      DIMENSION A(NDA),F(100)
C
      IENDS=IEND
      JENDS=JEND
      IF (IOP8.NE.0 .OR. JOP8.NE.0) CALL PUREDF (F)
C
C     COMMENCE MAIN PROCESSING LOOP.
C     ALSO, SHELL DUPLICATE ELIMINATION IS PERFORMED HERE.
C
C     OBTAIN CORRECT BIAS FOR J-LOOP.
      INDX1=0
C     COMMENCE LOOP.
      DO 270 I=ISTART,IEND
      IF(IMJ.EQ.0)JEND=I
      INTC=INDX1
C     OBTAIN RAW INDEX.
      II=I+IAOS
      DO 250 J=JSTART,JEND
      INTC=INTC+1
      JJ=J+JAOS
C     OBTAIN FULL MATRIX INDEX.
      INDFM=LIND(II)+JJ
C     PLANT THE VALUE.
  250 A(INDFM)=F(INTC)
  270 INDX1=INDX1+JRANGE
C
C     RESTORE IEND AND JEND.
      IEND=IENDS
      JEND=JENDS
      RETURN
      END
      SUBROUTINE GET1CS(F,CONST,COEF,INC)
C
C     ******************************************************************
C
C          THIS ROUTINE FORMS THE ONE-DIMENSIONAL, ONE-CENTER OVERLAP
C     INTEGRALS.  THESE ARE FORMED INTO F, AND THEY ARE LATER
C     TRANSFORMED INTO TWO-CENTER INTEGRALS IN ROUTINE GET2CS.
C
C     ******************************************************************
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      COMMON /I1ECOM/ LAMAX, LBMAX, LPMAX
C
      DIMENSION F(6)
C
      DATA F3/3.0D0/,F5/5.0D0/,F7/7.0D0/,F9/9.0D0/
C
      LPNEW=(LPMAX+INC+1)/2
      F(1)=CONST
      IF(LPNEW.EQ.1) RETURN
      F(2)=COEF*F(1)
      IF(LPNEW.EQ.2) RETURN
      F(3)=COEF*F3 *F(2)
      IF(LPNEW.EQ.3) RETURN
      F(4)=COEF*F5 *F(3)
      IF(LPNEW.EQ.4) RETURN
      F(5)=COEF*F7 *F(4)
      IF(LPNEW.EQ.5) RETURN
      F(6)=COEF*F9 *F(5)
      RETURN
      END
      SUBROUTINE GET2C(TWOC,X,CONST,A,TWOPT2,INCP)
C
C     ******************************************************************
C
C          THIS SUBROUTINE FORMS THE TWO CENTER INTEGRALS IN TWOC.  THE
C     FUNCTIONS G ARE FORMED FROM X AND CONST USING G(1) = CONST, AND
C     THE RECURSION FORMULA:
C
C          G(IV) = TWOPT2*(X*G(IV-1) - (IV-2)*G(IV-2))
C
C     THE TWO CENTER INTEGRALS ARE THEN FORMED USING THE COEFFICIENTS
C     IN A, WHICH WERE FORMED IN SUBROUTINE GETA1.
C
C     ******************************************************************
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      COMMON /I1ECOM/ LAMAX, LBMAX, LPMAX
C
      DIMENSION TWOC(9),A(45),G(9)
C
      DATA TWO/2.0D0/,THREE/3.0D0/,FOUR/4.0D0/,FIVE/5.0D0/,SIX/6.0D0/,
     1 SEVEN/7.0D0/
C
C     CALCULATE THE G FUNCTIONS.
C
      LPNEW=LPMAX+INCP
      G(1)=CONST
      IF(LPNEW.LE.1) GO TO 200
      G(2)=TWOPT2*X*G(1)
      IF(LPNEW.EQ.2) GO TO 190
      G(3)=TWOPT2*(X*G(2)-G(1))
      IF(LPNEW.EQ.3) GO TO 180
      G(4)=TWOPT2*(X*G(3)-TWO*G(2))
      IF(LPNEW.EQ.4) GO TO 170
      G(5)=TWOPT2*(X*G(4)-THREE*G(3))
      IF(LPNEW.EQ.5) GO TO 160
      G(6)=TWOPT2*(X*G(5)-FOUR*G(4))
      IF(LPNEW.EQ.6) GO TO 150
      G(7)=TWOPT2*(X*G(6)-FIVE*G(5))
      IF(LPNEW.EQ.7) GO TO 140
      G(8)=TWOPT2*(X*G(7)-SIX*G(6))
      IF(LPNEW.EQ.8) GO TO 130
      G(9)=TWOPT2*(X*G(8)-SEVEN*G(7))
C
C     NOW, EVALUATE THE TWO CENTER INTEGRALS USING G AND A
C
      TWOC(9)=G(1)*A(37)+G(3)*A(39)+G(5)*A(41)+G(7)*A(43)+G(9)*A(45)
  130 TWOC(8)=G(2)*A(30)+G(4)*A(32)+G(6)*A(34)+G(8)*A(36)
  140 TWOC(7)=G(1)*A(22)+G(3)*A(24)+G(5)*A(26)+G(7)*A(28)
  150 TWOC(6)=G(2)*A(17)+G(4)*A(19)+G(6)*A(21)
  160 TWOC(5)=G(1)*A(11)+G(3)*A(13)+G(5)*A(15)
  170 TWOC(4)=G(2)*A(8)+G(4)*A(10)
  180 TWOC(3)=G(1)*A(4)+G(3)*A(6)
  190 TWOC(2)=G(2)*A(3)
  200 TWOC(1)=G(1)
      RETURN
      END
      SUBROUTINE GET2CS(SS,F,C,INC)
C
C     ******************************************************************
C
C          THIS ROUTINE CALCULATED THE TWO CENTER, ONE-DIMENSIONAL
C     OVERLAP INTEGRALS AND RETURNS THEM IN THE ARRAY SS.  IT IS CALLED
C     WITH F, WHICH CONTAINS THE ONE-CENTER ONE-DIMENSIONAL OVERLAPS
C     (CALCULATED IN GET1CS), AND WITH THE COEFFICIENTS C.  THESE
C     COEFS WERE CALCULATED IN ROUTINE GETCC1.
C
C     ******************************************************************
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      COMMON /I1ECOM/ LAMAX, LBMAX, LPMAX
C
      DIMENSION C(192),F(6),SS(32)
C
      LANEW=LAMAX+INC
C
      GO TO (100,200,300,400,500,600,700,800),LANEW
C
  800 GO TO (810,820,830,840),LBMAX
  840 SS(32)=F(1)*C(182)+F(2)*C(184)+F(3)*C(186)+F(4)*C(188)+
     1     F(5)*C(190)+F(6)
  830 SS(31)=F(1)*C(172)+F(2)*C(174)+F(3)*C(176)+F(4)*C(178)+
     1     F(5)*C(180)
  820 SS(30)=F(1)*C(163)+F(2)*C(165)+F(3)*C(167)+F(4)*C(169)+F(5)
  810 SS(29)=F(1)*C(155)+F(2)*C(157)+F(3)*C(159)+F(4)*C(161)
C
  700 GO TO (710,720,730,740),LBMAX
  740 SS(28)=F(1)*C(145)+F(2)*C(147)+F(3)*C(149)+F(4)*C(151)+
     1     F(5)*C(153)
  730 SS(27)=F(1)*C(136)+F(2)*C(138)+F(3)*C(140)+F(4)*C(142)+ F(5)
  720 SS(26)=F(1)*C(128)+F(2)*C(130)+F(3)*C(132)+F(4)*C(134)
  710 SS(25)=F(1)*C(121)+F(2)*C(123)+F(3)*C(125)+F(4)
C
  600 GO TO (610,620,630,640),LBMAX
  640 SS(24)=F(1)*C(112)+F(2)*C(114)+F(3)*C(116)+F(4)*C(118)+F(5)
  630 SS(23)=F(1)*C(104)+F(2)*C(106)+F(3)*C(108)+F(4)*C(110)
  620 SS(22)=F(1)*C( 97)+F(2)*C( 99)+F(3)*C(101)+F(4)
  610 SS(21)=F(1)*C( 91)+F(2)*C( 93)+F(3)*C(95)
C
  500 GO TO (510,520,530,540),LBMAX
  540 SS(20)=F(1)*C(83)+F(2)*C(85)+F(3)*C(87)+F(4)*C(89)
  530 SS(19)=F(1)*C(76)+F(2)*C(78)+F(3)*C(80)+F(4)
  520 SS(18)=F(1)*C(70)+F(2)*C(72)+F(3)*C(74)
  510 SS(17)=F(1)*C(65)+F(2)*C(67)+F(3)
C
  400 GO TO (410,420,430,440),LBMAX
  440 SS(16)=F(1)*C(58)+F(2)*C(60)+F(3)*C(62)+F(4)
  430 SS(15)=F(1)*C(52)+F(2)*C(54)+F(3)*C(56)
  420 SS(14)=F(1)*C(47)+F(2)*C(49)+F(3)
  410 SS(13)=F(1)*C(43)+F(2)*C(45)
C
  300 GO TO (310,320,330,340),LBMAX
  340 SS(12)=F(1)*C(37)+F(2)*C(39)+F(3)*C(41)
  330 SS(11)=F(1)*C(32)+F(2)*C(34)+F(3)
  320 SS(10)=F(1)*C(28)+F(2)*C(30)
  310 SS(9)=F(1)*C(25)+F(2)
C
  200 GO TO (210,220,230,240),LBMAX
  240 SS(8)=F(1)*C(20)+F(2)*C(22)+F(3)
  230 SS(7)=F(1)*C(16)+F(2)*C(18)
  220 SS(6)=F(1)*C(13)+F(2)
  210 SS(5)=F(1)*C(11)
C
  100 GO TO (110,120,130,140),LBMAX
  140 SS(4)=F(1)*C(7)+F(2)*C(9)
  130 SS(3)=F(1)*C(4)+F(2)
  120 SS(2)=F(1)*C(2)
  110 SS(1)=F(1)
      RETURN
      END
      SUBROUTINE GET3C(V,F,C)
C
C     ******************************************************************
C
C          THIS ROUTINE TRANSFORMS THE INTEGRALS OVER FUNCTIONS
C     AT CENTER P, WHICH ARE NOW STORED IN F, INTO THE INTEGRALS OVER
C     FUNCTIONS CENTERED AT A AND B.  THESE ARE TO BE STORED INTO V.
C     THE COEFFICIENTS, C, WERE FORMED IN SUBROUTINE GETCC1 AND THE
C     INTEGRALS OVER FUNCTIONS AT CENTER P WERE FORMED IN ROUTINE GET2C.
C
C     ******************************************************************
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      COMMON /I1ECOM/ LAMAX, LBMAX, LPMAX
C
      DIMENSION V(16),F(7),C(192)
C
      GO TO (400,300,200,100),LAMAX
C
  100 GO TO (110,120,130,140),LBMAX
  140 V(16)=F(1)*C(58)+F(2)*C(59)+F(3)*C(60)+F(4)*C(61)+F(5)*C(62)+
     1     F(6)*C(63)+F(7)
  130 V(15)=F(1)*C(52)+F(2)*C(53)+F(3)*C(54)+F(4)*C(55)+F(5)*C(56)+F(6)
  120 V(14)=F(1)*C(47)+F(2)*C(48)+F(3)*C(49)+F(4)*C(50)+F(5)
  110 V(13)=F(1)*C(43)+F(2)*C(44)+F(3)*C(45)+F(4)
C
  200 GO TO (210,220,230,240),LBMAX
  240 V(12)=F(1)*C(37)+F(2)*C(38)+F(3)*C(39)+F(4)*C(40)+F(5)*C(41)+F(6)
  230 V(11)=F(1)*C(32)+F(2)*C(33)+F(3)*C(34)+F(4)*C(35)+F(5)
  220 V(10)=F(1)*C(28)+F(2)*C(29)+F(3)*C(30)+F(4)
  210 V(9)=F(1)*C(25)+F(2)*C(26)+F(3)
C
  300 GO TO (310,320,330,340),LBMAX
  340 V(8)=F(1)*C(20)+F(2)*C(21)+F(3)*C(22)+F(4)*C(23)+F(5)
  330 V(7)=F(1)*C(16)+F(2)*C(17)+F(3)*C(18)+F(4)
  320 V(6)=F(1)*C(13)+F(2)*C(14)+F(3)
  310 V(5)=F(1)*C(11)+F(2)
C
  400 GO TO (410,420,430,440),LBMAX
  440 V(4)=F(1)*C(7)+F(2)*C(8)+F(3)*C(9)+F(4)
  430 V(3)=F(1)*C(4)+F(2)*C(5)+F(3)
  420 V(2)=F(1)*C(2)+F(2)
  410 V(1)=F(1)
      RETURN
      END
      SUBROUTINE GETA1(A,CONST,INCP)
C
C     ******************************************************************
C
C          THIS SUBROUTINE CALCULATES THE COEFFICIENTS WHICH TRANSFORM
C     THE FUNCTIONS G(IV) INTO THE TWO CENTER INTEGRALS.  THIS
C     TRANSFORMATION IS CARRIED OUT IN SUBROUTINE GET2C, WHICH SHOULD
C     BE CONSULTED FOR MORE DETAILS OF THE USE OF THESE COEFFICIENTS.
C
C          THE MATRIX IS FILLED USING A(1) = 1.0, AND THE RECURSION
C     FORMULA:
C
C          A(LV,LP+1) = (A(LV,LP-1)*(LP-1) + A(LV-1,LP))/(2*P)
C
C     ******************************************************************
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      COMMON /I1ECOM/ LAMAX, LBMAX, LPMAX
C
      DIMENSION A(45)
C
      DATA TWO/2.0D0/,THREE/3.0D0/,FOUR/4.0D0/,FIVE/5.0D0/,SIX/6.0D0/,
     1 SEVEN/7.0D0/
C
      LPNEW=LPMAX+INCP
      IF(LPNEW.LE.1) RETURN
      A(3)=CONST
      IF(LPNEW.EQ.2) RETURN
      A(4)=A(3)
      A(6)=A(3)*A(3)
      IF(LPNEW.EQ.3) RETURN
      A(8)=A(3)*(TWO*A(3)+A(4))
      A(10)=A(3)*A( 6)
      IF(LPNEW.EQ.4) RETURN
      A(11)=THREE*A(3)*A( 4)
      A(13)=A(3)*(THREE*A( 6)+A( 8))
      A(15)=A(3)*A(10)
      IF(LPNEW.EQ.5) RETURN
      A(17)=A(3)*(FOUR*A( 8)+A(11))
      A(19)=A(3)*(FOUR*A(10)+A(13))
      A(21)=A(3)*A(15)
      IF(LPNEW.EQ.6) RETURN
      A(22)=FIVE*A(3)*A(11)
      A(24)=A(3)*(FIVE*A(13)+A(17))
      A(26)=A(3)*(FIVE*A(15)+A(19))
      A(28)=A(3)*A(21)
      IF(LPNEW.EQ.7) RETURN
      A(30)=A(3)*(SIX*A(17)+A(22))
      A(32)=A(3)*(SIX*A(19)+A(24))
      A(34)=A(3)*(SIX*A(21)+A(26))
      A(36)=A(3)*A(28)
      IF(LPNEW.EQ.8) RETURN
      A(37)=SEVEN*A(3)*A(22)
      A(39)=A(3)*(SEVEN*A(24)+A(30))
      A(41)=A(3)*(SEVEN*A(26)+A(32))
      A(43)=A(3)*(SEVEN*A(28)+A(34))
      A(45)=A(3)*A(36)
      RETURN
      END
      SUBROUTINE GETA2
C
C     ******************************************************************
C     ROUTINE TO OBTAIN A-COEFFICIENTS FOR COMPUTING
C     TWO-DIMENSIONAL TWO-CENTER INTEGRALS FROM
C     RAW HERMITE FORMS.  THE ARRAY IS DIMENSION (7,7,13),
C     BUT NOTE THAT ALL ZEROES HAVE BEEN OMITTED.
C     THIS ROUTINE WAS GENERATED BY PWRITE IN THE SPRING OF '76.
C     ******************************************************************
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      COMMON/I2ECOM/LAMAX,LBMAX,LCMAX,LDMAX,LPMAX,LQMAX,LPQMAX,L2EFLL,
     1 EQ,PP,RHOT2,G(13),VALI2P(49),VALI3P(112),A(174)
C
      DATA ONE/1.0D0/,THREE/3.0D0/,FOUR/4.0D0/,FIVE/5.0D0/
C*
      QQ=ONE/(EQ+EQ)
      IF(LQMAX.LE.1)GO TO 1
      A(1)=-QQ
      IF(LQMAX.EQ.2)GO TO 1
      A(2)=QQ
      A(3)=-QQ*A(1)
      IF(LQMAX.EQ.3)GO TO 1
      A(4)=QQ*((A(1)+A(1))-A(2))
      A(5)=-QQ*A(3)
      IF(LQMAX.EQ.4)GO TO 1
      A(6)=QQ*THREE*A(2)
      A(7)=QQ*(THREE*A(3)-A(4))
      A(8)=-QQ*A(5)
      IF(LQMAX.EQ.5)GO TO 1
      A(9)=QQ*(FOUR*A(4)-A(6))
      A(10)=QQ*(FOUR*A(5)-A(7))
      A(11)=-QQ*A(8)
      IF(LQMAX.EQ.6)GO TO 1
      A(12)=QQ*FIVE*A(6)
      A(13)=QQ*(FIVE*A(7)-A(9))
      A(14)=QQ*(FIVE*A(8)-A(10))
      A(15)=-QQ*A(11)
C
    1 IF(LPMAX.LE.1)RETURN
      A(16)=PP
      IF(LQMAX.LE.1)GO TO 2
      A(17)=PP*A(1)
      IF(LQMAX.EQ.2)GO TO 2
      A(18)=PP*A(2)
      A(19)=PP*A(3)
      IF(LQMAX.EQ.3)GO TO 2
      A(20)=PP*A(4)
      A(21)=PP*A(5)
      IF(LQMAX.EQ.4)GO TO 2
      A(22)=PP*A(6)
      A(23)=PP*A(7)
      A(24)=PP*A(8)
      IF(LQMAX.EQ.5)GO TO 2
      A(25)=PP*A(9)
      A(26)=PP*A(10)
      A(27)=PP*A(11)
      IF(LQMAX.EQ.6)GO TO 2
      A(28)=PP*A(12)
      A(29)=PP*A(13)
      A(30)=PP*A(14)
      A(31)=PP*A(15)
C
    2 IF(LPMAX.EQ.2)RETURN
      A(32)=PP
      A(33)=+PP*A(16)
      IF(LQMAX.LE.1)GO TO 3
      A(34)=PP*A(1)
      A(35)=+PP*A(17)
      IF(LQMAX.EQ.2)GO TO 3
      A(36)=PP*A(2)
      A(37)=PP*(A(3)+A(18))
      A(38)=+PP*A(19)
      IF(LQMAX.EQ.3)GO TO 3
      A(39)=PP*A(4)
      A(40)=PP*(A(5)+A(20))
      A(41)=+PP*A(21)
      IF(LQMAX.EQ.4)GO TO 3
      A(42)=PP*A(6)
      A(43)=PP*(A(7)+A(22))
      A(44)=PP*(A(8)+A(23))
      A(45)=+PP*A(24)
      IF(LQMAX.EQ.5)GO TO 3
      A(46)=PP*A(9)
      A(47)=PP*(A(10)+A(25))
      A(48)=PP*(A(11)+A(26))
      A(49)=+PP*A(27)
      IF(LQMAX.EQ.6)GO TO 3
      A(50)=PP*A(12)
      A(51)=PP*(A(13)+A(28))
      A(52)=PP*(A(14)+A(29))
      A(53)=PP*(A(15)+A(30))
      A(54)=+PP*A(31)
C
    3 IF(LPMAX.EQ.3)RETURN
      A(55)=PP*((A(16)+A(16))+A(32))
      A(56)=+PP*A(33)
      IF(LQMAX.LE.1)GO TO 4
      A(57)=PP*((A(17)+A(17))+A(34))
      A(58)=+PP*A(35)
      IF(LQMAX.EQ.2)GO TO 4
      A(59)=PP*((A(18)+A(18))+A(36))
      A(60)=PP*((A(19)+A(19))+A(37))
      A(61)=+PP*A(38)
      IF(LQMAX.EQ.3)GO TO 4
      A(62)=PP*((A(20)+A(20))+A(39))
      A(63)=PP*((A(21)+A(21))+A(40))
      A(64)=+PP*A(41)
      IF(LQMAX.EQ.4)GO TO 4
      A(65)=PP*((A(22)+A(22))+A(42))
      A(66)=PP*((A(23)+A(23))+A(43))
      A(67)=PP*((A(24)+A(24))+A(44))
      A(68)=+PP*A(45)
      IF(LQMAX.EQ.5)GO TO 4
      A(69)=PP*((A(25)+A(25))+A(46))
      A(70)=PP*((A(26)+A(26))+A(47))
      A(71)=PP*((A(27)+A(27))+A(48))
      A(72)=+PP*A(49)
      IF(LQMAX.EQ.6)GO TO 4
      A(73)=PP*((A(28)+A(28))+A(50))
      A(74)=PP*((A(29)+A(29))+A(51))
      A(75)=PP*((A(30)+A(30))+A(52))
      A(76)=PP*((A(31)+A(31))+A(53))
      A(77)=+PP*A(54)
C
    4 IF(LPMAX.EQ.4)RETURN
      A(78)=PP*THREE*A(32)
      A(79)=PP*(THREE*A(33)+A(55))
      A(80)=+PP*A(56)
      IF(LQMAX.LE.1)GO TO 5
      A(81)=PP*THREE*A(34)
      A(82)=PP*(THREE*A(35)+A(57))
      A(83)=+PP*A(58)
      IF(LQMAX.EQ.2)GO TO 5
      A(84)=PP*THREE*A(36)
      A(85)=PP*(THREE*A(37)+A(59))
      A(86)=PP*(THREE*A(38)+A(60))
      A(87)=+PP*A(61)
      IF(LQMAX.EQ.3)GO TO 5
      A(88)=PP*THREE*A(39)
      A(89)=PP*(THREE*A(40)+A(62))
      A(90)=PP*(THREE*A(41)+A(63))
      A(91)=+PP*A(64)
      IF(LQMAX.EQ.4)GO TO 5
      A(92)=PP*THREE*A(42)
      A(93)=PP*(THREE*A(43)+A(65))
      A(94)=PP*(THREE*A(44)+A(66))
      A(95)=PP*(THREE*A(45)+A(67))
      A(96)=+PP*A(68)
      IF(LQMAX.EQ.5)GO TO 5
      A(97)=PP*THREE*A(46)
      A(98)=PP*(THREE*A(47)+A(69))
      A(99)=PP*(THREE*A(48)+A(70))
      A(100)=PP*(THREE*A(49)+A(71))
      A(101)=+PP*A(72)
      IF(LQMAX.EQ.6)GO TO 5
      A(102)=PP*THREE*A(50)
      A(103)=PP*(THREE*A(51)+A(73))
      A(104)=PP*(THREE*A(52)+A(74))
      A(105)=PP*(THREE*A(53)+A(75))
      A(106)=PP*(THREE*A(54)+A(76))
      A(107)=+PP*A(77)
C
    5 IF(LPMAX.EQ.5)RETURN
      A(108)=PP*(FOUR*A(55)+A(78))
      A(109)=PP*(FOUR*A(56)+A(79))
      A(110)=+PP*A(80)
      IF(LQMAX.LE.1)GO TO 6
      A(111)=PP*(FOUR*A(57)+A(81))
      A(112)=PP*(FOUR*A(58)+A(82))
      A(113)=+PP*A(83)
      IF(LQMAX.EQ.2)GO TO 6
      A(114)=PP*(FOUR*A(59)+A(84))
      A(115)=PP*(FOUR*A(60)+A(85))
      A(116)=PP*(FOUR*A(61)+A(86))
      A(117)=+PP*A(87)
      IF(LQMAX.EQ.3)GO TO 6
      A(118)=PP*(FOUR*A(62)+A(88))
      A(119)=PP*(FOUR*A(63)+A(89))
      A(120)=PP*(FOUR*A(64)+A(90))
      A(121)=+PP*A(91)
      IF(LQMAX.EQ.4)GO TO 6
      A(122)=PP*(FOUR*A(65)+A(92))
      A(123)=PP*(FOUR*A(66)+A(93))
      A(124)=PP*(FOUR*A(67)+A(94))
      A(125)=PP*(FOUR*A(68)+A(95))
      A(126)=+PP*A(96)
      IF(LQMAX.EQ.5)GO TO 6
      A(127)=PP*(FOUR*A(69)+A(97))
      A(128)=PP*(FOUR*A(70)+A(98))
      A(129)=PP*(FOUR*A(71)+A(99))
      A(130)=PP*(FOUR*A(72)+A(100))
      A(131)=+PP*A(101)
      IF(LQMAX.EQ.6)GO TO 6
      A(132)=PP*(FOUR*A(73)+A(102))
      A(133)=PP*(FOUR*A(74)+A(103))
      A(134)=PP*(FOUR*A(75)+A(104))
      A(135)=PP*(FOUR*A(76)+A(105))
      A(136)=PP*(FOUR*A(77)+A(106))
      A(137)=+PP*A(107)
C
    6 IF(LPMAX.EQ.6)RETURN
      A(138)=PP*FIVE*A(78)
      A(139)=PP*(FIVE*A(79)+A(108))
      A(140)=PP*(FIVE*A(80)+A(109))
      A(141)=+PP*A(110)
      IF(LQMAX.LE.1)RETURN
      A(142)=PP*FIVE*A(81)
      A(143)=PP*(FIVE*A(82)+A(111))
      A(144)=PP*(FIVE*A(83)+A(112))
      A(145)=+PP*A(113)
      IF(LQMAX.EQ.2)RETURN
      A(146)=PP*FIVE*A(84)
      A(147)=PP*(FIVE*A(85)+A(114))
      A(148)=PP*(FIVE*A(86)+A(115))
      A(149)=PP*(FIVE*A(87)+A(116))
      A(150)=+PP*A(117)
      IF(LQMAX.EQ.3)RETURN
      A(151)=PP*FIVE*A(88)
      A(152)=PP*(FIVE*A(89)+A(118))
      A(153)=PP*(FIVE*A(90)+A(119))
      A(154)=PP*(FIVE*A(91)+A(120))
      A(155)=+PP*A(121)
      IF(LQMAX.EQ.4)RETURN
      A(156)=PP*FIVE*A(92)
      A(157)=PP*(FIVE*A(93)+A(122))
      A(158)=PP*(FIVE*A(94)+A(123))
      A(159)=PP*(FIVE*A(95)+A(124))
      A(160)=PP*(FIVE*A(96)+A(125))
      A(161)=+PP*A(126)
      IF(LQMAX.EQ.5)RETURN
      A(162)=PP*FIVE*A(97)
      A(163)=PP*(FIVE*A(98)+A(127))
      A(164)=PP*(FIVE*A(99)+A(128))
      A(165)=PP*(FIVE*A(100)+A(129))
      A(166)=PP*(FIVE*A(101)+A(130))
      A(167)=+PP*A(131)
      IF(LQMAX.EQ.6)RETURN
      A(168)=PP*FIVE*A(102)
      A(169)=PP*(FIVE*A(103)+A(132))
      A(170)=PP*(FIVE*A(104)+A(133))
      A(171)=PP*(FIVE*A(105)+A(134))
      A(172)=PP*(FIVE*A(106)+A(135))
      A(173)=PP*(FIVE*A(107)+A(136))
      A(174)=+PP*A(137)
      RETURN
      END
      SUBROUTINE GETCC1(CC,AP,BP,INC)
C
C     ******************************************************************
C
C          THIS ROUTINE CALCULATES THE COEFFICIENTS WHICH TRANSFORM
C     INTEGRALS OVER FUNCTIONS AT CENTER P INTO INTEGRALS OVER
C     FUNCTIONS AT CENTERS A AND B.  THIS TRANSFORMATION IS CARRIED
C     OUT IN ROUTINE GET3C, WHICH SHOULD BE CONSULTED FOR MORE
C     DETAILS OF THE USE OF THESE COEFFICIENTS.
C
C          THE COEFFICIENT MATRIX IS THREE DIMENSIONAL, ALTHOUGH THE
C     ACTUAL INDEXING IS DONE LINEARLY.  THE COEFFICIENTS ARE
C     CALCULATED FROM CC(1,1,1)=1.0, AND THE RECURSION FORMULAE:
C
C          CC(LW,LB,LA) = AP*CC(LW,LB,LA-1) + CC(LW-1,LB,LA-1)
C
C          CC(LW,LB,LA) = BP*CC(LW,LB-1,LA) + CC(LW-1,LB-1,LA)
C
C     ******************************************************************
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      COMMON /I1ECOM/ LAMAX, LBMAX, LPMAX
C
      DIMENSION CC(192)
C
      DATA ONE/1.0D0/
C
      LANEW=LAMAX+INC
      CC(1)=ONE
      IF(LBMAX.EQ.1) GO TO 200
      CC(2)=BP
      CC(3)=CC(1)
      IF(LBMAX.EQ.2) GO TO 200
      CC(4)=BP*CC(2)
      CC(5)=BP+CC(2)
      CC(6)=CC(3)
      IF(LBMAX.EQ.3) GO TO 200
      CC(7)=BP*CC(4)
      CC(8)=BP*CC(5)+CC(4)
      CC(9)=BP+CC(5)
      CC(10)=CC(6)
C
  200 IF(LANEW.EQ.1) RETURN
      CC(11)=AP
      CC(12)=CC(1)
      IF(LBMAX.EQ.1) GO TO 300
      CC(13)=AP*CC(2)
      CC(14)=AP+CC(2)
      CC(15)=CC(3)
      IF(LBMAX.EQ.2) GO TO 300
      CC(16)=AP*CC(4)
      CC(17)=AP*CC(5)+CC(4)
      CC(18)=AP+CC(5)
      CC(19)=CC(6)
      IF(LBMAX.EQ.3) GO TO 300
      CC(20)=AP*CC(7)
      CC(21)=AP*CC(8)+CC(7)
      CC(22)=AP*CC(9)+CC(8)
      CC(23)=AP+CC(9)
      CC(24)=CC(10)
C
  300 IF(LANEW.EQ.2) RETURN
      CC(25)=AP*CC(11)
      CC(26)=AP+CC(11)
      CC(27)=CC(12)
      IF(LBMAX.EQ.1) GO TO 400
      CC(28)=AP*CC(13)
      CC(29)=AP*CC(14)+CC(13)
      CC(30)=AP+CC(14)
      CC(31)=ONE
      IF(LBMAX.EQ.2) GO TO 400
      CC(32)=AP*CC(16)
      CC(33)=AP*CC(17)+CC(16)
      CC(34)=AP*CC(18)+CC(17)
      CC(35)=AP+CC(18)
      CC(36)=ONE
      IF(LBMAX.EQ.3) GO TO 400
      CC(37)=AP*CC(20)
      CC(38)=AP*CC(21)+CC(20)
      CC(39)=AP*CC(22)+CC(21)
      CC(40)=AP*CC(23)+CC(22)
      CC(41)=AP+CC(23)
      CC(42)=ONE
C
  400 IF(LANEW.EQ.3) RETURN
      CC(43)=AP*CC(25)
      CC(44)=AP*CC(26)+CC(25)
      CC(45)=AP+CC(26)
      CC(46)=ONE
      IF(LBMAX.EQ.1) GO TO 500
      CC(47)=AP*CC(28)
      CC(48)=AP*CC(29)+CC(28)
      CC(49)=AP*CC(30)+CC(29)
      CC(50)=AP+CC(30)
      CC(51)=ONE
      IF(LBMAX.EQ.2) GO TO 500
      CC(52)=AP*CC(32)
      CC(53)=AP*CC(33)+CC(32)
      CC(54)=AP*CC(34)+CC(33)
      CC(55)=AP*CC(35)+CC(34)
      CC(56)=AP+CC(35)
      CC(57)=ONE
      IF(LBMAX.EQ.3) GO TO 500
      CC(58)=AP*CC(37)
      CC(59)=AP*CC(38)+CC(37)
      CC(60)=AP*CC(39)+CC(38)
      CC(61)=AP*CC(40)+CC(39)
      CC(62)=AP*CC(41)+CC(40)
      CC(63)=AP+CC(41)
      CC(64)=ONE
C
  500 IF(LANEW.EQ.4) RETURN
      CC(65)=AP*CC(43)
      CC(66)=AP*CC(44)+CC(43)
      CC(67)=AP*CC(45)+CC(44)
      CC(68)=AP+CC(45)
      CC(69)=ONE
      IF(LBMAX.EQ.1) GO TO 600
      CC(70)=AP*CC(47)
      CC(71)=AP*CC(48)+CC(47)
      CC(72)=AP*CC(49)+CC(48)
      CC(73)=AP*CC(50)+CC(49)
      CC(74)=AP+CC(50)
      CC(75)=ONE
      IF(LBMAX.EQ.2) GO TO 600
      CC(76)=AP*CC(52)
      CC(77)=AP*CC(53)+CC(52)
      CC(78)=AP*CC(54)+CC(53)
      CC(79)=AP*CC(55)+CC(54)
      CC(80)=AP*CC(56)+CC(55)
      CC(81)=AP+CC(56)
      CC(82)=ONE
      IF(LBMAX.EQ.3) GO TO 600
      CC(83)=AP*CC(58)
      CC(84)=AP*CC(59)+CC(58)
      CC(85)=AP*CC(60)+CC(59)
      CC(86)=AP*CC(61)+CC(60)
      CC(87)=AP*CC(62)+CC(61)
      CC(88)=AP*CC(63)+CC(62)
      CC(89)=AP+CC(63)
      CC(90)=ONE
C
  600 IF(LANEW.EQ.5) RETURN
      CC(91)=AP*CC(65)
      CC(92)=AP*CC(66)+CC(65)
      CC(93)=AP*CC(67)+CC(66)
      CC(94)=AP*CC(68)+CC(67)
      CC(95)=AP+CC(68)
      CC(96)=ONE
      IF(LBMAX.EQ.1) GO TO 700
      CC(97)=AP*CC(70)
      CC(98)=AP*CC(71)+CC(70)
      CC(99)=AP*CC(72)+CC(71)
      CC(100)=AP*CC(73)+CC(72)
      CC(101)=AP*CC(74)+CC(73)
      CC(102)=AP+CC(74)
      CC(103)=ONE
      IF(LBMAX.EQ.2) GO TO 700
      CC(104)=AP*CC(76)
      CC(105)=AP*CC(77)+CC(76)
      CC(106)=AP*CC(78)+CC(77)
      CC(107)=AP*CC(79)+CC(78)
      CC(108)=AP*CC(80)+CC(79)
      CC(109)=AP*CC(81)+CC(80)
      CC(110)=AP+CC(81)
      CC(111)=ONE
      IF(LBMAX.EQ.3) GO TO 700
      CC(112)=AP*CC(83)
      CC(113)=AP*CC(84)+CC(83)
      CC(114)=AP*CC(85)+CC(84)
      CC(115)=AP*CC(86)+CC(85)
      CC(116)=AP*CC(87)+CC(86)
      CC(117)=AP*CC(88)+CC(87)
      CC(118)=AP*CC(89)+CC(88)
      CC(119)=AP+CC(89)
      CC(120)=ONE
C
  700 IF(LANEW.EQ.6) RETURN
      CC(121)=AP*CC(91)
      CC(122)=AP*CC(92)+CC(91)
      CC(123)=AP*CC(93)+CC(92)
      CC(124)=AP*CC(94)+CC(93)
      CC(125)=AP*CC(95)+CC(94)
      CC(126)=AP+CC(95)
      CC(127)=ONE
      IF(LBMAX.EQ.1) GO TO 800
      CC(128)=AP*CC(97)
      CC(129)=AP*CC(98)+CC(97)
      CC(130)=AP*CC(99)+CC(98)
      CC(131)=AP*CC(100)+CC(99)
      CC(132)=AP*CC(101)+CC(100)
      CC(133)=AP*CC(102)+CC(101)
      CC(134)=AP+CC(102)
      CC(135)=ONE
      IF(LBMAX.EQ.2) GO TO 800
      CC(136)=AP*CC(104)
      CC(137)=AP*CC(105)+CC(104)
      CC(138)=AP*CC(106)+CC(105)
      CC(139)=AP*CC(107)+CC(106)
      CC(140)=AP*CC(108)+CC(107)
      CC(141)=AP*CC(109)+CC(108)
      CC(142)=AP*CC(110)+CC(109)
      CC(143)=AP+CC(110)
      CC(144)=ONE
      IF(LBMAX.EQ.3) GO TO 800
      CC(145)=AP*CC(112)
      CC(146)=AP*CC(113)+CC(112)
      CC(147)=AP*CC(114)+CC(113)
      CC(148)=AP*CC(115)+CC(114)
      CC(149)=AP*CC(116)+CC(115)
      CC(150)=AP*CC(117)+CC(116)
      CC(151)=AP*CC(118)+CC(117)
      CC(152)=AP*CC(119)+CC(118)
      CC(153)=AP+CC(119)
      CC(154)=ONE
C
  800 IF(LANEW.EQ.7) RETURN
      CC(155)=AP*CC(121)
      CC(156)=AP*CC(122)+CC(121)
      CC(157)=AP*CC(123)+CC(122)
      CC(158)=AP*CC(124)+CC(123)
      CC(159)=AP*CC(125)+CC(124)
      CC(160)=AP*CC(126)+CC(125)
      CC(161)=AP+CC(126)
      CC(162)=ONE
      IF(LBMAX.EQ.1) RETURN
      CC(163)=AP*CC(128)
      CC(164)=AP*CC(129)+CC(128)
      CC(165)=AP*CC(130)+CC(129)
      CC(166)=AP*CC(131)+CC(130)
      CC(167)=AP*CC(132)+CC(131)
      CC(168)=AP*CC(133)+CC(132)
      CC(169)=AP*CC(134)+CC(133)
      CC(170)=AP+CC(134)
      CC(171)=ONE
      IF(LBMAX.EQ.2) RETURN
      CC(172)=AP*CC(136)
      CC(173)=AP*CC(137)+CC(136)
      CC(174)=AP*CC(138)+CC(137)
      CC(175)=AP*CC(139)+CC(138)
      CC(176)=AP*CC(140)+CC(139)
      CC(177)=AP*CC(141)+CC(140)
      CC(178)=AP*CC(142)+CC(141)
      CC(179)=AP*CC(143)+CC(142)
      CC(180)=AP+CC(143)
      CC(181)=ONE
      IF(LBMAX.EQ.3) RETURN
      CC(182)=AP*CC(145)
      CC(183)=AP*CC(146)+CC(145)
      CC(184)=AP*CC(147)+CC(146)
      CC(185)=AP*CC(148)+CC(147)
      CC(186)=AP*CC(149)+CC(148)
      CC(187)=AP*CC(150)+CC(149)
      CC(188)=AP*CC(151)+CC(150)
      CC(189)=AP*CC(152)+CC(151)
      CC(190)=AP*CC(153)+CC(152)
      CC(191)=AP+CC(153)
      CC(192)=ONE
      RETURN
      END
      SUBROUTINE GETCC2(CC,A,B,L1MAX,L2MAX)
C
C     ******************************************************************
C     ROUTINE TO OBTAIN C-COEFFICIENTS FOR SPLITTING
C     TWO-DIMENSIONAL INTEGRALS IN ROUTINES TWOD3C AND TWOD4C.
C     ******************************************************************
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      DIMENSION CC(48)
C
      IF(L2MAX.LE.1)GO TO 1
C
      CC(1)=B
C
      IF(L2MAX.EQ.2)GO TO 1
C
      CC(2)=B*CC(1)
      CC(3)=B+CC(1)
C
      IF(L2MAX.EQ.3)GO TO 1
C
      CC(4)=B*CC(2)
      CC(5)=B*CC(3)+CC(2)
      CC(6)=B+CC(3)
C
    1 IF(L1MAX.LE.1)RETURN
C
      CC(7)=A
C
      IF(L2MAX.LE.1)GO TO 2
C
      CC(8)=A*CC(1)
      CC(9)=A+CC(1)
C
      IF(L2MAX.EQ.2)GO TO 2
C
      CC(10)=A*CC(2)
      CC(11)=A*CC(3)+CC(2)
      CC(12)=A+CC(3)
C
      IF(L2MAX.EQ.3)GO TO 2
C
      CC(13)=A*CC(4)
      CC(14)=A*CC(5)+CC(4)
      CC(15)=A*CC(6)+CC(5)
      CC(16)=A+CC(6)
C
    2 IF(L1MAX.EQ.2)RETURN
C
      CC(17)=A*CC(7)
      CC(18)=A+CC(7)
C
      IF(L2MAX.LE.1)GO TO 3
C
      CC(19)=A*CC(8)
      CC(20)=A*CC(9)+CC(8)
      CC(21)=A+CC(9)
C
      IF(L2MAX.EQ.2)GO TO 3
C
      CC(22)=A*CC(10)
      CC(23)=A*CC(11)+CC(10)
      CC(24)=A*CC(12)+CC(11)
      CC(25)=A+CC(12)
C
      IF(L2MAX.EQ.3)GO TO 3
C
      CC(26)=A*CC(13)
      CC(27)=A*CC(14)+CC(13)
      CC(28)=A*CC(15)+CC(14)
      CC(29)=A*CC(16)+CC(15)
      CC(30)=A+CC(16)
C
    3 IF(L1MAX.EQ.3)RETURN
C
      CC(31)=A*CC(17)
      CC(32)=A*CC(18)+CC(17)
      CC(33)=A+CC(18)
C
      IF(L2MAX.LE.1)RETURN
C
      CC(34)=A*CC(19)
      CC(35)=A*CC(20)+CC(19)
      CC(36)=A*CC(21)+CC(20)
      CC(37)=A+CC(21)
C
      IF(L2MAX.EQ.2)RETURN
C
      CC(38)=A*CC(22)
      CC(39)=A*CC(23)+CC(22)
      CC(40)=A*CC(24)+CC(23)
      CC(41)=A*CC(25)+CC(24)
      CC(42)=A+CC(25)
C
      IF(L2MAX.EQ.3)RETURN
C
      CC(43)=A*CC(26)
      CC(44)=A*CC(27)+CC(26)
      CC(45)=A*CC(28)+CC(27)
      CC(46)=A*CC(29)+CC(28)
      CC(47)=A*CC(30)+CC(29)
      CC(48)=A+CC(30)
C
      RETURN
      END
      SUBROUTINE GETIP2(VALIP,X,CONST,CCP,CCQ)
C
C     ******************************************************************
C     ROUTINE TO OBTAIN TWO-DIMENSIONAL INTEGRALS.
C     CALLED FOR X, Y, AND Z.  THE ONLY WORK DONE HERE IS TO COMPUTE
C     THE G'S, THE RAW HERMITE RECURSION FORMS.
C     ******************************************************************
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      COMMON/I2ECOM/LAMAX,LBMAX,LCMAX,LDMAX,LPMAX,LQMAX,LPQMAX,L2EFLL,
     1 EQ,EP2I,RHOT2,G(13),VALI2P(49),VALI3P(112),A(174)
C
      DIMENSION VALIP(256),CCP(48),CCQ(48),XINT(11)
C*
      DATA XINT/1.0D0,2.0D0,3.0D0,4.0D0,5.0D0,6.0D0,7.0D0,8.0D0,9.0D0,
     1 10.0D0,11.0D0/
C*
C     FILL G(IV).  NOTE INDICES INCREMENTED BY 1
      G(1)=CONST
      VALIP(1)=G(1)
      IF(LPQMAX.LE.1)RETURN
C     NOTE THAT RHOT2=2*RHO*T**2.
      G(2)=RHOT2*X*G(1)
      IF(LPQMAX.EQ.2)GO TO 20
      DO 13 IV=3,LPQMAX
   13 G(IV)=RHOT2*(X*G(IV-1)-XINT(IV-2)*G(IV-2))
C     FIND TWO-CENTER INTEGRALS
C     IN THIS SECTION THE INDEX IV IS INCREMENTED BY 2
   20 CALL TWOD2C
C
C     FORM 2-DIMENSIONAL 3-CENTER INTEGRALS
      CALL TWOD3C(CCQ)
C
C     FORM 2-DIMENSIONAL 4-CENTER INTEGRALS
      CALL TWOD4C(CCP,VALIP)
      RETURN
      END
      SUBROUTINE PUREDF(X)
C*
C     ----------------
C     QCPE GAUSSIAN 80
C     U OF T VERSION
C     OCTOBER 1985
C     ----------------
C*
C     THIS ROUTINE TRANSFORMS THE INPUT RECTANGULAR MATRIX X FROM
C     SECOND- OR THIRD-ORDER GAUSSIANS TO PURE ANGULAR FUNCTIONS.
C     (IE. TO PURE D- OR F-FUNCTIONS.)
C
C     BECAUSE THE TRANSFORMATION MATRICES ARE OF UNIT MATRIX FORM
C     AND ARE SPARSE, THE MATRIX MULTIPLICATIONS ARE EXPLICITELY
C     WRITTEN.
C
C     THIS ROUTINE WILL ALTER /LIMIT/ IN THAT IEND AND JEND ARE
C     UPDATED IF NECESSARY.
C*
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C#
C     PARAMETER (NB=#NB)
C##
      PARAMETER (NB=200)
C###
      PARAMETER (ONE=1.0D0, TWO=2.0D0)
C
      COMMON/LIMIT/IMJ,ISTART,JSTART,IEND,JEND,IRANGE,JRANGE,
     1 ITYPE,JTYPE,IAOS,JAOS,IOP8,JOP8,LIND(NB)
C
      DIMENSION X(100)
C
      SAVE R1, R2, R3, R4, Z1, Z2, Z3
C
      DATA PT5/0.5D0/, THREE/3.0D0/, FOUR/4.0D0/, FIVE/5.0D0/
C
C     TEST FOR POSSIBLE BYPASS OF TRANSFORMATION AT B.
      IF (JOP8 .EQ. 0) GO TO 300
      IF(JTYPE-2)300,100,200
C
C     D-TRANSFORM AT B.
C
C     INDX1 IS THE MAIN INDEX INTO X.
  100 INDX1=1
C     LOOP OVER ALL VALUES OF I.
      DO 120 I=1,IRANGE
C     FORM 3*Z**2-R**2 PART AT B.
      DZ2=X(INDX1+2)-PT5*(X(INDX1)+X(INDX1+1))
C     FORM X**2-Y**2 AT B.
      DX2Y2=R3*(X(INDX1)-X(INDX1+1))
C     FILL THE INTEGRALS INTO X.
      X(INDX1  )=DZ2
      X(INDX1+1)=X(INDX1+4)
      X(INDX1+2)=X(INDX1+5)
      X(INDX1+4)=X(INDX1+3)
      X(INDX1+3)=DX2Y2
  120 INDX1=INDX1+JRANGE
      JEND=9
      GO TO 300
C
C     F-TRANSFORM AT B.
C
C     SET INDX1.
  200 INDX1=1
C     LOOP OVER ALL POSSIBLE I VALUES.
      DO 220 I=1,IRANGE
C
      F0 =X(INDX1+2)-R2*(X(INDX1+5)+X(INDX1+8))
      F1P=R4*(Z1*X(INDX1+6)-X(INDX1)-Z2*X(INDX1+3))
      F1M=R4*(Z1*X(INDX1+7)-X(INDX1+1)-Z2*X(INDX1+4))
      F2P=R3*(X(INDX1+5)-X(INDX1+8))
      F2M=X(INDX1+9)
      F3P=R1*(X(INDX1)-Z3*X(INDX1+3))
      F3M=R1*(Z3*X(INDX1+4)-X(INDX1+1))
C
      X(INDX1  )=F0
      X(INDX1+1)=F1P
      X(INDX1+2)=F1M
      X(INDX1+3)=F2P
      X(INDX1+4)=F2M
      X(INDX1+5)=F3P
      X(INDX1+6)=F3M
C
  220 INDX1=INDX1+JRANGE
      JEND=17
C
C     TRANSFORMATION AT B IS COMPLETE.
C     THE COMPRESSION USED IN QCPE GAUSSIAN 80 IS NOT NEEDED BECAUSE
C     FILMAT INDEXES ARRAY X USING THE OLD VALUES OF IRANGE AND JRANGE.
C
C     TEST FOR POSSIBLE BYPASS OF TRANSFORMATION AT A.
  300 IF (IOP8 .EQ. 0) GO TO 500
      IF(ITYPE-2)500,310,400
C
C     EXECUTE D-TRANSFORM AT A.
C
C     OBTAIN STARTING INDEX.
  310 INDX1=1
C     OBTAIN INCREMENTS.
      INCR1=JRANGE
      INCR2=INCR1+JRANGE
      INCR3=INCR2+JRANGE
      INCR4=INCR3+JRANGE
      INCR5=INCR4+JRANGE
C
C     PERFORM D-TRANSFORM AT A.
      DO 330 J=JSTART,JEND
      DZ2=X(INDX1+INCR2)-PT5*(X(INDX1)+X(INDX1+INCR1))
      DX2Y2=R3*(X(INDX1)-X(INDX1+INCR1))
      X(INDX1      )=DZ2
      X(INDX1+INCR1)=X(INDX1+INCR4)
      X(INDX1+INCR2)=X(INDX1+INCR5)
      X(INDX1+INCR4)=X(INDX1+INCR3)
      X(INDX1+INCR3)=DX2Y2
  330 INDX1=INDX1+1
      IEND=9
      GO TO 500
C
C     TRANSFORM TO PURE F AT A.
C
C     OBTAIN STARTING INDEX.
  400 INDX1=1
C     OBTAIN INCREMENTS.
      INCR1=JRANGE
      INCR2=INCR1+JRANGE
      INCR3=INCR2+JRANGE
      INCR4=INCR3+JRANGE
      INCR5=INCR4+JRANGE
      INCR6=INCR5+JRANGE
      INCR7=INCR6+JRANGE
      INCR8=INCR7+JRANGE
      INCR9=INCR8+JRANGE
C
C     COMMENCE F-TRANSFORMATION LOOP AT A.
      DO 420 J=JSTART,JEND
C
      F0 =X(INDX1+INCR2)-R2*(X(INDX1+INCR5)+X(INDX1+INCR8))
      F1P=R4*(Z1*X(INDX1+INCR6)-X(INDX1)-Z2*X(INDX1+INCR3))
      F1M=R4*(Z1*X(INDX1+INCR7)-X(INDX1+INCR1)-Z2*X(INDX1+INCR4))
      F2P=R3*(X(INDX1+INCR5)-X(INDX1+INCR8))
      F2M=X(INDX1+INCR9)
      F3P=R1*(X(INDX1)-Z3*X(INDX1+INCR3))
      F3M=R1*(Z3*X(INDX1+INCR4)-X(INDX1+INCR1))
C
      X(INDX1      )=F0
      X(INDX1+INCR1)=F1P
      X(INDX1+INCR2)=F1M
      X(INDX1+INCR3)=F2P
      X(INDX1+INCR4)=F2M
      X(INDX1+INCR5)=F3P
      X(INDX1+INCR6)=F3M
C
  420 INDX1=INDX1+1
      IEND=17
C
  500 RETURN
C*
      ENTRY PURSET
C*
C     SET CONSTANTS FOR PUREDF.
C*
      ROOT2=DSQRT(TWO)
      ROOT3=DSQRT(THREE)
      ROOT5=DSQRT(FIVE)
      R1=PT5*ROOT5/ROOT2
      R2=THREE/(ROOT5+ROOT5)
      R3=PT5*ROOT3
      R4=PT5*ROOT3/ROOT2
      Z1=FOUR/ROOT5
      Z2=ONE/ROOT5
      Z3=THREE/ROOT5
      RETURN
      END
      SUBROUTINE PURDF2(INTC,IOP,TQ,TQNEW,TQOUT,INTCP)
C*
C     ----------------
C     GAUSSIAN 82
C     U OF T VERSION
C     FEBRUARY 1987
C     ----------------
C*
C     ******************************************************************
C     ROUTINE TO TRANSFORM (IN A STEP-WISE FASHION) THE 6D INTEGRALS
C     TO THE FIVE PURE D INTEGRALS.
C     THIS ROUTINE WILL ALSO TRANSFORM 10F TO SEVEN F.
C     THIS ROUTINE IS DIVIDED ROUGHLY INTO THREE SECTIONS.
C     1.  INITIALIZATION -- THE VARIOUS INDEXING ARRAYS ARE FILLED,
C         AND SOME COMMON VARIABLES ARE COMPUTED.
C     2.  RESTORATION OF SHELL DUPLICATES -- IN THIS PHASE, THE
C         SHELL DUPLICATES ARE RESTORED.  THIS ESSENTIALLY UN-DOES
C         THE WORK DONE BY THE IF-CHECKS IN THE A. O. LOOP IN THE
C         MAIN PROGRAM.  IT IS UNDOUBTEDLY MORE EFFICIENT TO COMPUTE
C         THE MINIMUM NUMBER OF INTEGRALS, BECAUSE GENERALLY THE
C         RESTORATION PROCESS DOES NOT REQUIRE MULTIPLIES.  THERE ARE
C         SIX RESTORATION CASES, AND THEY ARE EXPLAINED IN DETAIL BELOW.
C         THIS SECTION WAS FILCHED FROM THE XUNCON PROGRAM OF
C         G-73 (L312).  THIS SECTION WAS CODED AND EXTENSIVELY CHECKED
C         AROUND CHRISTMAS 1975.
C     3.  TRANSFORMATION -- THE FINAL SECTION IS DEVOTED TO THE ACTUAL
C         TRANSFORMATION.  AS MOST OF THE TRANSFORMATION IS A UNIT
C         TRANSFORMATION, IT IS PRETTY MUCH EXPLICITLY WRITTEN OUT.
C         THIS SECTION DIFFERS FROM THE UNCON COUNTERPART IN THAT
C         IT DOES NOT REQUIRE THE INTERMEDIATE COMPRESSION STEPS, AND
C         IS THEREFORE MORE EFFICIENT.  THE ACTUAL TRANSFORMATION STEPS
C         HAVE BEEN OPTIMIZED SO AS TO REDUCE THE TOTAL NUMBER
C         OF MULTIPLICATIONS.  THE FUNCTIONS ARE ORDERED IN INCREASING
C         M-COMBINATION, WITH THE PLUS COMBINATION ALWAYS FIRST.
C         THE ROUTINE IS CAPABLE OF PERFORMING MIXED TRANSFORMATIONS,
C         IE. PURE-D, THIRD-ORDER, AND VICE-VERSA.  AT THE END OF THIS
C         SECTION, THE SHELL DUPLICATES ARE ZEROED, AND THE
C         EXTRANEOUS INTEGRALS COMPRESSED OUT.
C         NOTE THAT THIS ROUTINE MODIFIES IRANGE...LRANGE AND IEND...
C         LEND.  THIS MAY BE IMPORTANT IF THIS ROUTINE IS INCORPORATED
C         INTO OTHER OVERLAYS.  WHERE POSSIBLE (EVERYWHERE)
C         RUNNING INDICES ARE USED RATHER THAN COMPUTED INDICES TO RE-
C         DUCE THE REQUIRED NUMBER OF MULTIPLICATIONS.
C     ******************************************************************
C*
C     NOTE: TQ AND TQNEW ACTUALLY REFER TO THE SAME ARRAY.
C*
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      INTEGER UBOUND,ULPURE
C
      COMMON/LIMIT2/ITYPE,JTYPE,KTYPE,LTYPE,
     1              IMJ,IMK,JML,KML,IMKJML,ISTART,JSTART,KSTART,LSTART,
     2              IEND,JEND,KEND,LEND,LENTQ,
     3              R3OV2,ROOT3,ROOT5,ROOT15,R1,R2,R4,Z1,Z2,Z3
      COMMON /SHLCOM/ ISHELL,JSHELL,KSHELL,LSHELL,IRANGE,JRANGE,KRANGE,
     1 LRANGE
      COMMON/I2ECOM/LAMAX,LBMAX,LCMAX,LDMAX,LPMAX,LQMAX,LPQMAX,L2EFLL,
     1 EQ,EP2I,RHOT2,G(13),VALI2P(49),VALI3P(112),A(174)
C
      DIMENSION TQ(10000),TQNEW(10000),TQOUT(10000),IOP(99),IJKLPR(4,2)
      DIMENSION IIND(20),JIND(20),KIND(20),IINEW(20),JJNEW(20),KKNEW(20)
      DIMENSION UBOUND(4),ULPURE(4)
C?GLD
C     EXTENDED DUMMY TQOUT
C??
      EQUIVALENCE (R3,R3OV2)
      EQUIVALENCE (LR1,LRANGE),(KLR1,KSL),(JKLR1,JSKSL)
C*
      DATA ZERO/0.0D0/,PT5/0.5D0/
      DATA UBOUND/1,4,10,20/,ULPURE/1,4,9,17/
      DATA IJKLPR/0,0,0,0,   0,0,-1,1/
C*
C     ******************************************************************
C     INITIALIZATION SECTION.
C     ******************************************************************
C
C     RECOVER IEND, ETC.
C     ITRFLG IS A TEST VARIABLE INDICATING WHETHER OR NOT THE
C     TRANSFORMATION SECTION IS TO BE EXECUTED.
C     ITRFLG=0 ... NO TRANSFORMATION.
C     ITRFLG>0 ... TRANSFORMATION IS REQUIRED.
C     IPURE, ETC.,
C     - ... 6D TO 5D
C     0 ... NO TRANSFORMATION
C     + ... 10F TO 7F
      J=IOP(8)+1
      IPURE=IJKLPR(LAMAX,J)
      JPURE=IJKLPR(LBMAX,J)
      KPURE=IJKLPR(LCMAX,J)
      LPURE=IJKLPR(LDMAX,J)
      ITRFLG=IABS(IPURE)+IABS(JPURE)+IABS(KPURE)+IABS(LPURE)
      IEND=UBOUND(LAMAX)
      JEND=UBOUND(LBMAX)
      KEND=UBOUND(LCMAX)
      LEND=UBOUND(LDMAX)
C
C     INDEXING RANGES ARE PICKED UP FROM /SHLCOM/.
C     COMPUTE RANGE PRODUCTS AND INDEXING BIASES.
C
      KSL=KRANGE*LRANGE
      JSKSL=JRANGE*KSL
      ISJ=IRANGE*JRANGE
      ISTM1=ISTART-1
      JSTM1=JSTART-1
      KSTM1=KSTART-1
      LSTM1=LSTART-1
C
C     COMPUTE INDEXING ARRAYS.
C     THESE ARRAYS GIVE THE PROPER INDEX INTO THE ARRAY AS DIMENSIONED
C     BY THE MAXIMUM RANGES IN A PARTICULAR SHELL COMBINATION.
C
      ITEMP=0
      DO 100 K=KSTART,KEND
      KIND(K)=ITEMP
  100 ITEMP=ITEMP+LRANGE
      ITEMP=0
      DO 110 J=JSTART,JEND
      JIND(J)=ITEMP
  110 ITEMP=ITEMP+KSL
      ITEMP=0
      DO 120 I=ISTART,IEND
      IIND(I)=ITEMP
  120 ITEMP=ITEMP+JSKSL
C
C     ******************************************************************
C     SECOND SECTION, RESTORE SHELL DUPLICATES.
C     ******************************************************************
C
C     IN WHAT FOLLOWS, THERE ARE 6 CASES TO BE CONSIDERED.
C
C        CASE  CONDITION          RELATION OF ISHELL, ETC.
C        ----  ---------          ------------------------
C
C          1   NONE               ALL DISTINCT, IE. NO TWO SHELLS ARE
C                                 THE SAME.
C
C          2   A                  ISHELL=JSHELL ONLY (EG. (33,21)).
C
C          3   B                  KSHELL=LSHELL ONLY (EG. (32,11)).
C          4   C                  ISHELL=KSHELL AND JSHELL=LSHELL ONLY
C                                 (EG. (21,21)).
C
C          5   AB                 ISHELL=JSHELL AND KSHELL=LSHELL,
C                                 (EG. (22,11)).
C
C          6   ABC, AC, BC        ALL EQUAL (EG. (22,22)).
C
C
C     CASE 1 IS THE MOST FREQUENTLY OCCURRING CASE, AND IS TESTED FOR
C     FIRST.  THE OTHER CASES ARE TESTED FOR ESSENTIALLY IN THAT
C     MANNER THAT REDUCES THE NUMBER OF IF-STATEMENTS.
C
C     IF THE PRODUCT IS NON-ZERO, WE HAVE CASE 1.
C
      IF(IMJ*KML*IMKJML.NE.0)GO TO 1000
C
C     ENTRY AT THIS POINT IMPLIES THAT AT LEAST ONE OF THE 3
C     POSSIBLE SHELL COINCIDENCE FLAGS IS ZERO.
C     THE ALL EQUAL CASE IS EASIEST TO DETECT.
C
      IF(IMJ+IMKJML.EQ.0)GO TO 6
C
C     ENTRY AT THIS POINT IMPLIES THAT ONE OR BOTH OF IMJ, IMKJML
C     IS NON-ZERO.
C     THEREFORE, IMKJML=0 IMPLIES CASE 4.
C
      IF(IMKJML.EQ.0)GO TO 4
C
C     AT THIS POINT, EITHER IMJ OR KML (OR BOTH) IS (ARE) ZERO.
C     TEST FOR BOTH SIMULTANEOUSLY ZERO.
C
      IF(IMJ+KML.EQ.0)GO TO 5
C
C     AT THIS POINT, BOTH ARE NOT ZERO TOGETHER.
C     (IMJ*IMKJML*KML)=0 AND THE PREVIOUS TWO TESTS MEAN THAT AT
C     LEAST ONE IS ZERO.
C     THEREFORE, ONLY TEST FOR ONE OF THEM (IMJ).
C
      IF(IMJ.NE.0)GO TO 3
C
C     ALL POSSIBLE CASES HAVE BEEN ELIMINATED.
C
C     ******************************************************************
C     CASE 1, NO OPERATION REQUIRED, INTEGRALS ARE READY FOR TRANS-
C     FORMATION.
C     ******************************************************************
C
C     ******************************************************************
C     CASE 2, ISHELL=JSHELL.
C     ******************************************************************
C
C     TQ CONTAINS (IRANGE*(IRANGE+1))/2 RECTANGULAR MATRICES
C     WITH EACH CONTAINING (LRANGE*KRANGE) INTEGRALS.
C     WE DESIRE TO EXPAND (IJ) THROUGHOUT INTO TQNEW.
C     TO DO THIS, WE FALL BACKWARDS THROUGH TQ.
C     THE PLOY IS AS FOLLOWS,
C        SELECT A PAIR (IJ) IN DECREMENTING MODE.
C        THERE ARE TWO POSSIBILITIES,
C             1. I.GE.J, HERE, THE DESIRED RECTANGULAR ARRAY
C             IS LOCATED IN TQ.
C             IT IS COPIED TO TQNEW IN DESCENDING MODE, USING RUNNING
C             INDICES.
C             2. I.LT.J, HERE, THE DESIRED ARRAY IS ALREADY IN TQNEW.
C             IT IS COPIED, AGAIN IN DESCENDING MODE, TO ITS NEW
C             RESTING PLACE IN TQNEW.
C
C     NOTE THAT IF KSHELL=LSHELL, THIS CASE DEGENERATES TO A SERIES
C     OF SINGLE ELEMENT COPIES.
C
C     BYPASS EXPANSION IF IRANGE=1.
C     SINCE ISHELL=JSHELL, IT IS ONLY NECESSARY TO TEST IRANGE.
C
      IF(IRANGE.EQ.1)GO TO 1000
C
C     PERFORM INITIALIZATION.
C     LWATQ IS PICKED UP FROM INTC   (INDX2).
C     LWATQN IS PICKED UP FROM LENTQ   (INDX1).
C     THESE ARE MAINTAINED AS RUNNING INDICES.
C     THUS, IN ANY GIVEN PASS, THE ONLY INDEX THAT MUST BE
C     COMPUTED  IS INDX3 (BASED ON IND AND JND).
C
      INDX1=LENTQ+1
      INDX2=INTC+1
      IND=IEND+1
      DO 350 I=ISTART,IEND
      IND=IND-1
      JND=JEND+1
      DO 350 J=JSTART,JEND
      JND=JND-1
C     NOW HAVE A PAIR (IND,JND).  MAKE TESTS AND BRANCH TO
C     PARTICULAR COPY CODE.
      IF(IND.LT.JND)GO TO 330
C     PREFERRED CASE, IND.GE.JND.
C     HERE, WE COPY FROM TQ TO TQNEW SEQUENTIALLY BACKWARDS.
      DO 320 KL=1,KSL
      INDX1=INDX1-1
      INDX2=INDX2-1
  320 TQNEW(INDX1)=TQ(INDX2)
      GO TO 350
C     JND.GT.IND.
C     HERE, COPY FROM TQNEW TO TQNEW, USING COMPUTED INDEX INDX3.
  330 INDX3=IIND(JND)+JIND(IND)+KSL
      DO 340 KL=1,KSL
      INDX1=INDX1-1
      TQNEW(INDX1)=TQNEW(INDX3)
  340 INDX3=INDX3-1
  350 CONTINUE
      GO TO 1000
C
C     ******************************************************************
C     CASE 3, KSHELL=LSHELL ONLY.
C     ******************************************************************
C
C     CURRENTLY, TQ CONTAINS IRANGE*JRANGE SYMMETRIC MATRICES
C     ((KRANGE*(KRANGE+1))/2 ELEMENTS IN EACH).
C     WE DESIRE TO EXPAND K.GE.L FOR EACH PAIR (IJ) THROUGHOUT.
C     THUS, TQNEW WILL CONTAIN IRANGE*JRANGE SQUARE MATRICES.
C
C     THE TACTIC HERE IS TO FALL BACKWARDS THROUGH ALL PAIRS (IJ)
C     AND TO PERFORM A SIMPLE LINEAR TO SQUARE CONVERSION
C     FOR EACH.
C     THIS PROCESS IS ACCOMPLISHED IN 2 STAGES FOR EACH PAIR (IJ).
C     FIRST, THE EXISTING ELEMENTS OF THE SYMMETRIC MATRIX ARE
C     TRANSFERRED TO THE APPROPRIATE PLACES IN TQNEW.
C     SECOND, THE MATRIX IS EXPANDED TO SQUARE FORM IN PLACE IN
C     TQNEW.
C
C     IN ANY PASS THROUGH THE IJ-LOOP, THE LWATQN FOR THE NTT WORD
C     TRANSFER IS COMPUTED FROM INDX1, A RUNNING INDEX STARTING AT LENTQ
C     SIMILARLY, LWATQ IS MAINTAINED IN INDX2, A RUNNING INDEX THAT
C     STARTS AT INTC.
C
C     THIS UNPACK IS BYPASSED IF KRANGE AND LRANGE=1.
C     SINCE KSHELL=LSHELL, IT FOLLOWS THAT KRANGE=LRANGE, AND
C     IT IS SUFFICIENT TO TEST JUST KRANGE.
C
    3 IF(KRANGE.EQ.1)GO TO 1000
C     PERFORM NECESSARY INITIALIZATION.
      NTT=(KRANGE*(KRANGE+1))/2
      KRP1=KRANGE+1
      KRM1=KRANGE-1
      LWATQ=INTC
      LWATQN=LENTQ
      DO 450 IJ=1,ISJ
      INDX1=LWATQN
      INDX2=LWATQ
      LWATQ=LWATQ-NTT
      LWATQN=LWATQN-KSL
C     PERFORM NTT-WORD TRANSFER.
      DO 420 K=1,KRANGE
      LLIM=KRP1-K
      DO 410 L=1,LLIM
      TQNEW(INDX1)=TQ(INDX2)
      INDX2=INDX2-1
  410 INDX1=INDX1-1
  420 INDX1=INDX1-K
C     PERFORM EXPANSION OF (KL) IN PLACE IN TQNEW.
      INDX1=LWATQN+2
      INDX2=LWATQN+KRP1
      DO 440 K=1,KRM1
C     USE INDS1 AND INDS2 TO PRESERVE INDX1 AND INDX2.
      INDS1=INDX1
      INDS2=INDX2
      KRMK=KRANGE-K
      DO 430 L=1,KRMK
      TQNEW(INDX1)=TQNEW(INDX2)
      INDX1=INDX1+1
  430 INDX2=INDX2+KRANGE
      INDX1=INDS1+KRP1
  440 INDX2=INDS2+KRP1
  450 CONTINUE
      GO TO 1000
C
C     ******************************************************************
C     CASE 4, ISHELL=KSHELL AND JSHELL=LSHELL.
C     ******************************************************************
C
C     THIS CASE (AND ALSO CASE 6) IS SOMEWHAT COMPLICATED AND A
C     SUBSTANTIAL AMOUNT OF OVERHEAD IS INCURRED.
C
C     THE PROCEDURE IS AS FOLLOWS.
C
C     WE STEP BACKWARDS THROUGH (I,J,K,L), USING THE FULL POSSIBLE
C     RANGE.
C     INSIDE THE L-LOOP, THE FOUR INDICES ARE EXAMINED.  THE FOLLOWING
C     LIMITS APPLY TO THE INTEGRALS IN TQ,
C
C        I.GE.K
C        WHEN I=K, J.GE.L
C
C     THE FOUR INDICES ARE TESTED AGAINST THESE CONDITIONS AND
C     EITHER
C
C        1.  THE CONDITIONS ARE MET, IN WHICH CASE, THE NEXT
C            SEQUENTIALLY DECREMENTING INTEGRAL IS COPIED FROM TQ TO
C            TQNEW AND THE APPROPRIATE COUNTERS (INDICES) ARE
C            DECREMENTED.
C
C        2.  THE CONDITIONS ARE NOT SATISFIED.  IN THIS CASE, DUE TO THE
C            NATURE OF THE COPY, THE DESIRED INTEGRAL ALREADY RESIDES
C            IN TQNEW.
C            IT IS TRANSFERRED, AND AGAIN
C            INDEXING IS DONE.
C
C     INDX1 INDEXES IN TQNEW, AND STARTS AT LENTQ.
C     INDX2 INDEXES IN TQ, AND STARTS AT INTC.
C     INDX3 INDEXES IN TQNEW WHEN COPYING FORM TQNEW TO TQNEW.  THIS
C           INDEX MUST BE COMPUTED.
C
    4 INDX1=LENTQ
      INDX2=INTC+1
      IND=IEND+1
      DO 560 I=ISTART,IEND
      IND=IND-1
      ITEMP=KIND(IND)-JSTM1
      JND=JEND+1
      DO 560 J=JSTART,JEND
      JND=JND-1
      JTEMP=ITEMP+JND
      KND=KEND+1
      DO 560 K=KSTART,KEND
      KND=KND-1
      KTEMP=JTEMP+IIND(KND)
      LND=LEND+1
      DO 560 L=LSTART,LEND
      LND=LND-1
C     NOW IN L-LOOP, PERFORM TESTS.
      IF(IND-KND)530,520,550
  520 IF(JND.GE.LND)GO TO 550
C     COPY FROM TQNEW TO TQNEW AFTER COMPUTING INDX3.
  530 INDX3=KTEMP+JIND(LND)
      TQNEW(INDX1)=TQNEW(INDX3)
      GO TO 560
C     COPY NEXT SEQUENTIAL INTEGRAL FROM TQ TO TQNEW.
  550 INDX2=INDX2-1
      TQNEW(INDX1)=TQ(INDX2)
  560 INDX1=INDX1-1
      GO TO 1000
C
C     ******************************************************************
C     CASE 5, ISHELL=JSHELL AND KSHELL=LSHELL.
C     ******************************************************************
C
C     THIS CASE IS ESSENTIALLY THE SAME AS CASES 2 AND 3 COMBINED.
C     LWA IN TQ IS MOST CONVENIENTLY SPECIFIED BY INTC (MAINTAINED IN
C     INDX2).
C     LWA IN TQNEW IS IIND(IND)+JIND(JND)+KSL, OR STARTING AT
C     LENTQ, IT IS DECREMENTED BY KSL ON EACH PASS.
C
C     FOR EACH PAIR (IND,JND) WE EITHER
C        (IND.GE.JND) COPY FROM TQ TO TQNEW AND THEN EXPAND (KL) IN
C                     PLACE IN TQNEW.
C        (IND.LT.JND) COPY (STILL DECREMENTING) DIRECTLY FROM TQNEW
C                     TO TQNEW.
C
C     NOTE THAT IF KRANGE AND LRANGE ARE 1, AN ALTERNATIVE PROCEDURE
C     MUST BE USED .
C
    5 IF(KRANGE.EQ.1)GO TO 710
      LWATQ=INTC
      LWATQN=LENTQ
      NTT=(KRANGE*(KRANGE+1))/2
      KRP1=KRANGE+1
      KRM1=KRANGE-1
      IND=IEND+1
      DO 690 I=ISTART,IEND
      IND=IND-1
      JND=JEND+1
      DO 690 J=JSTART,JEND
      JND=JND-1
C     TEST (IND,JND) TO DETERMINE THE ACTION TO BE TAKEN.
      IF(IND.LT.JND)GO TO 670
C     IND.GE.JND, DO AS IN CASE 3.
C     COPY NTT INTEGRALS FROM TQ TO TQNEW WITH CORRECT PLACEMENT.
      INDX2=LWATQ
      INDX1=LWATQN
      LWATQ=LWATQ-NTT
      LWATQN=LWATQN-KSL
      DO 640 K=1,KRANGE
      LLIM=KRP1-K
      DO 630 L=1,LLIM
      TQNEW(INDX1)=TQ(INDX2)
      INDX2=INDX2-1
  630 INDX1=INDX1-1
  640 INDX1=INDX1-K
C     EXECUTE EXPANSION OF (KL).
      INDX1=LWATQN+2
      INDX2=LWATQN+KRP1
      DO 660 K=1,KRM1
      INDS1=INDX1
      INDS2=INDX2
      KRMK=KRANGE-K
      DO 650 L=1,KRMK
      TQNEW(INDX1)=TQNEW(INDX2)
      INDX1=INDX1+1
  650 INDX2=INDX2+KRANGE
      INDX1=INDS1+KRP1
  660 INDX2=INDS2+KRP1
      GO TO 690
C
C     (IND.LT.JND), DESIRED ARRAY ALREADY RESIDES IN TQNEW.
C                   FIND IT AND COPY IT OUT.
C     THIS IS DONE BY COPY SEQUENTIALLY IN REVERSE FROM TQNEW TO
C     TQNEW.
C     INDX1 STEPS INPUT INTO TQNEW.
C     INDX2 STEPS OUTPUT FROM TQNEW.
C     DETERMINE INDX1 FROM LWATQN, AND DECREMENT LWATQN.
C     LWATQN (OUTPUT) IS COMPUTED FROM THE STANDARD INDEXING ARRAYS.
C
  670 INDX1=LWATQN
      LWATQN=LWATQN-KSL
      INDX2=IIND(JND)+JIND(IND)+KSL
C     COPY OVER KL.
      DO 680 KL=1,KSL
      TQNEW(INDX1)=TQNEW(INDX2)
      INDX1=INDX1-1
  680 INDX2=INDX2-1
  690 CONTINUE
      GO TO 1000
C
C     IN CASE 5 (ISHELL=JSHELL AND KSHELL=LSHELL), IT IS NECESSARY
C     TO PROCEED DIFFERENTLY IF KRANGE AND LRANGE EQUAL ONE.
C     IN THIS CASE WE HAVE WHAT AMOUNTS TO A SYMMETRIC
C     MATRIX IN (IJ).  THE DIMENSION IS EITHER 1, 4, 6 OR 10.
C     IN ANY EVENT, WE MERELY PERFORM A LINEAR TO SQUARE CONVERSION.
C     IF IRANGE (AND THEREFORE JRANGE) IS ALSO 1, SKIP THE EXPANSION.
C
C     THE LWA IN TQ IS CLEARLY SPECIFIED BY INTC.   (INDX2)
C     THE LWA IN TQNEW IS LENTQ.   (INDX1)
C
  710 IF(IRANGE.EQ.1)GO TO 1000
      INDX1=LENTQ
      INDX2=INTC
      IRP1=IRANGE+1
      IRM1=IRANGE-1
C     ARRANGE THE NTT EXISTING ELEMENTS.
      DO 730 I=1,IRANGE
      JLIM=IRP1-I
      DO 720 J=1,JLIM
      TQNEW(INDX1)=TQ(INDX2)
      INDX2=INDX2-1
  720 INDX1=INDX1-1
  730 INDX1=INDX1-I
C     EXPAND OVER (IJ).
C     THE FWA IS ASSUMED TO BE 1.
      INDX1=2
      INDX2=IRP1
      DO 750 I=1,IRM1
      INDS1=INDX1
      INDS2=INDX2
      IRMI=IRANGE-I
      DO 740 J=1,IRMI
      TQNEW(INDX1)=TQNEW(INDX2)
      INDX1=INDX1+1
  740 INDX2=INDX2+JRANGE
      INDX1=INDS1+IRP1
  750 INDX2=INDS2+IRP1
      GO TO 1000
C
C     ******************************************************************
C     CASE 6, ALL SHELL INDICES ARE EQUAL.
C     ******************************************************************
C
C     THE TECHNIQUES OF CASE 4 ARE EMPLOYED.
C     THIS CASE INVOLVES THE MOST OVERHEAD, BUT IS THE LEAST FRE-
C     QUENTLY EXECUTED PART (LESS THAN OR EQUAL TO NSHELL TIMES
C     PER INTEGRAL EVALUATION).
C
    6 INDX1=LENTQ
      INDX2=INTC+1
      IND=IEND+1
      DO 890 I=ISTART,IEND
      IND=IND-1
      JND=JEND+1
      DO 890 J=JSTART,JEND
      JND=JND-1
      KND=KEND+1
      DO 890 K=KSTART,KEND
      KND=KND-1
      LND=LEND+1
      DO 890 L=LSTART,LEND
      LND=LND-1
C     NOW HAVE ALL FOUR INDICES (IND,JND,KND,LND).
C     IFLAG IS FOR DETERMINING WHERE TO PULL THE NEXT INTEGRAL FROM.
C     IFLAG=0, INTEGRAL COMES FROM TQNEW.
C     IFLAG=1, INTEGRAL COMES FROM TQ.
C     INDX2 STEPS BACKWARDS THROUGH TQ.  IT IS DECREMENTED ONLY WHEN
C     AN INTEGRAL IS ACTUALLY COPIED.
C     INDX1 STEPS INPUT INTO TQNEW.  IT IS ALWAYS DECREMENTED.
C     INDX3 STEPS OUTPUT FROM TQNEW INTO TQNEW.
C     THIS INDEX IS COMPUTED ON DEMAND.
C     NOTE THAT IN THE FOLLOWING, IND, ETC. ARE SORTED.
      IFLAG=1
      INEW=IND
      JNEW=JND
      KNEW=KND
      LNEW=LND
      IF(INEW.GE.JNEW)GO TO 810
C     SWITCH (IJ), AND SET IFLAG.
      ITEMP=INEW
      INEW=JNEW
      JNEW=ITEMP
      IFLAG=0
C     SWITCH (KL) AND SET IFLAG.
  810 IF(KNEW.GE.LNEW)GO TO 830
      ITEMP=KNEW
      KNEW=LNEW
      LNEW=ITEMP
      IFLAG=0
  830 IF(INEW-KNEW)850,840,860
  840 IF(JNEW.GE.LNEW)GO TO 860
C     SWITCH (IJ) AND (KL) AND SET IFLAG.
  850 ITEMP=INEW
      INEW=KNEW
      KNEW=ITEMP
      ITEMP=JNEW
      JNEW=LNEW
      LNEW=ITEMP
      GO TO 880
  860 IF(IFLAG.EQ.0)GO TO 880
C     COPY FROM TQ TO TQNEW.
      INDX2=INDX2-1
      TQNEW(INDX1)=TQ(INDX2)
      GO TO 890
C     COPY FROM TQNEW TO TQNEW.
  880 INDX3=IIND(INEW)+JIND(JNEW)+KIND(KNEW)+LNEW-LSTM1
      TQNEW(INDX1)=TQ(INDX3)
C     ALWAYS DECREMENT INDX1.
  890 INDX1=INDX1-1
C
C     ******************************************************************
C     TRANSFORMATION SECTION.
C     ******************************************************************
C
C     WE ARE FINALLY READY TO DO, IN A STEPWISE FASHION, THE 6D TO 5D
C     CONVERSION.  AT THIS POINT, IT IS APPROPRIATE TO CLEAN UP THE
C     NOTATION.
C
C     THE LOOP ORDER IS (OUTERMOST) I, J, K, L (INNERMOST).
C
C     THE I-LOOP GOES OVER THE FUNCTIONS AT CENTER A.
C     THE J-LOOP GOES OVER THE FUNCTIONS AT CENTER B.
C     THE K-LOOP GOES OVER THE FUNCTIONS AT CENTER C.
C     THE L-LOOP GOES OVER THE FUNCTIONS AT CENTER D.
C
C     THE TRANSFORMATION TO PURE D-FUNCTIONS IS DONE STEP-WISE,
C     USING THE FOLLOWING TRANSFORMATION MATRIX.
C
C        ( 1  0  0  0  0  0  0  0  0  0 ) ( S    )   ( S           )
C        (                              ) (      )   (             )
C        ( 0  1  0  0  0  0  0  0  0  0 ) ( X    )   ( X           )
C        (                              ) (      )   (             )
C        ( 0  0  1  0  0  0  0  0  0  0 ) ( Y    )   ( Y           )
C        (                              ) (      )   (             )
C        ( 0  0  0  1  0  0  0  0  0  0 ) ( Z    )   ( Z           )
C        (                              ) (      )   (             )
C        ( 0  0  0  0 -H -H  1  0  0  0 ) ( X**2 ) = ( 3*Z**2-R**2 )
C        (                              ) (      )   (             )
C        ( 0  0  0  0  R -R  0  0  0  0 ) ( Y**2 )   ( X**2-Y**2   )
C        (                              ) (      )   (             )
C        ( 0  0  0  0  0  0  0  1  0  0 ) ( Z**2 )   ( XY          )
C        (                              ) (      )   (             )
C        ( 0  0  0  0  0  0  0  0  1  0 ) ( XY   )   ( XZ          )
C        (                              ) (      )   (             )
C        ( 0  0  0  0  0  0  0  0  0  1 ) ( XZ   )   ( YZ          )
C                                         (      )
C                                         ( YZ   )
C
C     WHERE H=0.5, AND R=DSQRT(3.0)/2.0.
C     SINCE THIS TRANSFORMATION IS CLOSE TO AN IDENTITY TRANSFORMATION,
C     ONLY THE REQUIRED STEPS ARE ACTUALLY CARRIED OUT.
C
C     THE TRANSFORMATION MATRIX FOR OBTAINING THE PURE F-FUNCTIONS
C     IS TO COMPLICATED TO DEPICT HERE.
C
C     THE NUMBER OF WORDS IN TQNEW IS EQUAL TO (IRANGE*JRANGE*KRANGE*
C     LRANGE).
C
C     ALL FURTHER OPERATIONS TAKE PLACE ENTIRELY IN TQNEW.
C     THE CURRENT ORDER OF FUNCTIONS IS
C
C         1,2,3,4,5,   6,   7,   8, 9, 10
C        (S,X,Y,Z,X**2,Y**2,Z**2,XY,XZ,YZ)
C
C     INITIALIZATION SECTION.
C
C     ACCUMULATE ALL INCREMENTS FOR POSSIBLE D-TRANSFORMATION AT
C     ALL 4 CENTERS.
C
C     SET PURE END-POINTS AND PURE RANGES.
 1000 IENDP=IEND
      IF(IPURE.NE.0)IENDP=ULPURE(LAMAX)
      JENDP=JEND
      IF(JPURE.NE.0)JENDP=ULPURE(LBMAX)
      KENDP=KEND
      IF(KPURE.NE.0)KENDP=ULPURE(LCMAX)
      LENDP=LEND
      IF(LPURE.NE.0)LENDP=ULPURE(LDMAX)
      IRNGP=IENDP-ISTM1
      JRNGP=JENDP-JSTM1
      KRNGP=KENDP-KSTM1
      LRNGP=LENDP-LSTM1
      KLRP=KRNGP*LRNGP
      IF(ITRFLG.EQ.0)GO TO 1500
C
C     SET END-POINTS FOR COMBINED LOOPS.
      LIMIJ=IRANGE*JRANGE
      LIMIJK=LIMIJ*KRANGE
      LR2=LR1+LR1
      LR3=LR2+LR1
      LR4=LR3+LR1
      LR5=LR4+LR1
      KLR2=KLR1+KLR1
      KLR3=KLR2+KLR1
      KLR4=KLR3+KLR1
      KLR5=KLR4+KLR1
      JKLR2=JKLR1+JKLR1
      JKLR3=JKLR2+JKLR1
      JKLR4=JKLR3+JKLR1
      JKLR5=JKLR4+JKLR1
C
C     DETERMINE TRANSFORMATION MODE AT CENTER D.
      IF(LPURE)1100,1200,1150
C
C     PERFORM 6D TO 5D TRANSFORM AT CENTER D.
C     THE STARTING ADDRESS IS SPECIFIED BY 5-LSTART+1 BECAUSE THE FIRST
C     D-FUNCTION IS NR. 5 (X**2).
C     THE INDEX IS STEPPED BY LRANGE TO GET TO THE NEXT SET.
C     THIS TRANSFORMATION IS EXECUTED (IRANGE*JRANGE*KRANGE) TIMES.
C
 1100 INDX=5-LSTM1
C
      DO 1110 IJK=1,LIMIJK
C
C     ONE TRIPLE (IJK) HAS BEEN SPECIFIED, DO TRANSFORMATION AT D.
C     PICK UP THE SQUARED FUNCTIONS.
      DX2=TQNEW(INDX  )
      DY2=TQNEW(INDX+1)
      DZ2=TQNEW(INDX+2)
C
C     COMPUTE TRANSFORMED FUNCTIONS AND FILL INTO TQNEW.
      TQNEW(INDX  )=DZ2-PT5*(DX2+DY2)
      TQNEW(INDX+1)=TQNEW(INDX+4)
      TQNEW(INDX+2)=TQNEW(INDX+5)
      TQNEW(INDX+4)=TQNEW(INDX+3)
      TQNEW(INDX+3)=R3OV2*(DX2-DY2)
C
 1110 INDX=INDX+LRANGE
C
C     BRANCH TO TEST FOR NEXT CENTER.
      GO TO 1200
C
C     PERFORM 10F TO 7F TRANSFORMATION AT CENTER D.
C
C     HERE WE HAVE ONLY THE POSSIBILITY OF PURE F, INDX STARTS AT 1.
C     INDX IS INCREMENTED BY LRANGE.
 1150 INDX=1
C
      DO 1170 IJK=1,LIMIJK
C
C     ONE TRIPLE (IJK) HAS BEEN SPECIFIED, DO F-TRANSFORMATION AT D.
C     PICK FUNCTIONS AT D.
      FX3 =TQNEW(INDX  )
      FY3 =TQNEW(INDX+1)
      FZ3 =TQNEW(INDX+2)
      FXY2=TQNEW(INDX+3)
      FX2Y=TQNEW(INDX+4)
      FX2Z=TQNEW(INDX+5)
      FXZ2=TQNEW(INDX+6)
      FYZ2=TQNEW(INDX+7)
      FY2Z=TQNEW(INDX+8)
C
C     PERFORM TRANSFORMATION AND FILL INTO TQNEW.
      TQNEW(INDX  )=FZ3-R2*(FX2Z+FY2Z)
      TQNEW(INDX+1)=R4*(Z1*FXZ2-FX3-Z2*FXY2)
      TQNEW(INDX+2)=R4*(Z1*FYZ2-FY3-Z2*FX2Y)
      TQNEW(INDX+3)=R3*(FX2Z-FY2Z)
      TQNEW(INDX+4)=TQNEW(INDX+9)
      TQNEW(INDX+5)=R1*(FX3-Z3*FXY2)
      TQNEW(INDX+6)=R1*(Z3*FX2Y-FY3)
C
 1170 INDX=INDX+LRANGE
C
C     TEST FOR POSSIBLE D OR F TRANSFORMATION AT CENTER C.
 1200 IF(KPURE)1210,1300,1250
C
C     PERFORM D-TRANSFORMATION AT CENTER C.
C
C     LOOP OVER ALL PAIRS (IJ), AND THEN STEP OVER ALL L.
C     INDX STARTS AT (5-KSTART)*LRANGE+1 TO STEP PAST POSSIBLE NON-D
C     FUNCTIONS AT C.
C     INDX IS MAINTAINED IN INDS, WHICH IS INCREMENTED BY KSL.
 1210 INDS=(5-KSTART)*LRANGE+1
C
C     COMMENCE LOOP OVER ALL PAIRS.
      DO 1230 IJ=1,LIMIJ
C
C     A PAIR (IJ) HAS BEEN SPECIFIED, PERFORM LOOP OVER FUNCTIONS AT D.
      INDX=INDS
      DO 1220 L=1,LRNGP
C
C     PICK UP SQUARED FUNCTIONS.
      DX2=TQNEW(INDX    )
      DY2=TQNEW(INDX+LR1)
      DZ2=TQNEW(INDX+LR2)
C
C     COMPUTE PURE D-FUNCTIONS AND FILL INTO TQNEW.
      TQNEW(INDX    )=DZ2-PT5*(DX2+DY2)
      TQNEW(INDX+LR1)=TQNEW(INDX+LR4)
      TQNEW(INDX+LR2)=TQNEW(INDX+LR5)
      TQNEW(INDX+LR4)=TQNEW(INDX+LR3)
      TQNEW(INDX+LR3)=R3OV2*(DX2-DY2)
C
 1220 INDX=INDX+1
 1230 INDS=INDS+KSL
C
C     GO TO TEST FOR CENTER B.
      GO TO 1300
C
C     PERFORM 10F TO 7F TRANSFORMATION AT CENTER C.
C     ACCUMULATE ADDITIONAL INCREMENTS.
 1250 LR6=LR5+LR1
      LR7=LR6+LR1
      LR8=LR7+LR1
      LR9=LR8+LR1
C
C     SET INITIAL INDEX.
      INDS=1
C
C     COMMENCE LOOP OVER ALL (IJ)-PAIRS.
      DO 1270 IJ=1,LIMIJ
C     SET RUNNING INDEX.
      INDX=INDS
C     LOOP OVER POSSIBLE FUNCTIONS AT D.
      DO 1260 L=1,LRNGP
C     PICK UP THIRD-ORDER INTEGRALS.
      FX3 =TQNEW(INDX    )
      FY3 =TQNEW(INDX+LR1)
      FZ3 =TQNEW(INDX+LR2)
      FXY2=TQNEW(INDX+LR3)
      FX2Y=TQNEW(INDX+LR4)
      FX2Z=TQNEW(INDX+LR5)
      FXZ2=TQNEW(INDX+LR6)
      FYZ2=TQNEW(INDX+LR7)
      FY2Z=TQNEW(INDX+LR8)
C
C     COMPUTE PURE-F INTEGRALS AND FILL INTO TQNEW.
      TQNEW(INDX    )=FZ3-R2*(FX2Z+FY2Z)
      TQNEW(INDX+LR1)=R4*(Z1*FXZ2-FX3-Z2*FXY2)
      TQNEW(INDX+LR2)=R4*(Z1*FYZ2-FY3-Z2*FX2Y)
      TQNEW(INDX+LR3)=R3*(FX2Z-FY2Z)
      TQNEW(INDX+LR4)=TQNEW(INDX+LR9)
      TQNEW(INDX+LR5)=R1*(FX3-Z3*FXY2)
      TQNEW(INDX+LR6)=R1*(Z3*FX2Y-FY3)
C
 1260 INDX=INDX+1
 1270 INDS=INDS+KSL
C
C     TEST FOR POSSIBLE TRANSFORMATION AT CENTER B.
 1300 IF(JPURE)1310,1400,1350
C
C     PERFORM 6D TO 5D TRANSFORMATION AT CENTER B.
C
C     FOR EACH VALUE OF I, LOOP OVER ALL VALUES AT C AND D.
C     INDS STARTS AT (5-JSTART)*KSL+1 TO STEP PAST POSSIBLE NON-D
C     FUNCTIONS AT B.
C
 1310 INDIS=(5-JSTART)*KSL+1
C
C     COMMENCE LOOP OVER POSSIBLE VALUES OF I.
      DO 1340 I=1,IRANGE
      INDKS=INDIS
C
C     LOOP OVER ALL K AND L VALUES, PERFORMING TRANSFORMATION.
      DO 1330 K=1,KRNGP
      INDX=INDKS
      DO 1320 L=1,LRNGP
C
C     PICK UP SQUARED FUNCTIONS.
      DX2=TQNEW(INDX     )
      DY2=TQNEW(INDX+KLR1)
      DZ2=TQNEW(INDX+KLR2)
C
C     COMPUTE TRANSFORMED FUNCTIONS AND FILL INTO TQNEW.
      TQNEW(INDX     )=DZ2-PT5*(DX2+DY2)
      TQNEW(INDX+KLR1)=TQNEW(INDX+KLR4)
      TQNEW(INDX+KLR2)=TQNEW(INDX+KLR5)
      TQNEW(INDX+KLR4)=TQNEW(INDX+KLR3)
      TQNEW(INDX+KLR3)=R3OV2*(DX2-DY2)
C
 1320 INDX=INDX+1
 1330 INDKS=INDKS+LRANGE
 1340 INDIS=INDIS+JSKSL
C
C     GO TO TEST FOR TRANSFORMATION AT CENTER A.
      GO TO 1400
C
C     PERFORM F-TRANSFORMATION AT CENTER B.
C
C     OBTAIN ADDITIONAL INCREMENTS.
 1350 KLR6=KLR5+KLR1
      KLR7=KLR6+KLR1
      KLR8=KLR7+KLR1
      KLR9=KLR8+KLR1
C
C     LOOP OVER ALL VALUES OF I.  NOTE THAT THE STARTING
C     INDEX IS ONE (IF WE ARE HERE, THIS MUST BE PUREF).
C
      INDIS=1
      DO 1380 I=1,IRANGE
      INDKS=INDIS
      DO 1370 K=1,KRNGP
      INDX=INDKS
      DO 1360 L=1,LRNGP
C
C     PICK UP FUNCTIONS.
      FX3 =TQNEW(INDX     )
      FY3 =TQNEW(INDX+KLR1)
      FZ3 =TQNEW(INDX+KLR2)
      FXY2=TQNEW(INDX+KLR3)
      FX2Y=TQNEW(INDX+KLR4)
      FX2Z=TQNEW(INDX+KLR5)
      FXZ2=TQNEW(INDX+KLR6)
      FYZ2=TQNEW(INDX+KLR7)
      FY2Z=TQNEW(INDX+KLR8)
C
C     PERFORM TRANSFORMATION TO PURE F-FUNCTIONS AND FILL INTO TQNEW.
      TQNEW(INDX     )=FZ3-R2*(FX2Z+FY2Z)
      TQNEW(INDX+KLR1)=R4*(Z1*FXZ2-FX3-Z2*FXY2)
      TQNEW(INDX+KLR2)=R4*(Z1*FYZ2-FY3-Z2*FX2Y)
      TQNEW(INDX+KLR3)=R3*(FX2Z-FY2Z)
      TQNEW(INDX+KLR4)=TQNEW(INDX+KLR9)
      TQNEW(INDX+KLR5)=R1*(FX3-Z3*FXY2)
      TQNEW(INDX+KLR6)=R1*(Z3*FX2Y-FY3)
C
 1360 INDX=INDX+1
 1370 INDKS=INDKS+LRANGE
 1380 INDIS=INDIS+JSKSL
C
C     TEST FOR POSSIBLE TRANSFORMATION AT CENTER A.
 1400 IF(IPURE)1410,1500,1450
C
C     PERFORM D-TRANSFORMATION AT CENTER A.
C     LOOP OVER ALL VALUES OF JKL.  THE STARTING INDEX
C     MUST BE SET TO STEP PAST POSSIBLE NON-D FUNCTIONS AT A.
 1410 INDJS=(5-ISTART)*JSKSL+1
C
C     LOOP OVER ALL INTEGRALS AT B, C, AND D.
      DO 1440 J=1,JRNGP
      INDKS=INDJS
      DO 1430 K=1,KRNGP
      INDX=INDKS
      DO 1420 L=1,LRNGP
C
C     PICK UP SQUARED FUNCTIONS.
      DX2=TQNEW(INDX      )
      DY2=TQNEW(INDX+JKLR1)
      DZ2=TQNEW(INDX+JKLR2)
C
C     PERFORM TRANSFORMATION AND FILL INTO TQNEW.
      TQNEW(INDX      )=DZ2-PT5*(DX2+DY2)
      TQNEW(INDX+JKLR1)=TQNEW(INDX+JKLR4)
      TQNEW(INDX+JKLR2)=TQNEW(INDX+JKLR5)
      TQNEW(INDX+JKLR4)=TQNEW(INDX+JKLR3)
      TQNEW(INDX+JKLR3)=R3OV2*(DX2-DY2)
C
 1420 INDX=INDX+1
 1430 INDKS=INDKS+LRANGE
 1440 INDJS=INDJS+KSL
C
C     SKIP PAST F-TRANSFORMATION AT A.
      GO TO 1500
C
C     PERFORM F-TRANSFORMATION AT CENTER A.
C     ACCUMULATE EXTRA INCREMENTS.
 1450 JKLR6=JKLR5+JKLR1
      JKLR7=JKLR6+JKLR1
      JKLR8=JKLR7+JKLR1
      JKLR9=JKLR8+JKLR1
C
C     SET STARTING INDEX.
      INDJS=1
C
C     COMMENCE F-TRANSFORMATION AT CENTER A.
      DO 1480 J=1,JRNGP
      INDKS=INDJS
      DO 1470 K=1,KRNGP
      INDX=INDKS
      DO 1460 L=1,LRNGP
C
C     PICK UP FUNCTIONS.
      FX3 =TQNEW(INDX      )
      FY3 =TQNEW(INDX+JKLR1)
      FZ3 =TQNEW(INDX+JKLR2)
      FXY2=TQNEW(INDX+JKLR3)
      FX2Y=TQNEW(INDX+JKLR4)
      FX2Z=TQNEW(INDX+JKLR5)
      FXZ2=TQNEW(INDX+JKLR6)
      FYZ2=TQNEW(INDX+JKLR7)
      FY2Z=TQNEW(INDX+JKLR8)
C
C     PERFORM F-TRANSFORMATION AND FILL INTO TQNEW.
      TQNEW(INDX      )=FZ3-R2*(FX2Z+FY2Z)
      TQNEW(INDX+JKLR1)=R4*(Z1*FXZ2-FX3-Z2*FXY2)
      TQNEW(INDX+JKLR2)=R4*(Z1*FYZ2-FY3-Z2*FX2Y)
      TQNEW(INDX+JKLR3)=R3*(FX2Z-FY2Z)
      TQNEW(INDX+JKLR4)=TQNEW(INDX+JKLR9)
      TQNEW(INDX+JKLR5)=R1*(FX3-Z3*FXY2)
      TQNEW(INDX+JKLR6)=R1*(Z3*FX2Y-FY3)
C
 1460 INDX=INDX+1
 1470 INDKS=INDKS+LRANGE
 1480 INDJS=INDJS+KSL
C
C     TRANSFORMATION AT ALL FOUR CENTERS IS NOW COMPLETE.
C     THE LAST STEP IS TO COMPRESS THE INTEGRAL ARRAY AND ZERO
C     THE SHELL DUPLICATES.
C     CLEAR THE OUTPUT ARRAY.
 1500 INTCP=IRNGP*JRNGP*KRNGP*LRNGP
C     RETURN WITH INTEGRALS IF NO TRANSFORMATION AND NO DUPLICATES.
      IF(ITRFLG.EQ.0.AND.IMJ*KML*IMKJML.NE.0)RETURN
      DO 1510 I=1,INTCP
 1510 TQOUT(I)=ZERO
C     COMPUTE INDICES (IN IINEW...LLNEW) BASED ON THE PURE RANGES.
      JKLRP=JRNGP*KLRP
      ITEMP=0
      DO 1520 I=ISTART,IENDP
      IINEW(I)=ITEMP
 1520 ITEMP=ITEMP+JKLRP
      JTEMP=0
      DO 1530 J=JSTART,JENDP
      JJNEW(J)=JTEMP
 1530 JTEMP=JTEMP+KLRP
      KTEMP=0
      DO 1540 K=KSTART,KENDP
      KKNEW(K)=KTEMP
 1540 KTEMP=KTEMP+LRNGP
      JLIM=JENDP
      KLIM=KENDP
      DO 1600 I=ISTART,IENDP
      ITEMP=IIND(I)-LSTM1
      INEW=IINEW(I)-LSTM1
      IF(IMJ.EQ.0)JLIM=I
      IF(IMKJML.EQ.0)KLIM=I
      DO 1600 J=JSTART,JLIM
      JTEMP=ITEMP+JIND(J)
      JNEW=INEW+JJNEW(J)
      DO 1600 K=KSTART,KLIM
      KTEMP=JTEMP+KIND(K)
      KNEW=JNEW+KKNEW(K)
      LLIM=LENDP
      IF(KML.EQ.0)LLIM=K
      IF(IMKJML+IABS(I-K).EQ.0)LLIM=J
      DO 1600 L=LSTART,LLIM
 1600 TQOUT(KNEW+L)=TQNEW(KTEMP+L)
C
C     UPDATE IEND, ETC. IN /SHLCOM/ AND /LIMIT2/.
      IEND=IENDP
      JEND=JENDP
      KEND=KENDP
      LEND=LENDP
      IRANGE=IRNGP
      JRANGE=JRNGP
      KRANGE=KRNGP
      LRANGE=LRNGP
C
C     COPY INTEGRALS BACK TO INPUT ARRAY (TQ).
      DO 1710 I=1,INTCP
 1710 TQ(I)=TQOUT(I)
      RETURN
      END
      SUBROUTINE QINF
C
C     --------------
C     GAUSSIAN 82
C     U OF T VERSION
C     FEBRUARY 1987
C     --------------
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C#
C     PARAMETER (NS=#NS, NP=#NP)
C##
      PARAMETER (NS=120, NP=300)
C###
      INTEGER SHELLA,SHELLN,SHELLT,SHELLC,AOS
C
C***********************************************************************
C     ROUTINE TO PERFORM PRELIMINARY Q-LOOP.  HERE, ALL
C     POSSIBLE Q-LOOP VARIABLES THAT REQUIRE COMPUTING, THAT ARE
C     INDEPENDENT OF P-LOOP RESULTS, ARE OBTAINED AND STORED INTO COMMON
C     QINFO.
C***********************************************************************
C
C     SUBROUTINE TO PERFORM PRELIMINARY Q-LOOP.
C
      COMMON/B/IXYZ(NS),SHELLA(NS),SHELLN(NS),SHELLT(NS),
     1 SHELLC(NS),AOS(NS),NSHELL,MAXTYP,EXX(NP),C1(NP),C2(NP)
      COMMON/GCLOOP/IGAUSS,IGBEG,IGEND,IGDF,JGAUSS,JGBEG,JGEND,JGDF,
     $              KGAUSS,KGBEG,KGEND,KGDF,LGAUSS,LGBEG,LGEND,LGDF
      COMMON/LIMIT2/ITYPE,JTYPE,KTYPE,LTYPE,
     1              IMJ,IMK,JML,KML,IMKJML,ISTART,JSTART,KSTART,LSTART,
     2              IEND,JEND,KEND,LEND,LENTQ,
     3              R3OV2,ROOT3,ROOT5,ROOT15,R1,R2,R4,Z1,Z2,Z3
      COMMON/QINFO/XA,YA,ZA,XB,YB,ZB,RABSQ,XC,YC,ZC,XD,YD,ZD,RCDSQ,
     1             PQCUT1,PQCUT2,PQCUT3,
     2             EQSAV(100),QXSAV(100),QYSAV(100),QZSAV(100),
     3             QXPSAV(100),EXPARG,PTEST,PEXP,EP,
     4             KLIND,KLCUTQ(100)
C
      EQUIVALENCE (PTEST,QTEST), (PEXP,QEXP)
C
      DATA ZERO/0.0D0/, ONE/1.0D0/
C
      KLIND=0
      DO 160 KGAUSS=KGBEG,KGEND
      CS=EXX(KGAUSS)
C     DETERMINE THE MAXIMUM COEFFICIENT AT K.
      CMAXK=DABS(C1(KGAUSS))
      IF(KTYPE.NE.1)GO TO 40
      ABSC=DABS(C2(KGAUSS))
      CMAXK=DMAX1(CMAXK,ABSC)
C
   40 DO 160 LGAUSS=LGBEG,LGEND
      DS=EXX(LGAUSS)
C     DETERMINE THE MAXIMUM COEFFICIENT AT L.
      CMAXL=DABS(C1(LGAUSS))
      IF(LTYPE.NE.1)GO TO 80
      ABSC=DABS(C2(LGAUSS))
      CMAXL=DMAX1(CMAXL,ABSC)
C
   80 KLIND=KLIND+1
C     COMPUTE SAVED QUANTITIES.
      EQ=CS+DS
      EQI=ONE/EQ
      EQSAV(KLIND)=EQ
      QXSAV(KLIND)=(CS*XC+DS*XD)*EQI
      QYSAV(KLIND)=(CS*YC+DS*YD)*EQI
      QZSAV(KLIND)=(CS*ZC+DS*ZD)*EQI
      EXPARG=CS*DS*RCDSQ*EQI
      IF(EXPARG-PQCUT3)110,110,100
  100 QXPSAV(KLIND)=ZERO
      KLCUTQ(KLIND)=2
      GO TO 160
  110 QEXP=DEXP(-EXPARG)
      QXPSAV(KLIND)=QEXP
      QTEST=CMAXK*CMAXL*QEXP
      IF(QTEST-PQCUT1)130,120,120
  120 KLCUTQ(KLIND)=0
      GO TO 160
  130 IF(QTEST-PQCUT2)140,150,150
  140 KLCUTQ(KLIND)=2
      GO TO 160
  150 KLCUTQ(KLIND)=1
  160 CONTINUE
C
      RETURN
      END
      SUBROUTINE TWOD2C
C
C     ******************************************************************
C     ROUTINE TO COMPUTE UP TO 49 TWO-DIMENSIONAL TWO-CENTER
C     INTEGRALS FOR X, Y, OR Z.  THIS ROUTINE COMBINES THE G'S WITH
C     THE A'S.
C     ALL ZEROES HAVE BEEN SUPPRESSED, AND MULTIPLIES BY ONE OMITTED.
C     THIS ROUTINE WAS GENERATED BY PWRITE IN THE SPRING OF '76.
C     ******************************************************************
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      COMMON/I2ECOM/LAMAX,LBMAX,LCMAX,LDMAX,LPMAX,LQMAX,LPQMAX,L2EFLL,
     1 EQ,EP2I,RHOT2,G(13),VALI2P(49),VALI3P(112),A(174)
C*
      GO TO(101,102,103,104,105,106,107),LPMAX
  107 GO TO(43,44,45,46,47,48,49),LQMAX
   49 VALI2P(49)=A(168)*G(1)+A(169)*G(3)+A(170)*G(5)+A(171)*G(7)+A(172)*
     $G(9)+A(173)*G(11)+A(174)*G(13)
   48 VALI2P(48)=A(162)*G(2)+A(163)*G(4)+A(164)*G(6)+A(165)*G(8)+A(166)*
     $G(10)+A(167)*G(12)
   47 VALI2P(47)=A(156)*G(1)+A(157)*G(3)+A(158)*G(5)+A(159)*G(7)+A(160)*
     $G(9)+A(161)*G(11)
   46 VALI2P(46)=A(151)*G(2)+A(152)*G(4)+A(153)*G(6)+A(154)*G(8)+A(155)*
     $G(10)
   45 VALI2P(45)=A(146)*G(1)+A(147)*G(3)+A(148)*G(5)+A(149)*G(7)+A(150)*
     $G(9)
   44 VALI2P(44)=A(142)*G(2)+A(143)*G(4)+A(144)*G(6)+A(145)*G(8)
   43 VALI2P(43)=A(138)*G(1)+A(139)*G(3)+A(140)*G(5)+A(141)*G(7)
  106 GO TO(36,37,38,39,40,41,42),LQMAX
   42 VALI2P(42)=A(132)*G(2)+A(133)*G(4)+A(134)*G(6)+A(135)*G(8)+A(136)*
     $G(10)+A(137)*G(12)
   41 VALI2P(41)=A(127)*G(3)+A(128)*G(5)+A(129)*G(7)+A(130)*G(9)+A(131)*
     $G(11)
   40 VALI2P(40)=A(122)*G(2)+A(123)*G(4)+A(124)*G(6)+A(125)*G(8)+A(126)*
     $G(10)
   39 VALI2P(39)=A(118)*G(3)+A(119)*G(5)+A(120)*G(7)+A(121)*G(9)
   38 VALI2P(38)=A(114)*G(2)+A(115)*G(4)+A(116)*G(6)+A(117)*G(8)
   37 VALI2P(37)=A(111)*G(3)+A(112)*G(5)+A(113)*G(7)
   36 VALI2P(36)=A(108)*G(2)+A(109)*G(4)+A(110)*G(6)
  105 GO TO(29,30,31,32,33,34,35),LQMAX
   35 VALI2P(35)=A(102)*G(1)+A(103)*G(3)+A(104)*G(5)+A(105)*G(7)+A(106)*
     $G(9)+A(107)*G(11)
   34 VALI2P(34)=A(97)*G(2)+A(98)*G(4)+A(99)*G(6)+A(100)*G(8)+A(101)*G(1
     $0)
   33 VALI2P(33)=A(92)*G(1)+A(93)*G(3)+A(94)*G(5)+A(95)*G(7)+A(96)*G(9)
   32 VALI2P(32)=A(88)*G(2)+A(89)*G(4)+A(90)*G(6)+A(91)*G(8)
   31 VALI2P(31)=A(84)*G(1)+A(85)*G(3)+A(86)*G(5)+A(87)*G(7)
   30 VALI2P(30)=A(81)*G(2)+A(82)*G(4)+A(83)*G(6)
   29 VALI2P(29)=A(78)*G(1)+A(79)*G(3)+A(80)*G(5)
  104 GO TO(22,23,24,25,26,27,28),LQMAX
   28 VALI2P(28)=A(73)*G(2)+A(74)*G(4)+A(75)*G(6)+A(76)*G(8)+A(77)*G(10)
   27 VALI2P(27)=A(69)*G(3)+A(70)*G(5)+A(71)*G(7)+A(72)*G(9)
   26 VALI2P(26)=A(65)*G(2)+A(66)*G(4)+A(67)*G(6)+A(68)*G(8)
   25 VALI2P(25)=A(62)*G(3)+A(63)*G(5)+A(64)*G(7)
   24 VALI2P(24)=A(59)*G(2)+A(60)*G(4)+A(61)*G(6)
   23 VALI2P(23)=A(57)*G(3)+A(58)*G(5)
   22 VALI2P(22)=A(55)*G(2)+A(56)*G(4)
  103 GO TO(15,16,17,18,19,20,21),LQMAX
   21 VALI2P(21)=A(50)*G(1)+A(51)*G(3)+A(52)*G(5)+A(53)*G(7)+A(54)*G(9)
   20 VALI2P(20)=A(46)*G(2)+A(47)*G(4)+A(48)*G(6)+A(49)*G(8)
   19 VALI2P(19)=A(42)*G(1)+A(43)*G(3)+A(44)*G(5)+A(45)*G(7)
   18 VALI2P(18)=A(39)*G(2)+A(40)*G(4)+A(41)*G(6)
   17 VALI2P(17)=A(36)*G(1)+A(37)*G(3)+A(38)*G(5)
   16 VALI2P(16)=A(34)*G(2)+A(35)*G(4)
   15 VALI2P(15)=A(32)*G(1)+A(33)*G(3)
  102 GO TO(8,9,10,11,12,13,14),LQMAX
   14 VALI2P(14)=A(28)*G(2)+A(29)*G(4)+A(30)*G(6)+A(31)*G(8)
   13 VALI2P(13)=A(25)*G(3)+A(26)*G(5)+A(27)*G(7)
   12 VALI2P(12)=A(22)*G(2)+A(23)*G(4)+A(24)*G(6)
   11 VALI2P(11)=A(20)*G(3)+A(21)*G(5)
   10 VALI2P(10)=A(18)*G(2)+A(19)*G(4)
    9 VALI2P(9)=A(17)*G(3)
    8 VALI2P(8)=A(16)*G(2)
  101 GO TO(1,2,3,4,5,6,7),LQMAX
    7 VALI2P(7)=A(12)*G(1)+A(13)*G(3)+A(14)*G(5)+A(15)*G(7)
    6 VALI2P(6)=A(9)*G(2)+A(10)*G(4)+A(11)*G(6)
    5 VALI2P(5)=A(6)*G(1)+A(7)*G(3)+A(8)*G(5)
    4 VALI2P(4)=A(4)*G(2)+A(5)*G(4)
    3 VALI2P(3)=A(2)*G(1)+A(3)*G(3)
    2 VALI2P(2)=A(1)*G(2)
    1 VALI2P(1)=G(1)
      RETURN
      END
      SUBROUTINE TWOD3C(CCQ)
C
C     ******************************************************************
C     ROUTINE TO SPLIT TWO-DIMENSIONAL TWO-CENTER INTEGRALS IN VALI2P
C     INTO UP TO 112 TWO-DIMENSIONAL THREE-CENTER INTEGRALS IN VALI3P
C     USING CCQ.
C     ALL ZEROES HAVE BEEN SUPPRESSED, AND MULTIPLIES BY ONE OMITTED.
C     THIS ROUTINE WAS GENERATED BY PWRITE IN THE SPRING OF '76.
C     ******************************************************************
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      COMMON/I2ECOM/LAMAX,LBMAX,LCMAX,LDMAX,LPMAX,LQMAX,LPQMAX,L2EFLL,
     1 EQ,EP2I,RHOT2,G(13),VALI2P(49),VALI3P(112),A(174)
C
      DIMENSION CCQ(48)
C*
      GO TO(1001,1002,1003,1004,1005,1006,1007),LPMAX
 1007 GO TO(2071,2072,2073,2074),LCMAX
 2074 GO TO(109,110,111,112),LDMAX
  112 VALI3P(112)=CCQ(43)*VALI2P(43)+CCQ(44)*VALI2P(44)+CCQ(45)*VALI2P(4
     $5)+CCQ(46)*VALI2P(46)+CCQ(47)*VALI2P(47)+CCQ(48)*VALI2P(48)+VALI2P
     $(49)
  111 VALI3P(111)=CCQ(38)*VALI2P(43)+CCQ(39)*VALI2P(44)+CCQ(40)*VALI2P(4
     $5)+CCQ(41)*VALI2P(46)+CCQ(42)*VALI2P(47)+VALI2P(48)
  110 VALI3P(110)=CCQ(34)*VALI2P(43)+CCQ(35)*VALI2P(44)+CCQ(36)*VALI2P(4
     $5)+CCQ(37)*VALI2P(46)+VALI2P(47)
  109 VALI3P(109)=CCQ(31)*VALI2P(43)+CCQ(32)*VALI2P(44)+CCQ(33)*VALI2P(4
     $5)+VALI2P(46)
 2073 GO TO(105,106,107,108),LDMAX
  108 VALI3P(108)=CCQ(26)*VALI2P(43)+CCQ(27)*VALI2P(44)+CCQ(28)*VALI2P(4
     $5)+CCQ(29)*VALI2P(46)+CCQ(30)*VALI2P(47)+VALI2P(48)
  107 VALI3P(107)=CCQ(22)*VALI2P(43)+CCQ(23)*VALI2P(44)+CCQ(24)*VALI2P(4
     $5)+CCQ(25)*VALI2P(46)+VALI2P(47)
  106 VALI3P(106)=CCQ(19)*VALI2P(43)+CCQ(20)*VALI2P(44)+CCQ(21)*VALI2P(4
     $5)+VALI2P(46)
  105 VALI3P(105)=CCQ(17)*VALI2P(43)+CCQ(18)*VALI2P(44)+VALI2P(45)
 2072 GO TO(101,102,103,104),LDMAX
  104 VALI3P(104)=CCQ(13)*VALI2P(43)+CCQ(14)*VALI2P(44)+CCQ(15)*VALI2P(4
     $5)+CCQ(16)*VALI2P(46)+VALI2P(47)
  103 VALI3P(103)=CCQ(10)*VALI2P(43)+CCQ(11)*VALI2P(44)+CCQ(12)*VALI2P(4
     $5)+VALI2P(46)
  102 VALI3P(102)=CCQ(8)*VALI2P(43)+CCQ(9)*VALI2P(44)+VALI2P(45)
  101 VALI3P(101)=CCQ(7)*VALI2P(43)+VALI2P(44)
 2071 GO TO(97,98,99,100),LDMAX
  100 VALI3P(100)=CCQ(4)*VALI2P(43)+CCQ(5)*VALI2P(44)+CCQ(6)*VALI2P(45)+
     $VALI2P(46)
   99 VALI3P(99)=CCQ(2)*VALI2P(43)+CCQ(3)*VALI2P(44)+VALI2P(45)
   98 VALI3P(98)=CCQ(1)*VALI2P(43)+VALI2P(44)
   97 VALI3P(97)=VALI2P(43)
 1006 GO TO(2061,2062,2063,2064),LCMAX
 2064 GO TO(93,94,95,96),LDMAX
   96 VALI3P(96)=CCQ(43)*VALI2P(36)+CCQ(44)*VALI2P(37)+CCQ(45)*VALI2P(38
     $)+CCQ(46)*VALI2P(39)+CCQ(47)*VALI2P(40)+CCQ(48)*VALI2P(41)+VALI2P(
     $42)
   95 VALI3P(95)=CCQ(38)*VALI2P(36)+CCQ(39)*VALI2P(37)+CCQ(40)*VALI2P(38
     $)+CCQ(41)*VALI2P(39)+CCQ(42)*VALI2P(40)+VALI2P(41)
   94 VALI3P(94)=CCQ(34)*VALI2P(36)+CCQ(35)*VALI2P(37)+CCQ(36)*VALI2P(38
     $)+CCQ(37)*VALI2P(39)+VALI2P(40)
   93 VALI3P(93)=CCQ(31)*VALI2P(36)+CCQ(32)*VALI2P(37)+CCQ(33)*VALI2P(38
     $)+VALI2P(39)
 2063 GO TO(89,90,91,92),LDMAX
   92 VALI3P(92)=CCQ(26)*VALI2P(36)+CCQ(27)*VALI2P(37)+CCQ(28)*VALI2P(38
     $)+CCQ(29)*VALI2P(39)+CCQ(30)*VALI2P(40)+VALI2P(41)
   91 VALI3P(91)=CCQ(22)*VALI2P(36)+CCQ(23)*VALI2P(37)+CCQ(24)*VALI2P(38
     $)+CCQ(25)*VALI2P(39)+VALI2P(40)
   90 VALI3P(90)=CCQ(19)*VALI2P(36)+CCQ(20)*VALI2P(37)+CCQ(21)*VALI2P(38
     $)+VALI2P(39)
   89 VALI3P(89)=CCQ(17)*VALI2P(36)+CCQ(18)*VALI2P(37)+VALI2P(38)
 2062 GO TO(85,86,87,88),LDMAX
   88 VALI3P(88)=CCQ(13)*VALI2P(36)+CCQ(14)*VALI2P(37)+CCQ(15)*VALI2P(38
     $)+CCQ(16)*VALI2P(39)+VALI2P(40)
   87 VALI3P(87)=CCQ(10)*VALI2P(36)+CCQ(11)*VALI2P(37)+CCQ(12)*VALI2P(38
     $)+VALI2P(39)
   86 VALI3P(86)=CCQ(8)*VALI2P(36)+CCQ(9)*VALI2P(37)+VALI2P(38)
   85 VALI3P(85)=CCQ(7)*VALI2P(36)+VALI2P(37)
 2061 GO TO(81,82,83,84),LDMAX
   84 VALI3P(84)=CCQ(4)*VALI2P(36)+CCQ(5)*VALI2P(37)+CCQ(6)*VALI2P(38)+V
     $ALI2P(39)
   83 VALI3P(83)=CCQ(2)*VALI2P(36)+CCQ(3)*VALI2P(37)+VALI2P(38)
   82 VALI3P(82)=CCQ(1)*VALI2P(36)+VALI2P(37)
   81 VALI3P(81)=VALI2P(36)
 1005 GO TO(2051,2052,2053,2054),LCMAX
 2054 GO TO(77,78,79,80),LDMAX
   80 VALI3P(80)=CCQ(43)*VALI2P(29)+CCQ(44)*VALI2P(30)+CCQ(45)*VALI2P(31
     $)+CCQ(46)*VALI2P(32)+CCQ(47)*VALI2P(33)+CCQ(48)*VALI2P(34)+VALI2P(
     $35)
   79 VALI3P(79)=CCQ(38)*VALI2P(29)+CCQ(39)*VALI2P(30)+CCQ(40)*VALI2P(31
     $)+CCQ(41)*VALI2P(32)+CCQ(42)*VALI2P(33)+VALI2P(34)
   78 VALI3P(78)=CCQ(34)*VALI2P(29)+CCQ(35)*VALI2P(30)+CCQ(36)*VALI2P(31
     $)+CCQ(37)*VALI2P(32)+VALI2P(33)
   77 VALI3P(77)=CCQ(31)*VALI2P(29)+CCQ(32)*VALI2P(30)+CCQ(33)*VALI2P(31
     $)+VALI2P(32)
 2053 GO TO(73,74,75,76),LDMAX
   76 VALI3P(76)=CCQ(26)*VALI2P(29)+CCQ(27)*VALI2P(30)+CCQ(28)*VALI2P(31
     $)+CCQ(29)*VALI2P(32)+CCQ(30)*VALI2P(33)+VALI2P(34)
   75 VALI3P(75)=CCQ(22)*VALI2P(29)+CCQ(23)*VALI2P(30)+CCQ(24)*VALI2P(31
     $)+CCQ(25)*VALI2P(32)+VALI2P(33)
   74 VALI3P(74)=CCQ(19)*VALI2P(29)+CCQ(20)*VALI2P(30)+CCQ(21)*VALI2P(31
     $)+VALI2P(32)
   73 VALI3P(73)=CCQ(17)*VALI2P(29)+CCQ(18)*VALI2P(30)+VALI2P(31)
 2052 GO TO(69,70,71,72),LDMAX
   72 VALI3P(72)=CCQ(13)*VALI2P(29)+CCQ(14)*VALI2P(30)+CCQ(15)*VALI2P(31
     $)+CCQ(16)*VALI2P(32)+VALI2P(33)
   71 VALI3P(71)=CCQ(10)*VALI2P(29)+CCQ(11)*VALI2P(30)+CCQ(12)*VALI2P(31
     $)+VALI2P(32)
   70 VALI3P(70)=CCQ(8)*VALI2P(29)+CCQ(9)*VALI2P(30)+VALI2P(31)
   69 VALI3P(69)=CCQ(7)*VALI2P(29)+VALI2P(30)
 2051 GO TO(65,66,67,68),LDMAX
   68 VALI3P(68)=CCQ(4)*VALI2P(29)+CCQ(5)*VALI2P(30)+CCQ(6)*VALI2P(31)+V
     $ALI2P(32)
   67 VALI3P(67)=CCQ(2)*VALI2P(29)+CCQ(3)*VALI2P(30)+VALI2P(31)
   66 VALI3P(66)=CCQ(1)*VALI2P(29)+VALI2P(30)
   65 VALI3P(65)=VALI2P(29)
 1004 GO TO(2041,2042,2043,2044),LCMAX
 2044 GO TO(61,62,63,64),LDMAX
   64 VALI3P(64)=CCQ(43)*VALI2P(22)+CCQ(44)*VALI2P(23)+CCQ(45)*VALI2P(24
     $)+CCQ(46)*VALI2P(25)+CCQ(47)*VALI2P(26)+CCQ(48)*VALI2P(27)+VALI2P(
     $28)
   63 VALI3P(63)=CCQ(38)*VALI2P(22)+CCQ(39)*VALI2P(23)+CCQ(40)*VALI2P(24
     $)+CCQ(41)*VALI2P(25)+CCQ(42)*VALI2P(26)+VALI2P(27)
   62 VALI3P(62)=CCQ(34)*VALI2P(22)+CCQ(35)*VALI2P(23)+CCQ(36)*VALI2P(24
     $)+CCQ(37)*VALI2P(25)+VALI2P(26)
   61 VALI3P(61)=CCQ(31)*VALI2P(22)+CCQ(32)*VALI2P(23)+CCQ(33)*VALI2P(24
     $)+VALI2P(25)
 2043 GO TO(57,58,59,60),LDMAX
   60 VALI3P(60)=CCQ(26)*VALI2P(22)+CCQ(27)*VALI2P(23)+CCQ(28)*VALI2P(24
     $)+CCQ(29)*VALI2P(25)+CCQ(30)*VALI2P(26)+VALI2P(27)
   59 VALI3P(59)=CCQ(22)*VALI2P(22)+CCQ(23)*VALI2P(23)+CCQ(24)*VALI2P(24
     $)+CCQ(25)*VALI2P(25)+VALI2P(26)
   58 VALI3P(58)=CCQ(19)*VALI2P(22)+CCQ(20)*VALI2P(23)+CCQ(21)*VALI2P(24
     $)+VALI2P(25)
   57 VALI3P(57)=CCQ(17)*VALI2P(22)+CCQ(18)*VALI2P(23)+VALI2P(24)
 2042 GO TO(53,54,55,56),LDMAX
   56 VALI3P(56)=CCQ(13)*VALI2P(22)+CCQ(14)*VALI2P(23)+CCQ(15)*VALI2P(24
     $)+CCQ(16)*VALI2P(25)+VALI2P(26)
   55 VALI3P(55)=CCQ(10)*VALI2P(22)+CCQ(11)*VALI2P(23)+CCQ(12)*VALI2P(24
     $)+VALI2P(25)
   54 VALI3P(54)=CCQ(8)*VALI2P(22)+CCQ(9)*VALI2P(23)+VALI2P(24)
   53 VALI3P(53)=CCQ(7)*VALI2P(22)+VALI2P(23)
 2041 GO TO(49,50,51,52),LDMAX
   52 VALI3P(52)=CCQ(4)*VALI2P(22)+CCQ(5)*VALI2P(23)+CCQ(6)*VALI2P(24)+V
     $ALI2P(25)
   51 VALI3P(51)=CCQ(2)*VALI2P(22)+CCQ(3)*VALI2P(23)+VALI2P(24)
   50 VALI3P(50)=CCQ(1)*VALI2P(22)+VALI2P(23)
   49 VALI3P(49)=VALI2P(22)
 1003 GO TO(2031,2032,2033,2034),LCMAX
 2034 GO TO(45,46,47,48),LDMAX
   48 VALI3P(48)=CCQ(43)*VALI2P(15)+CCQ(44)*VALI2P(16)+CCQ(45)*VALI2P(17
     $)+CCQ(46)*VALI2P(18)+CCQ(47)*VALI2P(19)+CCQ(48)*VALI2P(20)+VALI2P(
     $21)
   47 VALI3P(47)=CCQ(38)*VALI2P(15)+CCQ(39)*VALI2P(16)+CCQ(40)*VALI2P(17
     $)+CCQ(41)*VALI2P(18)+CCQ(42)*VALI2P(19)+VALI2P(20)
   46 VALI3P(46)=CCQ(34)*VALI2P(15)+CCQ(35)*VALI2P(16)+CCQ(36)*VALI2P(17
     $)+CCQ(37)*VALI2P(18)+VALI2P(19)
   45 VALI3P(45)=CCQ(31)*VALI2P(15)+CCQ(32)*VALI2P(16)+CCQ(33)*VALI2P(17
     $)+VALI2P(18)
 2033 GO TO(41,42,43,44),LDMAX
   44 VALI3P(44)=CCQ(26)*VALI2P(15)+CCQ(27)*VALI2P(16)+CCQ(28)*VALI2P(17
     $)+CCQ(29)*VALI2P(18)+CCQ(30)*VALI2P(19)+VALI2P(20)
   43 VALI3P(43)=CCQ(22)*VALI2P(15)+CCQ(23)*VALI2P(16)+CCQ(24)*VALI2P(17
     $)+CCQ(25)*VALI2P(18)+VALI2P(19)
   42 VALI3P(42)=CCQ(19)*VALI2P(15)+CCQ(20)*VALI2P(16)+CCQ(21)*VALI2P(17
     $)+VALI2P(18)
   41 VALI3P(41)=CCQ(17)*VALI2P(15)+CCQ(18)*VALI2P(16)+VALI2P(17)
 2032 GO TO(37,38,39,40),LDMAX
   40 VALI3P(40)=CCQ(13)*VALI2P(15)+CCQ(14)*VALI2P(16)+CCQ(15)*VALI2P(17
     $)+CCQ(16)*VALI2P(18)+VALI2P(19)
   39 VALI3P(39)=CCQ(10)*VALI2P(15)+CCQ(11)*VALI2P(16)+CCQ(12)*VALI2P(17
     $)+VALI2P(18)
   38 VALI3P(38)=CCQ(8)*VALI2P(15)+CCQ(9)*VALI2P(16)+VALI2P(17)
   37 VALI3P(37)=CCQ(7)*VALI2P(15)+VALI2P(16)
 2031 GO TO(33,34,35,36),LDMAX
   36 VALI3P(36)=CCQ(4)*VALI2P(15)+CCQ(5)*VALI2P(16)+CCQ(6)*VALI2P(17)+V
     $ALI2P(18)
   35 VALI3P(35)=CCQ(2)*VALI2P(15)+CCQ(3)*VALI2P(16)+VALI2P(17)
   34 VALI3P(34)=CCQ(1)*VALI2P(15)+VALI2P(16)
   33 VALI3P(33)=VALI2P(15)
 1002 GO TO(2021,2022,2023,2024),LCMAX
 2024 GO TO(29,30,31,32),LDMAX
   32 VALI3P(32)=CCQ(43)*VALI2P(8)+CCQ(44)*VALI2P(9)+CCQ(45)*VALI2P(10)+
     $CCQ(46)*VALI2P(11)+CCQ(47)*VALI2P(12)+CCQ(48)*VALI2P(13)+VALI2P(14
     $)
   31 VALI3P(31)=CCQ(38)*VALI2P(8)+CCQ(39)*VALI2P(9)+CCQ(40)*VALI2P(10)+
     $CCQ(41)*VALI2P(11)+CCQ(42)*VALI2P(12)+VALI2P(13)
   30 VALI3P(30)=CCQ(34)*VALI2P(8)+CCQ(35)*VALI2P(9)+CCQ(36)*VALI2P(10)+
     $CCQ(37)*VALI2P(11)+VALI2P(12)
   29 VALI3P(29)=CCQ(31)*VALI2P(8)+CCQ(32)*VALI2P(9)+CCQ(33)*VALI2P(10)+
     $VALI2P(11)
 2023 GO TO(25,26,27,28),LDMAX
   28 VALI3P(28)=CCQ(26)*VALI2P(8)+CCQ(27)*VALI2P(9)+CCQ(28)*VALI2P(10)+
     $CCQ(29)*VALI2P(11)+CCQ(30)*VALI2P(12)+VALI2P(13)
   27 VALI3P(27)=CCQ(22)*VALI2P(8)+CCQ(23)*VALI2P(9)+CCQ(24)*VALI2P(10)+
     $CCQ(25)*VALI2P(11)+VALI2P(12)
   26 VALI3P(26)=CCQ(19)*VALI2P(8)+CCQ(20)*VALI2P(9)+CCQ(21)*VALI2P(10)+
     $VALI2P(11)
   25 VALI3P(25)=CCQ(17)*VALI2P(8)+CCQ(18)*VALI2P(9)+VALI2P(10)
 2022 GO TO(21,22,23,24),LDMAX
   24 VALI3P(24)=CCQ(13)*VALI2P(8)+CCQ(14)*VALI2P(9)+CCQ(15)*VALI2P(10)+
     $CCQ(16)*VALI2P(11)+VALI2P(12)
   23 VALI3P(23)=CCQ(10)*VALI2P(8)+CCQ(11)*VALI2P(9)+CCQ(12)*VALI2P(10)+
     $VALI2P(11)
   22 VALI3P(22)=CCQ(8)*VALI2P(8)+CCQ(9)*VALI2P(9)+VALI2P(10)
   21 VALI3P(21)=CCQ(7)*VALI2P(8)+VALI2P(9)
 2021 GO TO(17,18,19,20),LDMAX
   20 VALI3P(20)=CCQ(4)*VALI2P(8)+CCQ(5)*VALI2P(9)+CCQ(6)*VALI2P(10)+VAL
     $I2P(11)
   19 VALI3P(19)=CCQ(2)*VALI2P(8)+CCQ(3)*VALI2P(9)+VALI2P(10)
   18 VALI3P(18)=CCQ(1)*VALI2P(8)+VALI2P(9)
   17 VALI3P(17)=VALI2P(8)
 1001 GO TO(2011,2012,2013,2014),LCMAX
 2014 GO TO(13,14,15,16),LDMAX
   16 VALI3P(16)=CCQ(43)*VALI2P(1)+CCQ(44)*VALI2P(2)+CCQ(45)*VALI2P(3)+C
     $CQ(46)*VALI2P(4)+CCQ(47)*VALI2P(5)+CCQ(48)*VALI2P(6)+VALI2P(7)
   15 VALI3P(15)=CCQ(38)*VALI2P(1)+CCQ(39)*VALI2P(2)+CCQ(40)*VALI2P(3)+C
     $CQ(41)*VALI2P(4)+CCQ(42)*VALI2P(5)+VALI2P(6)
   14 VALI3P(14)=CCQ(34)*VALI2P(1)+CCQ(35)*VALI2P(2)+CCQ(36)*VALI2P(3)+C
     $CQ(37)*VALI2P(4)+VALI2P(5)
   13 VALI3P(13)=CCQ(31)*VALI2P(1)+CCQ(32)*VALI2P(2)+CCQ(33)*VALI2P(3)+V
     $ALI2P(4)
 2013 GO TO(9,10,11,12),LDMAX
   12 VALI3P(12)=CCQ(26)*VALI2P(1)+CCQ(27)*VALI2P(2)+CCQ(28)*VALI2P(3)+C
     $CQ(29)*VALI2P(4)+CCQ(30)*VALI2P(5)+VALI2P(6)
   11 VALI3P(11)=CCQ(22)*VALI2P(1)+CCQ(23)*VALI2P(2)+CCQ(24)*VALI2P(3)+C
     $CQ(25)*VALI2P(4)+VALI2P(5)
   10 VALI3P(10)=CCQ(19)*VALI2P(1)+CCQ(20)*VALI2P(2)+CCQ(21)*VALI2P(3)+V
     $ALI2P(4)
    9 VALI3P(9)=CCQ(17)*VALI2P(1)+CCQ(18)*VALI2P(2)+VALI2P(3)
 2012 GO TO(5,6,7,8),LDMAX
    8 VALI3P(8)=CCQ(13)*VALI2P(1)+CCQ(14)*VALI2P(2)+CCQ(15)*VALI2P(3)+CC
     $Q(16)*VALI2P(4)+VALI2P(5)
    7 VALI3P(7)=CCQ(10)*VALI2P(1)+CCQ(11)*VALI2P(2)+CCQ(12)*VALI2P(3)+VA
     $LI2P(4)
    6 VALI3P(6)=CCQ(8)*VALI2P(1)+CCQ(9)*VALI2P(2)+VALI2P(3)
    5 VALI3P(5)=CCQ(7)*VALI2P(1)+VALI2P(2)
 2011 GO TO(1,2,3,4),LDMAX
    4 VALI3P(4)=CCQ(4)*VALI2P(1)+CCQ(5)*VALI2P(2)+CCQ(6)*VALI2P(3)+VALI2
     $P(4)
    3 VALI3P(3)=CCQ(2)*VALI2P(1)+CCQ(3)*VALI2P(2)+VALI2P(3)
    2 VALI3P(2)=CCQ(1)*VALI2P(1)+VALI2P(2)
    1 VALI3P(1)=VALI2P(1)
      RETURN
      END
      SUBROUTINE TWOD4C(CCP,VALIP)
C
C     ******************************************************************
C     ROUTINE TO SPLIT TWO-DIMENSIONAL THREE-CENTER INTEGRALS IN VALI3P
C     INTO UP TO 256 TWO-DIMENSIONAL FOUR-CENTER INTEGRALS IN VALIP
C     USING CCP.
C     ALL ZEROES HAVE BEEN SUPPRESSED, AND MULTIPLIES BY ONE OMITTED.
C     THIS ROUTINE WAS GENERATED BY PWRITE IN THE SPRING OF '76.
C     ******************************************************************
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      COMMON/I2ECOM/LAMAX,LBMAX,LCMAX,LDMAX,LPMAX,LQMAX,LPQMAX,L2EFLL,
     1 EQ,EP2I,RHOT2,G(13),VALI2P(49),VALI3P(112),A(174)
C
      DIMENSION CCP(48),VALIP(256)
C*
C     THE FOLLOWING 'GO TO' CAUSES TROUBLE FOR THE SUN UNIX FORTRAN
C     COMPILER (AND PROBABLY THEREFORE ON ALL STANDARD UNIX FORTRAN
C     COMPILERS) - IT IS SPLIT INTO MULTIPLE SHORTER JUMPS.
C
C?GLD/GBR/IBM/VAX/CDC
C     GO TO(1001,1002,1003,1004),LAMAX
C??
C?UNX
      GO TO(9001,1002,1003,1004),LAMAX
C??
 1004 GO TO(2041,2042,2043,2044),LBMAX
 2044 GO TO(3441,3442,3443,3444),LCMAX
 3444 GO TO(253,254,255,256),LDMAX
  256 VALIP(256)=CCP(43)*VALI3P(16)+CCP(44)*VALI3P(32)+CCP(45)*VALI3P(48
     $)+CCP(46)*VALI3P(64)+CCP(47)*VALI3P(80)+CCP(48)*VALI3P(96)+VALI3P(
     $112)
  255 VALIP(255)=CCP(43)*VALI3P(15)+CCP(44)*VALI3P(31)+CCP(45)*VALI3P(47
     $)+CCP(46)*VALI3P(63)+CCP(47)*VALI3P(79)+CCP(48)*VALI3P(95)+VALI3P(
     $111)
  254 VALIP(254)=CCP(43)*VALI3P(14)+CCP(44)*VALI3P(30)+CCP(45)*VALI3P(46
     $)+CCP(46)*VALI3P(62)+CCP(47)*VALI3P(78)+CCP(48)*VALI3P(94)+VALI3P(
     $110)
  253 VALIP(253)=CCP(43)*VALI3P(13)+CCP(44)*VALI3P(29)+CCP(45)*VALI3P(45
     $)+CCP(46)*VALI3P(61)+CCP(47)*VALI3P(77)+CCP(48)*VALI3P(93)+VALI3P(
     $109)
 3443 GO TO(249,250,251,252),LDMAX
  252 VALIP(252)=CCP(43)*VALI3P(12)+CCP(44)*VALI3P(28)+CCP(45)*VALI3P(44
     $)+CCP(46)*VALI3P(60)+CCP(47)*VALI3P(76)+CCP(48)*VALI3P(92)+VALI3P(
     $108)
  251 VALIP(251)=CCP(43)*VALI3P(11)+CCP(44)*VALI3P(27)+CCP(45)*VALI3P(43
     $)+CCP(46)*VALI3P(59)+CCP(47)*VALI3P(75)+CCP(48)*VALI3P(91)+VALI3P(
     $107)
  250 VALIP(250)=CCP(43)*VALI3P(10)+CCP(44)*VALI3P(26)+CCP(45)*VALI3P(42
     $)+CCP(46)*VALI3P(58)+CCP(47)*VALI3P(74)+CCP(48)*VALI3P(90)+VALI3P(
     $106)
  249 VALIP(249)=CCP(43)*VALI3P(9)+CCP(44)*VALI3P(25)+CCP(45)*VALI3P(41)
     $+CCP(46)*VALI3P(57)+CCP(47)*VALI3P(73)+CCP(48)*VALI3P(89)+VALI3P(1
     $05)
 3442 GO TO(245,246,247,248),LDMAX
  248 VALIP(248)=CCP(43)*VALI3P(8)+CCP(44)*VALI3P(24)+CCP(45)*VALI3P(40)
     $+CCP(46)*VALI3P(56)+CCP(47)*VALI3P(72)+CCP(48)*VALI3P(88)+VALI3P(1
     $04)
  247 VALIP(247)=CCP(43)*VALI3P(7)+CCP(44)*VALI3P(23)+CCP(45)*VALI3P(39)
     $+CCP(46)*VALI3P(55)+CCP(47)*VALI3P(71)+CCP(48)*VALI3P(87)+VALI3P(1
     $03)
  246 VALIP(246)=CCP(43)*VALI3P(6)+CCP(44)*VALI3P(22)+CCP(45)*VALI3P(38)
     $+CCP(46)*VALI3P(54)+CCP(47)*VALI3P(70)+CCP(48)*VALI3P(86)+VALI3P(1
     $02)
  245 VALIP(245)=CCP(43)*VALI3P(5)+CCP(44)*VALI3P(21)+CCP(45)*VALI3P(37)
     $+CCP(46)*VALI3P(53)+CCP(47)*VALI3P(69)+CCP(48)*VALI3P(85)+VALI3P(1
     $01)
 3441 GO TO(241,242,243,244),LDMAX
  244 VALIP(244)=CCP(43)*VALI3P(4)+CCP(44)*VALI3P(20)+CCP(45)*VALI3P(36)
     $+CCP(46)*VALI3P(52)+CCP(47)*VALI3P(68)+CCP(48)*VALI3P(84)+VALI3P(1
     $00)
  243 VALIP(243)=CCP(43)*VALI3P(3)+CCP(44)*VALI3P(19)+CCP(45)*VALI3P(35)
     $+CCP(46)*VALI3P(51)+CCP(47)*VALI3P(67)+CCP(48)*VALI3P(83)+VALI3P(9
     $9)
  242 VALIP(242)=CCP(43)*VALI3P(2)+CCP(44)*VALI3P(18)+CCP(45)*VALI3P(34)
     $+CCP(46)*VALI3P(50)+CCP(47)*VALI3P(66)+CCP(48)*VALI3P(82)+VALI3P(9
     $8)
  241 VALIP(241)=CCP(43)*VALI3P(1)+CCP(44)*VALI3P(17)+CCP(45)*VALI3P(33)
     $+CCP(46)*VALI3P(49)+CCP(47)*VALI3P(65)+CCP(48)*VALI3P(81)+VALI3P(9
     $7)
 2043 GO TO(3431,3432,3433,3434),LCMAX
 3434 GO TO(237,238,239,240),LDMAX
  240 VALIP(240)=CCP(38)*VALI3P(16)+CCP(39)*VALI3P(32)+CCP(40)*VALI3P(48
     $)+CCP(41)*VALI3P(64)+CCP(42)*VALI3P(80)+VALI3P(96)
  239 VALIP(239)=CCP(38)*VALI3P(15)+CCP(39)*VALI3P(31)+CCP(40)*VALI3P(47
     $)+CCP(41)*VALI3P(63)+CCP(42)*VALI3P(79)+VALI3P(95)
  238 VALIP(238)=CCP(38)*VALI3P(14)+CCP(39)*VALI3P(30)+CCP(40)*VALI3P(46
     $)+CCP(41)*VALI3P(62)+CCP(42)*VALI3P(78)+VALI3P(94)
  237 VALIP(237)=CCP(38)*VALI3P(13)+CCP(39)*VALI3P(29)+CCP(40)*VALI3P(45
     $)+CCP(41)*VALI3P(61)+CCP(42)*VALI3P(77)+VALI3P(93)
 3433 GO TO(233,234,235,236),LDMAX
  236 VALIP(236)=CCP(38)*VALI3P(12)+CCP(39)*VALI3P(28)+CCP(40)*VALI3P(44
     $)+CCP(41)*VALI3P(60)+CCP(42)*VALI3P(76)+VALI3P(92)
  235 VALIP(235)=CCP(38)*VALI3P(11)+CCP(39)*VALI3P(27)+CCP(40)*VALI3P(43
     $)+CCP(41)*VALI3P(59)+CCP(42)*VALI3P(75)+VALI3P(91)
  234 VALIP(234)=CCP(38)*VALI3P(10)+CCP(39)*VALI3P(26)+CCP(40)*VALI3P(42
     $)+CCP(41)*VALI3P(58)+CCP(42)*VALI3P(74)+VALI3P(90)
  233 VALIP(233)=CCP(38)*VALI3P(9)+CCP(39)*VALI3P(25)+CCP(40)*VALI3P(41)
     $+CCP(41)*VALI3P(57)+CCP(42)*VALI3P(73)+VALI3P(89)
 3432 GO TO(229,230,231,232),LDMAX
  232 VALIP(232)=CCP(38)*VALI3P(8)+CCP(39)*VALI3P(24)+CCP(40)*VALI3P(40)
     $+CCP(41)*VALI3P(56)+CCP(42)*VALI3P(72)+VALI3P(88)
  231 VALIP(231)=CCP(38)*VALI3P(7)+CCP(39)*VALI3P(23)+CCP(40)*VALI3P(39)
     $+CCP(41)*VALI3P(55)+CCP(42)*VALI3P(71)+VALI3P(87)
  230 VALIP(230)=CCP(38)*VALI3P(6)+CCP(39)*VALI3P(22)+CCP(40)*VALI3P(38)
     $+CCP(41)*VALI3P(54)+CCP(42)*VALI3P(70)+VALI3P(86)
  229 VALIP(229)=CCP(38)*VALI3P(5)+CCP(39)*VALI3P(21)+CCP(40)*VALI3P(37)
     $+CCP(41)*VALI3P(53)+CCP(42)*VALI3P(69)+VALI3P(85)
 3431 GO TO(225,226,227,228),LDMAX
  228 VALIP(228)=CCP(38)*VALI3P(4)+CCP(39)*VALI3P(20)+CCP(40)*VALI3P(36)
     $+CCP(41)*VALI3P(52)+CCP(42)*VALI3P(68)+VALI3P(84)
  227 VALIP(227)=CCP(38)*VALI3P(3)+CCP(39)*VALI3P(19)+CCP(40)*VALI3P(35)
     $+CCP(41)*VALI3P(51)+CCP(42)*VALI3P(67)+VALI3P(83)
  226 VALIP(226)=CCP(38)*VALI3P(2)+CCP(39)*VALI3P(18)+CCP(40)*VALI3P(34)
     $+CCP(41)*VALI3P(50)+CCP(42)*VALI3P(66)+VALI3P(82)
  225 VALIP(225)=CCP(38)*VALI3P(1)+CCP(39)*VALI3P(17)+CCP(40)*VALI3P(33)
     $+CCP(41)*VALI3P(49)+CCP(42)*VALI3P(65)+VALI3P(81)
 2042 GO TO(3421,3422,3423,3424),LCMAX
 3424 GO TO(221,222,223,224),LDMAX
  224 VALIP(224)=CCP(34)*VALI3P(16)+CCP(35)*VALI3P(32)+CCP(36)*VALI3P(48
     $)+CCP(37)*VALI3P(64)+VALI3P(80)
  223 VALIP(223)=CCP(34)*VALI3P(15)+CCP(35)*VALI3P(31)+CCP(36)*VALI3P(47
     $)+CCP(37)*VALI3P(63)+VALI3P(79)
  222 VALIP(222)=CCP(34)*VALI3P(14)+CCP(35)*VALI3P(30)+CCP(36)*VALI3P(46
     $)+CCP(37)*VALI3P(62)+VALI3P(78)
  221 VALIP(221)=CCP(34)*VALI3P(13)+CCP(35)*VALI3P(29)+CCP(36)*VALI3P(45
     $)+CCP(37)*VALI3P(61)+VALI3P(77)
 3423 GO TO(217,218,219,220),LDMAX
  220 VALIP(220)=CCP(34)*VALI3P(12)+CCP(35)*VALI3P(28)+CCP(36)*VALI3P(44
     $)+CCP(37)*VALI3P(60)+VALI3P(76)
  219 VALIP(219)=CCP(34)*VALI3P(11)+CCP(35)*VALI3P(27)+CCP(36)*VALI3P(43
     $)+CCP(37)*VALI3P(59)+VALI3P(75)
  218 VALIP(218)=CCP(34)*VALI3P(10)+CCP(35)*VALI3P(26)+CCP(36)*VALI3P(42
     $)+CCP(37)*VALI3P(58)+VALI3P(74)
  217 VALIP(217)=CCP(34)*VALI3P(9)+CCP(35)*VALI3P(25)+CCP(36)*VALI3P(41)
     $+CCP(37)*VALI3P(57)+VALI3P(73)
 3422 GO TO(213,214,215,216),LDMAX
  216 VALIP(216)=CCP(34)*VALI3P(8)+CCP(35)*VALI3P(24)+CCP(36)*VALI3P(40)
     $+CCP(37)*VALI3P(56)+VALI3P(72)
  215 VALIP(215)=CCP(34)*VALI3P(7)+CCP(35)*VALI3P(23)+CCP(36)*VALI3P(39)
     $+CCP(37)*VALI3P(55)+VALI3P(71)
  214 VALIP(214)=CCP(34)*VALI3P(6)+CCP(35)*VALI3P(22)+CCP(36)*VALI3P(38)
     $+CCP(37)*VALI3P(54)+VALI3P(70)
  213 VALIP(213)=CCP(34)*VALI3P(5)+CCP(35)*VALI3P(21)+CCP(36)*VALI3P(37)
     $+CCP(37)*VALI3P(53)+VALI3P(69)
 3421 GO TO(209,210,211,212),LDMAX
  212 VALIP(212)=CCP(34)*VALI3P(4)+CCP(35)*VALI3P(20)+CCP(36)*VALI3P(36)
     $+CCP(37)*VALI3P(52)+VALI3P(68)
  211 VALIP(211)=CCP(34)*VALI3P(3)+CCP(35)*VALI3P(19)+CCP(36)*VALI3P(35)
     $+CCP(37)*VALI3P(51)+VALI3P(67)
  210 VALIP(210)=CCP(34)*VALI3P(2)+CCP(35)*VALI3P(18)+CCP(36)*VALI3P(34)
     $+CCP(37)*VALI3P(50)+VALI3P(66)
  209 VALIP(209)=CCP(34)*VALI3P(1)+CCP(35)*VALI3P(17)+CCP(36)*VALI3P(33)
     $+CCP(37)*VALI3P(49)+VALI3P(65)
 2041 GO TO(3411,3412,3413,3414),LCMAX
 3414 GO TO(205,206,207,208),LDMAX
  208 VALIP(208)=CCP(31)*VALI3P(16)+CCP(32)*VALI3P(32)+CCP(33)*VALI3P(48
     $)+VALI3P(64)
  207 VALIP(207)=CCP(31)*VALI3P(15)+CCP(32)*VALI3P(31)+CCP(33)*VALI3P(47
     $)+VALI3P(63)
  206 VALIP(206)=CCP(31)*VALI3P(14)+CCP(32)*VALI3P(30)+CCP(33)*VALI3P(46
     $)+VALI3P(62)
  205 VALIP(205)=CCP(31)*VALI3P(13)+CCP(32)*VALI3P(29)+CCP(33)*VALI3P(45
     $)+VALI3P(61)
 3413 GO TO(201,202,203,204),LDMAX
  204 VALIP(204)=CCP(31)*VALI3P(12)+CCP(32)*VALI3P(28)+CCP(33)*VALI3P(44
     $)+VALI3P(60)
  203 VALIP(203)=CCP(31)*VALI3P(11)+CCP(32)*VALI3P(27)+CCP(33)*VALI3P(43
     $)+VALI3P(59)
  202 VALIP(202)=CCP(31)*VALI3P(10)+CCP(32)*VALI3P(26)+CCP(33)*VALI3P(42
     $)+VALI3P(58)
  201 VALIP(201)=CCP(31)*VALI3P(9)+CCP(32)*VALI3P(25)+CCP(33)*VALI3P(41)
     $+VALI3P(57)
 3412 GO TO(197,198,199,200),LDMAX
  200 VALIP(200)=CCP(31)*VALI3P(8)+CCP(32)*VALI3P(24)+CCP(33)*VALI3P(40)
     $+VALI3P(56)
  199 VALIP(199)=CCP(31)*VALI3P(7)+CCP(32)*VALI3P(23)+CCP(33)*VALI3P(39)
     $+VALI3P(55)
  198 VALIP(198)=CCP(31)*VALI3P(6)+CCP(32)*VALI3P(22)+CCP(33)*VALI3P(38)
     $+VALI3P(54)
  197 VALIP(197)=CCP(31)*VALI3P(5)+CCP(32)*VALI3P(21)+CCP(33)*VALI3P(37)
     $+VALI3P(53)
 3411 GO TO(193,194,195,196),LDMAX
  196 VALIP(196)=CCP(31)*VALI3P(4)+CCP(32)*VALI3P(20)+CCP(33)*VALI3P(36)
     $+VALI3P(52)
  195 VALIP(195)=CCP(31)*VALI3P(3)+CCP(32)*VALI3P(19)+CCP(33)*VALI3P(35)
     $+VALI3P(51)
  194 VALIP(194)=CCP(31)*VALI3P(2)+CCP(32)*VALI3P(18)+CCP(33)*VALI3P(34)
     $+VALI3P(50)
  193 VALIP(193)=CCP(31)*VALI3P(1)+CCP(32)*VALI3P(17)+CCP(33)*VALI3P(33)
     $+VALI3P(49)
C?UNX GET AROUND 'GO TO' COMPILER BUG.
      GO TO 1003
 9001 GO TO 9002
C??
 1003 GO TO(2031,2032,2033,2034),LBMAX
 2034 GO TO(3341,3342,3343,3344),LCMAX
 3344 GO TO(189,190,191,192),LDMAX
  192 VALIP(192)=CCP(26)*VALI3P(16)+CCP(27)*VALI3P(32)+CCP(28)*VALI3P(48
     $)+CCP(29)*VALI3P(64)+CCP(30)*VALI3P(80)+VALI3P(96)
  191 VALIP(191)=CCP(26)*VALI3P(15)+CCP(27)*VALI3P(31)+CCP(28)*VALI3P(47
     $)+CCP(29)*VALI3P(63)+CCP(30)*VALI3P(79)+VALI3P(95)
  190 VALIP(190)=CCP(26)*VALI3P(14)+CCP(27)*VALI3P(30)+CCP(28)*VALI3P(46
     $)+CCP(29)*VALI3P(62)+CCP(30)*VALI3P(78)+VALI3P(94)
  189 VALIP(189)=CCP(26)*VALI3P(13)+CCP(27)*VALI3P(29)+CCP(28)*VALI3P(45
     $)+CCP(29)*VALI3P(61)+CCP(30)*VALI3P(77)+VALI3P(93)
 3343 GO TO(185,186,187,188),LDMAX
  188 VALIP(188)=CCP(26)*VALI3P(12)+CCP(27)*VALI3P(28)+CCP(28)*VALI3P(44
     $)+CCP(29)*VALI3P(60)+CCP(30)*VALI3P(76)+VALI3P(92)
  187 VALIP(187)=CCP(26)*VALI3P(11)+CCP(27)*VALI3P(27)+CCP(28)*VALI3P(43
     $)+CCP(29)*VALI3P(59)+CCP(30)*VALI3P(75)+VALI3P(91)
  186 VALIP(186)=CCP(26)*VALI3P(10)+CCP(27)*VALI3P(26)+CCP(28)*VALI3P(42
     $)+CCP(29)*VALI3P(58)+CCP(30)*VALI3P(74)+VALI3P(90)
  185 VALIP(185)=CCP(26)*VALI3P(9)+CCP(27)*VALI3P(25)+CCP(28)*VALI3P(41)
     $+CCP(29)*VALI3P(57)+CCP(30)*VALI3P(73)+VALI3P(89)
 3342 GO TO(181,182,183,184),LDMAX
  184 VALIP(184)=CCP(26)*VALI3P(8)+CCP(27)*VALI3P(24)+CCP(28)*VALI3P(40)
     $+CCP(29)*VALI3P(56)+CCP(30)*VALI3P(72)+VALI3P(88)
  183 VALIP(183)=CCP(26)*VALI3P(7)+CCP(27)*VALI3P(23)+CCP(28)*VALI3P(39)
     $+CCP(29)*VALI3P(55)+CCP(30)*VALI3P(71)+VALI3P(87)
  182 VALIP(182)=CCP(26)*VALI3P(6)+CCP(27)*VALI3P(22)+CCP(28)*VALI3P(38)
     $+CCP(29)*VALI3P(54)+CCP(30)*VALI3P(70)+VALI3P(86)
  181 VALIP(181)=CCP(26)*VALI3P(5)+CCP(27)*VALI3P(21)+CCP(28)*VALI3P(37)
     $+CCP(29)*VALI3P(53)+CCP(30)*VALI3P(69)+VALI3P(85)
 3341 GO TO(177,178,179,180),LDMAX
  180 VALIP(180)=CCP(26)*VALI3P(4)+CCP(27)*VALI3P(20)+CCP(28)*VALI3P(36)
     $+CCP(29)*VALI3P(52)+CCP(30)*VALI3P(68)+VALI3P(84)
  179 VALIP(179)=CCP(26)*VALI3P(3)+CCP(27)*VALI3P(19)+CCP(28)*VALI3P(35)
     $+CCP(29)*VALI3P(51)+CCP(30)*VALI3P(67)+VALI3P(83)
  178 VALIP(178)=CCP(26)*VALI3P(2)+CCP(27)*VALI3P(18)+CCP(28)*VALI3P(34)
     $+CCP(29)*VALI3P(50)+CCP(30)*VALI3P(66)+VALI3P(82)
  177 VALIP(177)=CCP(26)*VALI3P(1)+CCP(27)*VALI3P(17)+CCP(28)*VALI3P(33)
     $+CCP(29)*VALI3P(49)+CCP(30)*VALI3P(65)+VALI3P(81)
 2033 GO TO(3331,3332,3333,3334),LCMAX
 3334 GO TO(173,174,175,176),LDMAX
  176 VALIP(176)=CCP(22)*VALI3P(16)+CCP(23)*VALI3P(32)+CCP(24)*VALI3P(48
     $)+CCP(25)*VALI3P(64)+VALI3P(80)
  175 VALIP(175)=CCP(22)*VALI3P(15)+CCP(23)*VALI3P(31)+CCP(24)*VALI3P(47
     $)+CCP(25)*VALI3P(63)+VALI3P(79)
  174 VALIP(174)=CCP(22)*VALI3P(14)+CCP(23)*VALI3P(30)+CCP(24)*VALI3P(46
     $)+CCP(25)*VALI3P(62)+VALI3P(78)
  173 VALIP(173)=CCP(22)*VALI3P(13)+CCP(23)*VALI3P(29)+CCP(24)*VALI3P(45
     $)+CCP(25)*VALI3P(61)+VALI3P(77)
 3333 GO TO(169,170,171,172),LDMAX
  172 VALIP(172)=CCP(22)*VALI3P(12)+CCP(23)*VALI3P(28)+CCP(24)*VALI3P(44
     $)+CCP(25)*VALI3P(60)+VALI3P(76)
  171 VALIP(171)=CCP(22)*VALI3P(11)+CCP(23)*VALI3P(27)+CCP(24)*VALI3P(43
     $)+CCP(25)*VALI3P(59)+VALI3P(75)
  170 VALIP(170)=CCP(22)*VALI3P(10)+CCP(23)*VALI3P(26)+CCP(24)*VALI3P(42
     $)+CCP(25)*VALI3P(58)+VALI3P(74)
  169 VALIP(169)=CCP(22)*VALI3P(9)+CCP(23)*VALI3P(25)+CCP(24)*VALI3P(41)
     $+CCP(25)*VALI3P(57)+VALI3P(73)
 3332 GO TO(165,166,167,168),LDMAX
  168 VALIP(168)=CCP(22)*VALI3P(8)+CCP(23)*VALI3P(24)+CCP(24)*VALI3P(40)
     $+CCP(25)*VALI3P(56)+VALI3P(72)
  167 VALIP(167)=CCP(22)*VALI3P(7)+CCP(23)*VALI3P(23)+CCP(24)*VALI3P(39)
     $+CCP(25)*VALI3P(55)+VALI3P(71)
  166 VALIP(166)=CCP(22)*VALI3P(6)+CCP(23)*VALI3P(22)+CCP(24)*VALI3P(38)
     $+CCP(25)*VALI3P(54)+VALI3P(70)
  165 VALIP(165)=CCP(22)*VALI3P(5)+CCP(23)*VALI3P(21)+CCP(24)*VALI3P(37)
     $+CCP(25)*VALI3P(53)+VALI3P(69)
 3331 GO TO(161,162,163,164),LDMAX
  164 VALIP(164)=CCP(22)*VALI3P(4)+CCP(23)*VALI3P(20)+CCP(24)*VALI3P(36)
     $+CCP(25)*VALI3P(52)+VALI3P(68)
  163 VALIP(163)=CCP(22)*VALI3P(3)+CCP(23)*VALI3P(19)+CCP(24)*VALI3P(35)
     $+CCP(25)*VALI3P(51)+VALI3P(67)
  162 VALIP(162)=CCP(22)*VALI3P(2)+CCP(23)*VALI3P(18)+CCP(24)*VALI3P(34)
     $+CCP(25)*VALI3P(50)+VALI3P(66)
  161 VALIP(161)=CCP(22)*VALI3P(1)+CCP(23)*VALI3P(17)+CCP(24)*VALI3P(33)
     $+CCP(25)*VALI3P(49)+VALI3P(65)
 2032 GO TO(3321,3322,3323,3324),LCMAX
 3324 GO TO(157,158,159,160),LDMAX
  160 VALIP(160)=CCP(19)*VALI3P(16)+CCP(20)*VALI3P(32)+CCP(21)*VALI3P(48
     $)+VALI3P(64)
  159 VALIP(159)=CCP(19)*VALI3P(15)+CCP(20)*VALI3P(31)+CCP(21)*VALI3P(47
     $)+VALI3P(63)
  158 VALIP(158)=CCP(19)*VALI3P(14)+CCP(20)*VALI3P(30)+CCP(21)*VALI3P(46
     $)+VALI3P(62)
  157 VALIP(157)=CCP(19)*VALI3P(13)+CCP(20)*VALI3P(29)+CCP(21)*VALI3P(45
     $)+VALI3P(61)
 3323 GO TO(153,154,155,156),LDMAX
  156 VALIP(156)=CCP(19)*VALI3P(12)+CCP(20)*VALI3P(28)+CCP(21)*VALI3P(44
     $)+VALI3P(60)
  155 VALIP(155)=CCP(19)*VALI3P(11)+CCP(20)*VALI3P(27)+CCP(21)*VALI3P(43
     $)+VALI3P(59)
  154 VALIP(154)=CCP(19)*VALI3P(10)+CCP(20)*VALI3P(26)+CCP(21)*VALI3P(42
     $)+VALI3P(58)
  153 VALIP(153)=CCP(19)*VALI3P(9)+CCP(20)*VALI3P(25)+CCP(21)*VALI3P(41)
     $+VALI3P(57)
 3322 GO TO(149,150,151,152),LDMAX
  152 VALIP(152)=CCP(19)*VALI3P(8)+CCP(20)*VALI3P(24)+CCP(21)*VALI3P(40)
     $+VALI3P(56)
  151 VALIP(151)=CCP(19)*VALI3P(7)+CCP(20)*VALI3P(23)+CCP(21)*VALI3P(39)
     $+VALI3P(55)
  150 VALIP(150)=CCP(19)*VALI3P(6)+CCP(20)*VALI3P(22)+CCP(21)*VALI3P(38)
     $+VALI3P(54)
  149 VALIP(149)=CCP(19)*VALI3P(5)+CCP(20)*VALI3P(21)+CCP(21)*VALI3P(37)
     $+VALI3P(53)
 3321 GO TO(145,146,147,148),LDMAX
  148 VALIP(148)=CCP(19)*VALI3P(4)+CCP(20)*VALI3P(20)+CCP(21)*VALI3P(36)
     $+VALI3P(52)
  147 VALIP(147)=CCP(19)*VALI3P(3)+CCP(20)*VALI3P(19)+CCP(21)*VALI3P(35)
     $+VALI3P(51)
  146 VALIP(146)=CCP(19)*VALI3P(2)+CCP(20)*VALI3P(18)+CCP(21)*VALI3P(34)
     $+VALI3P(50)
  145 VALIP(145)=CCP(19)*VALI3P(1)+CCP(20)*VALI3P(17)+CCP(21)*VALI3P(33)
     $+VALI3P(49)
 2031 GO TO(3311,3312,3313,3314),LCMAX
 3314 GO TO(141,142,143,144),LDMAX
  144 VALIP(144)=CCP(17)*VALI3P(16)+CCP(18)*VALI3P(32)+VALI3P(48)
  143 VALIP(143)=CCP(17)*VALI3P(15)+CCP(18)*VALI3P(31)+VALI3P(47)
  142 VALIP(142)=CCP(17)*VALI3P(14)+CCP(18)*VALI3P(30)+VALI3P(46)
  141 VALIP(141)=CCP(17)*VALI3P(13)+CCP(18)*VALI3P(29)+VALI3P(45)
 3313 GO TO(137,138,139,140),LDMAX
  140 VALIP(140)=CCP(17)*VALI3P(12)+CCP(18)*VALI3P(28)+VALI3P(44)
  139 VALIP(139)=CCP(17)*VALI3P(11)+CCP(18)*VALI3P(27)+VALI3P(43)
  138 VALIP(138)=CCP(17)*VALI3P(10)+CCP(18)*VALI3P(26)+VALI3P(42)
  137 VALIP(137)=CCP(17)*VALI3P(9)+CCP(18)*VALI3P(25)+VALI3P(41)
 3312 GO TO(133,134,135,136),LDMAX
  136 VALIP(136)=CCP(17)*VALI3P(8)+CCP(18)*VALI3P(24)+VALI3P(40)
  135 VALIP(135)=CCP(17)*VALI3P(7)+CCP(18)*VALI3P(23)+VALI3P(39)
  134 VALIP(134)=CCP(17)*VALI3P(6)+CCP(18)*VALI3P(22)+VALI3P(38)
  133 VALIP(133)=CCP(17)*VALI3P(5)+CCP(18)*VALI3P(21)+VALI3P(37)
 3311 GO TO(129,130,131,132),LDMAX
  132 VALIP(132)=CCP(17)*VALI3P(4)+CCP(18)*VALI3P(20)+VALI3P(36)
  131 VALIP(131)=CCP(17)*VALI3P(3)+CCP(18)*VALI3P(19)+VALI3P(35)
  130 VALIP(130)=CCP(17)*VALI3P(2)+CCP(18)*VALI3P(18)+VALI3P(34)
  129 VALIP(129)=CCP(17)*VALI3P(1)+CCP(18)*VALI3P(17)+VALI3P(33)
C?UNX GET AROUND 'GO TO' COMPILER BUG.
      GO TO 1002
 9002 GO TO 1001
C??
 1002 GO TO(2021,2022,2023,2024),LBMAX
 2024 GO TO(3241,3242,3243,3244),LCMAX
 3244 GO TO(125,126,127,128),LDMAX
  128 VALIP(128)=CCP(13)*VALI3P(16)+CCP(14)*VALI3P(32)+CCP(15)*VALI3P(48
     $)+CCP(16)*VALI3P(64)+VALI3P(80)
  127 VALIP(127)=CCP(13)*VALI3P(15)+CCP(14)*VALI3P(31)+CCP(15)*VALI3P(47
     $)+CCP(16)*VALI3P(63)+VALI3P(79)
  126 VALIP(126)=CCP(13)*VALI3P(14)+CCP(14)*VALI3P(30)+CCP(15)*VALI3P(46
     $)+CCP(16)*VALI3P(62)+VALI3P(78)
  125 VALIP(125)=CCP(13)*VALI3P(13)+CCP(14)*VALI3P(29)+CCP(15)*VALI3P(45
     $)+CCP(16)*VALI3P(61)+VALI3P(77)
 3243 GO TO(121,122,123,124),LDMAX
  124 VALIP(124)=CCP(13)*VALI3P(12)+CCP(14)*VALI3P(28)+CCP(15)*VALI3P(44
     $)+CCP(16)*VALI3P(60)+VALI3P(76)
  123 VALIP(123)=CCP(13)*VALI3P(11)+CCP(14)*VALI3P(27)+CCP(15)*VALI3P(43
     $)+CCP(16)*VALI3P(59)+VALI3P(75)
  122 VALIP(122)=CCP(13)*VALI3P(10)+CCP(14)*VALI3P(26)+CCP(15)*VALI3P(42
     $)+CCP(16)*VALI3P(58)+VALI3P(74)
  121 VALIP(121)=CCP(13)*VALI3P(9)+CCP(14)*VALI3P(25)+CCP(15)*VALI3P(41)
     $+CCP(16)*VALI3P(57)+VALI3P(73)
 3242 GO TO(117,118,119,120),LDMAX
  120 VALIP(120)=CCP(13)*VALI3P(8)+CCP(14)*VALI3P(24)+CCP(15)*VALI3P(40)
     $+CCP(16)*VALI3P(56)+VALI3P(72)
  119 VALIP(119)=CCP(13)*VALI3P(7)+CCP(14)*VALI3P(23)+CCP(15)*VALI3P(39)
     $+CCP(16)*VALI3P(55)+VALI3P(71)
  118 VALIP(118)=CCP(13)*VALI3P(6)+CCP(14)*VALI3P(22)+CCP(15)*VALI3P(38)
     $+CCP(16)*VALI3P(54)+VALI3P(70)
  117 VALIP(117)=CCP(13)*VALI3P(5)+CCP(14)*VALI3P(21)+CCP(15)*VALI3P(37)
     $+CCP(16)*VALI3P(53)+VALI3P(69)
 3241 GO TO(113,114,115,116),LDMAX
  116 VALIP(116)=CCP(13)*VALI3P(4)+CCP(14)*VALI3P(20)+CCP(15)*VALI3P(36)
     $+CCP(16)*VALI3P(52)+VALI3P(68)
  115 VALIP(115)=CCP(13)*VALI3P(3)+CCP(14)*VALI3P(19)+CCP(15)*VALI3P(35)
     $+CCP(16)*VALI3P(51)+VALI3P(67)
  114 VALIP(114)=CCP(13)*VALI3P(2)+CCP(14)*VALI3P(18)+CCP(15)*VALI3P(34)
     $+CCP(16)*VALI3P(50)+VALI3P(66)
  113 VALIP(113)=CCP(13)*VALI3P(1)+CCP(14)*VALI3P(17)+CCP(15)*VALI3P(33)
     $+CCP(16)*VALI3P(49)+VALI3P(65)
 2023 GO TO(3231,3232,3233,3234),LCMAX
 3234 GO TO(109,110,111,112),LDMAX
  112 VALIP(112)=CCP(10)*VALI3P(16)+CCP(11)*VALI3P(32)+CCP(12)*VALI3P(48
     $)+VALI3P(64)
  111 VALIP(111)=CCP(10)*VALI3P(15)+CCP(11)*VALI3P(31)+CCP(12)*VALI3P(47
     $)+VALI3P(63)
  110 VALIP(110)=CCP(10)*VALI3P(14)+CCP(11)*VALI3P(30)+CCP(12)*VALI3P(46
     $)+VALI3P(62)
  109 VALIP(109)=CCP(10)*VALI3P(13)+CCP(11)*VALI3P(29)+CCP(12)*VALI3P(45
     $)+VALI3P(61)
 3233 GO TO(105,106,107,108),LDMAX
  108 VALIP(108)=CCP(10)*VALI3P(12)+CCP(11)*VALI3P(28)+CCP(12)*VALI3P(44
     $)+VALI3P(60)
  107 VALIP(107)=CCP(10)*VALI3P(11)+CCP(11)*VALI3P(27)+CCP(12)*VALI3P(43
     $)+VALI3P(59)
  106 VALIP(106)=CCP(10)*VALI3P(10)+CCP(11)*VALI3P(26)+CCP(12)*VALI3P(42
     $)+VALI3P(58)
  105 VALIP(105)=CCP(10)*VALI3P(9)+CCP(11)*VALI3P(25)+CCP(12)*VALI3P(41)
     $+VALI3P(57)
 3232 GO TO(101,102,103,104),LDMAX
  104 VALIP(104)=CCP(10)*VALI3P(8)+CCP(11)*VALI3P(24)+CCP(12)*VALI3P(40)
     $+VALI3P(56)
  103 VALIP(103)=CCP(10)*VALI3P(7)+CCP(11)*VALI3P(23)+CCP(12)*VALI3P(39)
     $+VALI3P(55)
  102 VALIP(102)=CCP(10)*VALI3P(6)+CCP(11)*VALI3P(22)+CCP(12)*VALI3P(38)
     $+VALI3P(54)
  101 VALIP(101)=CCP(10)*VALI3P(5)+CCP(11)*VALI3P(21)+CCP(12)*VALI3P(37)
     $+VALI3P(53)
 3231 GO TO( 97, 98, 99,100),LDMAX
  100 VALIP(100)=CCP(10)*VALI3P(4)+CCP(11)*VALI3P(20)+CCP(12)*VALI3P(36)
     $+VALI3P(52)
   99 VALIP(99)=CCP(10)*VALI3P(3)+CCP(11)*VALI3P(19)+CCP(12)*VALI3P(35)+
     $VALI3P(51)
   98 VALIP(98)=CCP(10)*VALI3P(2)+CCP(11)*VALI3P(18)+CCP(12)*VALI3P(34)+
     $VALI3P(50)
   97 VALIP(97)=CCP(10)*VALI3P(1)+CCP(11)*VALI3P(17)+CCP(12)*VALI3P(33)+
     $VALI3P(49)
 2022 GO TO(3221,3222,3223,3224),LCMAX
 3224 GO TO( 93, 94, 95, 96),LDMAX
   96 VALIP(96)=CCP(8)*VALI3P(16)+CCP(9)*VALI3P(32)+VALI3P(48)
   95 VALIP(95)=CCP(8)*VALI3P(15)+CCP(9)*VALI3P(31)+VALI3P(47)
   94 VALIP(94)=CCP(8)*VALI3P(14)+CCP(9)*VALI3P(30)+VALI3P(46)
   93 VALIP(93)=CCP(8)*VALI3P(13)+CCP(9)*VALI3P(29)+VALI3P(45)
 3223 GO TO( 89, 90, 91, 92),LDMAX
   92 VALIP(92)=CCP(8)*VALI3P(12)+CCP(9)*VALI3P(28)+VALI3P(44)
   91 VALIP(91)=CCP(8)*VALI3P(11)+CCP(9)*VALI3P(27)+VALI3P(43)
   90 VALIP(90)=CCP(8)*VALI3P(10)+CCP(9)*VALI3P(26)+VALI3P(42)
   89 VALIP(89)=CCP(8)*VALI3P(9)+CCP(9)*VALI3P(25)+VALI3P(41)
 3222 GO TO( 85, 86, 87, 88),LDMAX
   88 VALIP(88)=CCP(8)*VALI3P(8)+CCP(9)*VALI3P(24)+VALI3P(40)
   87 VALIP(87)=CCP(8)*VALI3P(7)+CCP(9)*VALI3P(23)+VALI3P(39)
   86 VALIP(86)=CCP(8)*VALI3P(6)+CCP(9)*VALI3P(22)+VALI3P(38)
   85 VALIP(85)=CCP(8)*VALI3P(5)+CCP(9)*VALI3P(21)+VALI3P(37)
 3221 GO TO( 81, 82, 83, 84),LDMAX
   84 VALIP(84)=CCP(8)*VALI3P(4)+CCP(9)*VALI3P(20)+VALI3P(36)
   83 VALIP(83)=CCP(8)*VALI3P(3)+CCP(9)*VALI3P(19)+VALI3P(35)
   82 VALIP(82)=CCP(8)*VALI3P(2)+CCP(9)*VALI3P(18)+VALI3P(34)
   81 VALIP(81)=CCP(8)*VALI3P(1)+CCP(9)*VALI3P(17)+VALI3P(33)
 2021 GO TO(3211,3212,3213,3214),LCMAX
 3214 GO TO( 77, 78, 79, 80),LDMAX
   80 VALIP(80)=CCP(7)*VALI3P(16)+VALI3P(32)
   79 VALIP(79)=CCP(7)*VALI3P(15)+VALI3P(31)
   78 VALIP(78)=CCP(7)*VALI3P(14)+VALI3P(30)
   77 VALIP(77)=CCP(7)*VALI3P(13)+VALI3P(29)
 3213 GO TO( 73, 74, 75, 76),LDMAX
   76 VALIP(76)=CCP(7)*VALI3P(12)+VALI3P(28)
   75 VALIP(75)=CCP(7)*VALI3P(11)+VALI3P(27)
   74 VALIP(74)=CCP(7)*VALI3P(10)+VALI3P(26)
   73 VALIP(73)=CCP(7)*VALI3P(9)+VALI3P(25)
 3212 GO TO( 69, 70, 71, 72),LDMAX
   72 VALIP(72)=CCP(7)*VALI3P(8)+VALI3P(24)
   71 VALIP(71)=CCP(7)*VALI3P(7)+VALI3P(23)
   70 VALIP(70)=CCP(7)*VALI3P(6)+VALI3P(22)
   69 VALIP(69)=CCP(7)*VALI3P(5)+VALI3P(21)
 3211 GO TO( 65, 66, 67, 68),LDMAX
   68 VALIP(68)=CCP(7)*VALI3P(4)+VALI3P(20)
   67 VALIP(67)=CCP(7)*VALI3P(3)+VALI3P(19)
   66 VALIP(66)=CCP(7)*VALI3P(2)+VALI3P(18)
   65 VALIP(65)=CCP(7)*VALI3P(1)+VALI3P(17)
 1001 GO TO(2011,2012,2013,2014),LBMAX
 2014 GO TO(3141,3142,3143,3144),LCMAX
 3144 GO TO( 61, 62, 63, 64),LDMAX
   64 VALIP(64)=CCP(4)*VALI3P(16)+CCP(5)*VALI3P(32)+CCP(6)*VALI3P(48)+VA
     $LI3P(64)
   63 VALIP(63)=CCP(4)*VALI3P(15)+CCP(5)*VALI3P(31)+CCP(6)*VALI3P(47)+VA
     $LI3P(63)
   62 VALIP(62)=CCP(4)*VALI3P(14)+CCP(5)*VALI3P(30)+CCP(6)*VALI3P(46)+VA
     $LI3P(62)
   61 VALIP(61)=CCP(4)*VALI3P(13)+CCP(5)*VALI3P(29)+CCP(6)*VALI3P(45)+VA
     $LI3P(61)
 3143 GO TO( 57, 58, 59, 60),LDMAX
   60 VALIP(60)=CCP(4)*VALI3P(12)+CCP(5)*VALI3P(28)+CCP(6)*VALI3P(44)+VA
     $LI3P(60)
   59 VALIP(59)=CCP(4)*VALI3P(11)+CCP(5)*VALI3P(27)+CCP(6)*VALI3P(43)+VA
     $LI3P(59)
   58 VALIP(58)=CCP(4)*VALI3P(10)+CCP(5)*VALI3P(26)+CCP(6)*VALI3P(42)+VA
     $LI3P(58)
   57 VALIP(57)=CCP(4)*VALI3P(9)+CCP(5)*VALI3P(25)+CCP(6)*VALI3P(41)+VAL
     $I3P(57)
 3142 GO TO( 53, 54, 55, 56),LDMAX
   56 VALIP(56)=CCP(4)*VALI3P(8)+CCP(5)*VALI3P(24)+CCP(6)*VALI3P(40)+VAL
     $I3P(56)
   55 VALIP(55)=CCP(4)*VALI3P(7)+CCP(5)*VALI3P(23)+CCP(6)*VALI3P(39)+VAL
     $I3P(55)
   54 VALIP(54)=CCP(4)*VALI3P(6)+CCP(5)*VALI3P(22)+CCP(6)*VALI3P(38)+VAL
     $I3P(54)
   53 VALIP(53)=CCP(4)*VALI3P(5)+CCP(5)*VALI3P(21)+CCP(6)*VALI3P(37)+VAL
     $I3P(53)
 3141 GO TO( 49, 50, 51, 52),LDMAX
   52 VALIP(52)=CCP(4)*VALI3P(4)+CCP(5)*VALI3P(20)+CCP(6)*VALI3P(36)+VAL
     $I3P(52)
   51 VALIP(51)=CCP(4)*VALI3P(3)+CCP(5)*VALI3P(19)+CCP(6)*VALI3P(35)+VAL
     $I3P(51)
   50 VALIP(50)=CCP(4)*VALI3P(2)+CCP(5)*VALI3P(18)+CCP(6)*VALI3P(34)+VAL
     $I3P(50)
   49 VALIP(49)=CCP(4)*VALI3P(1)+CCP(5)*VALI3P(17)+CCP(6)*VALI3P(33)+VAL
     $I3P(49)
 2013 GO TO(3131,3132,3133,3134),LCMAX
 3134 GO TO( 45, 46, 47, 48),LDMAX
   48 VALIP(48)=CCP(2)*VALI3P(16)+CCP(3)*VALI3P(32)+VALI3P(48)
   47 VALIP(47)=CCP(2)*VALI3P(15)+CCP(3)*VALI3P(31)+VALI3P(47)
   46 VALIP(46)=CCP(2)*VALI3P(14)+CCP(3)*VALI3P(30)+VALI3P(46)
   45 VALIP(45)=CCP(2)*VALI3P(13)+CCP(3)*VALI3P(29)+VALI3P(45)
 3133 GO TO( 41, 42, 43, 44),LDMAX
   44 VALIP(44)=CCP(2)*VALI3P(12)+CCP(3)*VALI3P(28)+VALI3P(44)
   43 VALIP(43)=CCP(2)*VALI3P(11)+CCP(3)*VALI3P(27)+VALI3P(43)
   42 VALIP(42)=CCP(2)*VALI3P(10)+CCP(3)*VALI3P(26)+VALI3P(42)
   41 VALIP(41)=CCP(2)*VALI3P(9)+CCP(3)*VALI3P(25)+VALI3P(41)
 3132 GO TO( 37, 38, 39, 40),LDMAX
   40 VALIP(40)=CCP(2)*VALI3P(8)+CCP(3)*VALI3P(24)+VALI3P(40)
   39 VALIP(39)=CCP(2)*VALI3P(7)+CCP(3)*VALI3P(23)+VALI3P(39)
   38 VALIP(38)=CCP(2)*VALI3P(6)+CCP(3)*VALI3P(22)+VALI3P(38)
   37 VALIP(37)=CCP(2)*VALI3P(5)+CCP(3)*VALI3P(21)+VALI3P(37)
 3131 GO TO( 33, 34, 35, 36),LDMAX
   36 VALIP(36)=CCP(2)*VALI3P(4)+CCP(3)*VALI3P(20)+VALI3P(36)
   35 VALIP(35)=CCP(2)*VALI3P(3)+CCP(3)*VALI3P(19)+VALI3P(35)
   34 VALIP(34)=CCP(2)*VALI3P(2)+CCP(3)*VALI3P(18)+VALI3P(34)
   33 VALIP(33)=CCP(2)*VALI3P(1)+CCP(3)*VALI3P(17)+VALI3P(33)
 2012 GO TO(3121,3122,3123,3124),LCMAX
 3124 GO TO( 29, 30, 31, 32),LDMAX
   32 VALIP(32)=CCP(1)*VALI3P(16)+VALI3P(32)
   31 VALIP(31)=CCP(1)*VALI3P(15)+VALI3P(31)
   30 VALIP(30)=CCP(1)*VALI3P(14)+VALI3P(30)
   29 VALIP(29)=CCP(1)*VALI3P(13)+VALI3P(29)
 3123 GO TO( 25, 26, 27, 28),LDMAX
   28 VALIP(28)=CCP(1)*VALI3P(12)+VALI3P(28)
   27 VALIP(27)=CCP(1)*VALI3P(11)+VALI3P(27)
   26 VALIP(26)=CCP(1)*VALI3P(10)+VALI3P(26)
   25 VALIP(25)=CCP(1)*VALI3P(9)+VALI3P(25)
 3122 GO TO( 21, 22, 23, 24),LDMAX
   24 VALIP(24)=CCP(1)*VALI3P(8)+VALI3P(24)
   23 VALIP(23)=CCP(1)*VALI3P(7)+VALI3P(23)
   22 VALIP(22)=CCP(1)*VALI3P(6)+VALI3P(22)
   21 VALIP(21)=CCP(1)*VALI3P(5)+VALI3P(21)
 3121 GO TO( 17, 18, 19, 20),LDMAX
   20 VALIP(20)=CCP(1)*VALI3P(4)+VALI3P(20)
   19 VALIP(19)=CCP(1)*VALI3P(3)+VALI3P(19)
   18 VALIP(18)=CCP(1)*VALI3P(2)+VALI3P(18)
   17 VALIP(17)=CCP(1)*VALI3P(1)+VALI3P(17)
 2011 GO TO(3111,3112,3113,3114),LCMAX
 3114 GO TO( 13, 14, 15, 16),LDMAX
   16 VALIP(16)=VALI3P(16)
   15 VALIP(15)=VALI3P(15)
   14 VALIP(14)=VALI3P(14)
   13 VALIP(13)=VALI3P(13)
 3113 GO TO(  9, 10, 11, 12),LDMAX
   12 VALIP(12)=VALI3P(12)
   11 VALIP(11)=VALI3P(11)
   10 VALIP(10)=VALI3P(10)
    9 VALIP(9)=VALI3P(9)
 3112 GO TO(  5,  6,  7,  8),LDMAX
    8 VALIP(8)=VALI3P(8)
    7 VALIP(7)=VALI3P(7)
    6 VALIP(6)=VALI3P(6)
    5 VALIP(5)=VALI3P(5)
 3111 GO TO(  1,  2,  3,  4),LDMAX
    4 VALIP(4)=VALI3P(4)
    3 VALIP(3)=VALI3P(3)
    2 VALIP(2)=VALI3P(2)
    1 VALIP(1)=VALI3P(1)
      RETURN
      END
