C     GL0901       16 OCT 87                                         MRP
C?IBM/GLD/GBR/VAX/UNX
      SUBROUTINE INTRAN
C??
C?CDC
C     PROGRAM INTRAN
C??
C=CONFIGURATION INTERACTION
C CHAPTER 14: CONFIGURATION INTERACTION.
C ***********
C
C1INTRODUCTION
C     LINK 0901
C*
C     INTEGRAL TRANSFORMATION FROM THE AO TO MO BASIS.
C*
C     AUTHOR: R.A. POIRIER, DEPT. OF CHEMISTRY, U OF TORONTO, CANADA.
C*
C     THIS PROGRAM SORTS THE MO VECTORS BY USER-SPECIFIED GROUPS, THEN
C     TRANSFORMS THE OVERLAP (S), CORE HAMILTONIAN (H) AND 2-ELECTRON
C     INTEGRALS TO THE MO BASIS. THE H AND 2-E INTEGRALS ARE SAVED ON
C     UNIT IMOINT. THE FIRST RECORD IS THE H MATRIX, WRITTEN BY
C     COLUMNS OF THE UPPER TRIANGLE. THE S MATRIX IS NOT SAVED.
C     THE REMAINING RECORDS ARE ALL THE 2-ELECTRON INTEGRALS, IN BLOCKS
C     OF 900, WRITTEN IN STANDARD ORDER WITH NO LABELS.
C     UNIT ISCRCH IS USED FOR SCRATCH.
C*
C     THE NUMBER OF TRANSFORMED MO IS SAVED IN IOP(93).
C*
C     THE INTEGRAL TRANSFORMATION ONLY USES THE ALPHA SPIN MO
C     VECTORS (COEFFICIENTS) - THUS IT WILL WORK FOR CLOSED SHELL CASES,
C     AND FOR RHF OPEN SHELL CASES, BUT NOT FOR UHF WAVEFUNCTIONS.
C*
C     INPUT REQUIREMENTS
C
C     IGROUP(I),I=1,NBASIS  (36I2).
C     IGROUP IS USED TO REARRANGE THE MO VECTORS AND ORBITAL ENERGIES.
C     FIRST, ALL THE MO WITH IGROUP(I)=1 ARE COLLECTED, THEN THOSE WITH
C     IGROUP(I)=2, ETC. WITHIN EACH GROUP, THE MO ARE ORDERED BY
C     INCREASING ORBITAL ENERGY. IGROUP(I)=0 MAY BE USED TO ELIMINATE
C     MO I COMPLETELY. THE VALUES USED IN IGROUP NEED NOT BE SEQUENTIAL.
C     FOR USE WITH THE CI PROGRAM, THE GROUPS ARE THE IRREDUCIBLE
C     REPRESENTATIONS OF THE MOLECULAR POINT GROUP (C1, CS, C2, CI,
C     C2V, C2H, D2 OR D2H), AND *ALL* THE OCCUPIED MO MUST PRECEDE
C     *ALL* THE VIRTUAL ORBITALS.
C
C=CONFIGURATION INTERACTION
C     THE GROUP CODES FOR THE VARIOUS POINT GROUP IRREDUCIBLE
C     REPRESENTATIONS ARE:
C
C     POINT GROUP   IRRED. REP.   OCCUPIED MO   VIRTUAL MO
C     -----------   -----------   -----------   ----------
C
C         C1             A             1             2 (OR 1)
C
C         CS             A'            1             3
C                        A"            2             4
C
C         C2             A             1             3
C                        B             2             4
C
C         CI             AG            1             3
C                        AU            2             4
C
C         C2V            A1            1             5
C                        A2            2             6
C                        B1            3             7
C                        B2            4             8
C
C         C2H            AG            1             5
C                        AU            2             6
C                        BG            3             7
C                        BU            4             8
C
C         D2             A             1             5
C                        B1            2             6
C                        B2            3             7
C                        B3            4             8
C
C         D2H            AG            1             9
C                        AU            2            10
C                        B1G           3            11
C                        B1U           4            12
C                        B2G           5            13
C                        B2U           6            14
C                        B3G           7            15
C                        B3U           8            16
C
C     AS AN EXAMPLE, CONSIDER WATER (IN C2V SYMMETRY) WITH THE
C     FOLLOWING MO:
C     A1 A1 B2 A1 B1 A1 B2 B1 A1 B2 A1 B2 A1 A1.
C     NOTE THAT ONLY THE FIRST 5 MO ARE OCCUPIED. TO SORT THE OCCUPIED
C     AND VIRTUAL ORBITALS INDEPENDENTLY BY SYMMETRY, IGROUP COULD BE:
C      1 1 4 1 3 5 8 7 5 8 5 8 5 0
C     WHERE GROUP 1 IS THE OCCUPIED A1 MO, 2 IS THE (NON-EXISTANT)
C     OCCUPIED A2 MO, 3 IS THE OCCUPIED B1 MO, 4 IS THE OCCUPIED B2 MO,
C     5 IS THE VIRTUAL A1 MO, 6 IS THE (NON-EXISTANT) VIRTUAL A2 MO,
C     7 IS THE VIRTUAL B1 MO AND 8 IS THE VIRTUAL B2 MO. MO 14 IS TO
C     BE DROPPED FROM THE TRANSFORMATION. THE RESULTING MO ORDER IS:
C     1 2 4 3 5 6 9 11 13 7 10 12 8.
C     NOTE THAT IF NBASIS IS GREATER THAN 36, 2 OR MORE CARDS MUST BE
C     SUPPLIED FOR IGROUP (36 VALUES PER CARD).
C*
C=CONFIGURATION INTERACTION
C1OPTIONS
C     ******************************************************************
C     OPTIONS ... IOP()
C     ******************************************************************
C     IOP(13) ... CALCULATION OF ELECTRONIC ENERGY AFTER TRANSFORMATION.
C     0  NO.
C     1  YES.
C     NOTE: THIS OPTION SHOULD NOT BE USED IF ANY CORE MO ARE DELETED,
C     OR ANY VIRTUAL MO PRECEDE ANY OCCUPIED MO AFTER SORTING,
C     OR FOR OPEN SHELL WAVEFUNCTIONS.
C
C     IOP(14) ... PRINTING OF TRANSFORMED INTEGRALS.
C     0  NO.
C     1  YES - PRINT S, H AND 2-ELECTRON INTEGRALS.
C
C     IOP(15) ... DUMP OF CI COUPLING COEFFICIENTS (LINK 0902).
C     0  NO.
C     1  YES.
C
C     IOP(16) ... ENTRY TYPE.
C     0  INITIAL ENTRY - DATA READ FROM CARDS.
C     1  SUBSEQUENT ENTRY - DATA READ FROM DISK.
C
C     IOP(17) ... PRINT CI FOCK MATRICES (LINK 0904).
C     0  NO.
C     1  YES.
C
C     IOP(18) ... STORE CI ENERGY FOR USE IN OPTIMIZATIONS.
C     0  NO.
C     1  YES - SAVE TOTAL SINGLES AND DOUBLES CI ENERGY.
C     2  YES - SAVE ESTIMATED CI ENERGY FOR SINGLES, DOUBLES AND
C     QUADRUPLES.
C
C     IOP(19) ... PRINT CONTROL.
C     0  NORMAL.
C     1  ONLY PRINT FINAL CI ENERGIES.
C     2  NO PRINTING.
C     NOTE: THIS OPTION DOES NOT OVER-RIDE OPTIONS 13, 14, 15, 17 OR 21.
C
C     IOP(20) ... ONE ELECTRON PROPERTIES.
C     0  TRANSFORM AO INTEGRALS TO MO INTEGRALS FOR OEP.
C     1  PERFORM AN ATOMIC MULTIPOLE DECOMPOSITION.
C
C     IOP(21) ... PRINT CI EXPANSION COEFFICIENTS.
C     0  PRINT ONLY C0 (COEFFICIENT OF ROOT CONFIGURATION).
C     N  PRINT ONLY COEFFICIENTS LARGER THAN 10**-N, FOR N=1,2,3,4,5,6.
C     7  PRINT ALL COEFFICIENTS.
C     NOTE THAT THE COEFFICIENTS ARE PRINTED WITHOUT IDENTIFYING WHAT
C     CONFIGURATION THEY REFER TO - THIS OPTION IS ONLY REALLY USEFUL
C     FOR VERY SMALL CI EXPANSIONS, WHERE THE CONFIGURATIONS ARE KNOWN
C     FROM FIRST PRINCIPLES.
C
C     IOP(22) TO IOP(60) ... NOT USED.
C     ******************************************************************
C==
C*
C/
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C#
C     PARAMETER (NA=#NA)
C     PARAMETER (NT=#NT)
C##
      PARAMETER (NA= 36)
      PARAMETER (NT= 70)
C###
      PARAMETER (NT1=NT*(NT+1)/2, NT3=NT*NT*(NT+1)/2)
C
      COMMON /A/ IOP(99)
      COMMON /A/ NATOMS,ICHARG,MULTIP,IAN(NA),NAE,NBE,NE,NBASIS,C(NA,3)
      COMMON /A/ CDUM(4),IDUM(401)
      COMMON/TRAN1/Y(NT,NT),NMO,NRS,NCS,IQCODE(NT),
     1 NCODE(NT),NMAX
      COMMON/TRAN2/X(NT,NT),E(NT),F(NT),IGROUP(NT)
      COMMON/TRAN3/IX(3072,2)
      COMMON/IO/IN,IOUT,IPUNCH,IMAT,ITWOEL,
     1 IMOINT,ISCRCH,IODUMC(10),NFILE(100,2)
C
      DIMENSION FILL2(NT3),G(NT1)
C
      EQUIVALENCE (X(1,1),FILL2(1)), (G(1),IX(1,1))
C
 1000 FORMAT(36I2)
 1010 FORMAT(1X,36I3)
 1020 FORMAT('0PROBLEM IS TOO LARGE, MAXIMUM IS',I3,' BASIS FUNCTIONS')
 1030 FORMAT('1',33('*')/' *INTEGRAL TRANSFORMATION PACKAGE*'/
     1 1X,33('*')//'0GROUP SPECIFICATION:'/)
 1040 FORMAT('0INTRAN NOT POSSIBLE FOR UHF WAVEFUNCTIONS')
 1050 FORMAT(/'0TRANSFORM',I3,' MO')
 1060 FORMAT('0*** CI NOT POSSIBLE FOR SCRFT RUNS ***')
C
      NMAX=NT
      IF(IOP(9).EQ.0.OR.IOP(9).EQ.2)GO TO 5
      WRITE(IOUT,1040)
      IOP(1)=-2
      RETURN
C
    5 IF(IOP(19).EQ.0)WRITE(IOUT,1030)
      IF(NBASIS.LE.NMAX)GO TO 10
      WRITE(IOUT,1020)NMAX
      IOP(1)=-2
      RETURN
C
   10 IF(IOP(10).NE.0)CALL TREAD(25,X,NMAX,NMAX,NBASIS,NBASIS,0)
      IF(IOP(16).EQ.0)READ(IN,1000)(IGROUP(I),I=1,NBASIS)
      IF(IOP(10).NE.0)CALL TREAD(5,E,NMAX,1,NBASIS,1,0)
      IF(IOP(16).EQ.1)CALL TREAD(12,F,NFILE(12,1),1,NFILE(12,1),1,0)
      IF(IOP(19).EQ.0)WRITE(IOUT,1010)(IGROUP(I),I=1,NBASIS)
      NMO=0
      DO 25 IG=1,99
      DO 25 I=1,NBASIS
      IF(IGROUP(I).NE.IG)GO TO 25
      NMO=NMO+1
      IF(IOP(10).EQ.0)GO TO 25
      F(NMO)=E(I)
      DO 20 J=1,NBASIS
   20 Y(NMO,J)=X(J,I)
   25 CONTINUE
      IOP(93)=NMO
      IF(IOP(19).EQ.0)WRITE(IOUT,1050)NMO
      NCS=NBASIS*(NBASIS+1)/2
      NRS=NMO*(NMO+1)/2
C
C     SET INDEXING ARRAYS:
C     NCODE(I)=NCS*(I-1)
C     IQCODE(I)=I*(I-1)/2
C
      IQCODE(1)=0
      NCODE(1)=0
      IF(NBASIS.EQ.1)GO TO 40
      DO 30 I=2,NBASIS
      NCODE(I)=NCODE(I-1)+NCS
   30 IQCODE(I)=IQCODE(I-1)+I-1
C
   40 REWIND ITWOEL
      REWIND IMOINT
      REWIND ISCRCH
      IF (IOP(3) .GE. 2) GO TO 900
      IF(IOP(10).EQ.0)RETURN
      CALL TWRITE(12,F,NFILE(12,1),1,NFILE(12,1),1,0)
      CALL TR1
      CALL GF1
      IF (IOP(1) .NE. 0) RETURN
      CALL TR2
      CALL INTPRT
      RETURN
  900 WRITE(IOUT,1060)
      IOP(1)=-2
      RETURN
      END
      SUBROUTINE TR1
C
C     PERFORM ONE-ELECTRON TRANSFORM.
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C#
C     PARAMETER (NA=#NA)
C     PARAMETER (NT=#NT)
C##
      PARAMETER (NA= 36)
      PARAMETER (NT= 70)
C###
      PARAMETER (NT1=NT*(NT+1)/2, NT3=NT*NT*(NT+1)/2)
      PARAMETER (ZERO=0.0D0)
C
      COMMON /A/ IOP(99)
      COMMON /A/ NATOMS,ICHARG,MULTIP,IAN(NA),NAE,NBE,NE,NBASIS,C(NA,3)
      COMMON /A/ CDUM(4),IDUM(401)
      COMMON/TRAN1/Y(NT,NT),NMO,NRS,NCS,IQCODE(NT),
     1 NCODE(NT),NMAX
      COMMON/TRAN2/S(NT1),H(NT1),DELS(NT,NT),DELH(NT,NT),
     1 SOUT(NT,NT)
      COMMON/GEN/E(6),DCONV,SPIN(2),FIELD(3),FE,EMOL,ESOL,DPOLE(4),VCM
      COMMON/IO/IN,IOUT,IODUM1(3),IMOINT,IODUM2(211)
C
      DIMENSION FILL2(NT3)
C
      EQUIVALENCE (FILL2(1),S(1))
C*
 1000 FORMAT('1TRANSFORMED S INTEGRALS'//)
C*
      N=NMAX*(NMAX+1)/2
      CALL TREAD(13,H,N,1,NCS,1,0)
      IF (IOP(3) .EQ. 0) GO TO 200
C
C     ADD ELECTRIC FIELD CONTRIBUTION TO CORE HAMILTONIAN.
C
      DO 110 J=1,3
      CALL TREAD(33+J,S,N,1,NCS,1,0)
      FX=FIELD(J)
      DO 110 I=1,NCS
  110 H(I) = H(I) + FX * S(I)
C
  200 CALL TREAD(8,S,N,1,NCS,1,0)
      DO 210 J=1,NBASIS
      DO 210 I=1,NMO
      DELH(I,J)=ZERO
  210 DELS(I,J)=ZERO
C
      IJ = 0
      DO 230 I=1,NBASIS
      DO 230 J=1,I
      IJ = IJ + 1
      DO 220 IR=1,NMO
      DELS(IR,I) = DELS(IR,I) + Y(IR,J)*S(IJ)
      DELH(IR,I) = DELH(IR,I) + Y(IR,J)*H(IJ)
      IF(I.EQ.J)GO TO 220
      DELS(IR,J) = DELS(IR,J) + Y(IR,I)*S(IJ)
      DELH(IR,J) = DELH(IR,J) + Y(IR,I)*H(IJ)
  220 CONTINUE
  230 CONTINUE
C
      N = 0
      DO 250 IR=1,NMO
      DO 250 IS=1,IR
      N = N + 1
      SUMS=ZERO
      SUMH=ZERO
      DO 240 I=1,NBASIS
      SUMS=SUMS+DELS(IR,I)*Y(IS,I)
  240 SUMH=SUMH+DELH(IR,I)*Y(IS,I)
      SOUT(IR,IS)=SUMS
      SOUT(IS,IR)=SUMS
  250 H(N)=SUMH
C
      WRITE(IMOINT)(H(K),K=1,NRS)
      IF(IOP(14).NE.1)RETURN
      WRITE(IOUT,1000)
      CALL MATOUT(SOUT,NMAX,NMAX,NMO,NMO)
      RETURN
      END
      SUBROUTINE GF1
C
C     PERFORM TWO ELECTRON TRANSFORMATION, IN TWO STAGES.
C
C     IN FIRST STAGE OF 2-ELECTRON TRANSFORM, FORM
C     (IQ/RS)= SUM Y(I,P)*(PQ/RS)
C     WHERE Q, R AND S EXTEND OVER ALL AO.
C
C     IN THE SECOND STAGE (IQ/RS) ARE SUMMED TO CALCULATE (IJ/RS)
C     ALL (IJ/RS) ARE WRITTEN AS MATRIX G.
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C#
C     PARAMETER (NA=#NA)
C     PARAMETER (NT=#NT)
C##
      PARAMETER (NA= 36)
      PARAMETER (NT= 70)
C###
      PARAMETER (NT1=NT*(NT+1)/2, NT3=NT*NT*(NT+1)/2)
      PARAMETER (ZERO=0.0D0)
C
      LOGICAL USEOFF
C
      COMMON /A/ IOP(99)
      COMMON /A/ NATOMS,ICHARG,MULTIP,IAN(NA),NAE,NBE,NE,NBASIS,C(NA,3)
      COMMON /A/ CDUM(4),IDUM(401)
      COMMON/TRAN1/Y(NT,NT),NMO,NRS,NCS,IQCODE(NT),
     1 NCODE(NT),NMAX
      COMMON/BSINFO/NVO(NA),IAOFF(NA)
      COMMON/TRAN2/B(NT3)
      COMMON/TRAN3/IX(3072,2)
      COMMON/IO/IN,IOUT,IPUNCH,IMAT,ITWOEL,
     1 IMOINT,ISCRCH,IODUMC(210)
      COMMON/PACKED/I,J,K,L,JA
C
      DIMENSION G(NT1), IV(2)
C
      EQUIVALENCE (IX(1,1),G(1)), (V,IV(1))
C
C?IBM/GLD/GBR/VAX/UNX 3 WORDS PER LABEL/INTEGRAL.
      DATA NWORDS/3/,MAXBUF/3070/
C??
C?CDC 2 WORDS PER LABEL/INTEGRAL, OFFSETS ARE NEVER USED.
C     DATA NWORDS/2/,MAXBUF/3071/,USEOFF/.FALSE./
C??
C?IBM/GLD/GBR/VAX/UNX USE OFFSETS IF REQUIRED.
      USEOFF = NBASIS .GT. 127
C??
      NTINT=NBASIS*NBASIS*(NBASIS+1)/2
C
C     LOOP OVER EACH MO TO BE TRANSFORMED.
C
      DO 900 IR=1,NMO
C
C     SETUP FOR DOUBLE BUFFERING (ASYNCHRONOUS I/O).
C     LBUFF IS THE CURRENT BUFFER NUMBER (BEING UNPACKED).
C     NBUFF IS THE NEXT BUFFER NUMBER (I/O IN PROGRESS).
C
      NBUFF = 1
      CALL NWIORD (ITWOEL, IX(1,NBUFF), 3072, .FALSE., 'GF1',
     1 IOP(1), *9000)
      DO 10 NINT=1,NTINT
   10 B(NINT)=ZERO
C
C     WAIT FOR PREVIOUS BUFFER TO BE READ, THEN START READING THE NEXT
C     ONE.
C
   20 LBUFF = NBUFF
      CALL NWIOWT (ITWOEL, 3072, .FALSE., 'GF1', IOP(1), *9000)
      NBUFF = 3 - NBUFF
      CALL NWIORD (ITWOEL, IX(1,NBUFF), 3072, .FALSE., 'GF1',
     1 IOP(1), *9000)
      DO 30 NINT=1,MAXBUF,NWORDS
      JA=IX(NINT,LBUFF)
      IV(1)=IX(NINT+1,LBUFF)
C?IBM/GLD/GBR/VAX/UNX
      IV(2)=IX(NINT+2,LBUFF)
C??
      IF(JA)41,90,40
C
C     TYPE 1 INTEGRAL (AB I CD) - ADD ATOM OFFSETS.
C
C?GLD/GBR/IBM/VAX/CDC
C  40 CALL UNPACK
C??
C?UNX
   40 CALL UNPACK (JA, I, J, K, L)
C??
      IF (USEOFF) THEN
         I=I+IOFF
         J=J+JOFF
         K=K+KOFF
         L=L+LOFF
      END IF
      KL=IQCODE(K)+L
      NI=NCODE(I)+KL
      B(NI)=B(NI)+(Y(IR,J)*V)
      NJ=NCODE(J)+KL
      B(NJ)=B(NJ)+(Y(IR,I)*V)
      IJ=IQCODE(I)+J
      NK=NCODE(K)+IJ
      B(NK)=B(NK)+(Y(IR,L)*V)
      NL=NCODE(L)+IJ
      B(NL)=B(NL)+(Y(IR,K)*V)
      GO TO 30
C
C     TYPE 2 INTEGRAL - BRANCH TO APPROPRIATE CODE DEPENDING ON L.
C
   41 JA=-JA
C?GLD/GBR/IBM/VAX/CDC
C     CALL UNPACK
C??
C?UNX
      CALL UNPACK (JA, I, J, K, L)
C??
      IF (USEOFF) GO TO 42
C     DO NOT USE OFFSETS.
      GO TO (51,201,211,71,81,61,44,121),L
C     USE OFFSETS.
   42 GO TO (50,200,210,70,80,60,43,120),L
C
C     TYPE 2, INDEX=7 (SINDX=6) HAS 3 SUB-CASES DETERMINED BY K (MINDX).
C
   43 I=I+IOFF
      J=J+LOFF
   44 IF (K-2) 65,66,67
C
C     (AB I AC)
C
   50 I=I+IOFF
      J=J+JOFF
      K=K+LOFF
   51 KL=IQCODE(I)+K
      NI=NCODE(I)+KL
      B(NI)=B(NI)+(Y(IR,J)*V)
      NJ=NCODE(J)+KL
      B(NJ)=B(NJ)+(Y(IR,I)*V)
      IJ=IQCODE(I)+J
      NK=NCODE(I)+IJ
      B(NK)=B(NK)+(Y(IR,K)*V)
      NL=NCODE(K)+IJ
      B(NL)=B(NL)+(Y(IR,I)*V)
      GO TO 30
C
C     (AB I BC)
C
  200 I=I+IOFF
      J=J+JOFF
      K=K+LOFF
  201 KL=IQCODE(J)+K
      NI=NCODE(I)+KL
      B(NI)=B(NI)+(Y(IR,J)*V)
      NJ=NCODE(J)+KL
      B(NJ)=B(NJ)+(Y(IR,I)*V)
      IJ=IQCODE(I)+J
      NK=NCODE(J)+IJ
      B(NK)=B(NK)+(Y(IR,K)*V)
      NL=NCODE(K)+IJ
      B(NL)=B(NL)+(Y(IR,J)*V)
      GO TO 30
C
C     (AC I BC)
C
  210 I=I+IOFF
      J=J+JOFF
      K=K+KOFF
  211 KL=IQCODE(K)+J
      NI=NCODE(I)+KL
      B(NI)=B(NI)+(Y(IR,J)*V)
      NJ=NCODE(J)+KL
      B(NJ)=B(NJ)+(Y(IR,I)*V)
      IJ=IQCODE(I)+J
      NK=NCODE(K)+IJ
      B(NK)=B(NK)+(Y(IR,J)*V)
      NL=NCODE(J)+IJ
      B(NL)=B(NL)+(Y(IR,K)*V)
      GO TO 30
C
C     (AB I AB)
C
   70 I=I+IOFF
      J=J+JOFF
   71 KL=IQCODE(I)+J
      NI=NCODE(I)+KL
      B(NI)=B(NI)+(Y(IR,J)*V)
      NJ=NCODE(J)+KL
      B(NJ)=B(NJ)+(Y(IR,I)*V)
      GO TO 30
C
C     (AA I BC)
C
   80 I=I+IOFF
      J=J+KOFF
      K=K+LOFF
   81 NI=NCODE(I)+IQCODE(J)+K
      B(NI)=B(NI)+(Y(IR,I)*V)
      IJ=IQCODE(I)+I
      NK=NCODE(J)+IJ
      NL=NCODE(K)+IJ
      B(NK)=B(NK)+(Y(IR,K)*V)
      B(NL)=B(NL)+(Y(IR,J)*V)
      GO TO 30
C
C     (AB I CC)
C
   60 I=I+IOFF
      J=J+JOFF
      K=K+KOFF
   61 KL=IQCODE(K)+K
      NI=NCODE(I)+KL
      B(NI)=B(NI)+(Y(IR,J)*V)
      NJ=NCODE(J)+KL
      B(NJ)=B(NJ)+(Y(IR,I)*V)
      IJ=IQCODE(I)+J
      NK=NCODE(K)+IJ
      B(NK)=B(NK)+(Y(IR,K)*V)
      GO TO 30
C
C     (AB I BB)
C
   65 KL=IQCODE(J)+J
      NI=NCODE(I)+KL
      B(NI)=B(NI)+(Y(IR,J)*V)
      NJ=NCODE(J)+KL
      B(NJ)=B(NJ)+(Y(IR,I)*V)
      IJ=IQCODE(I)+J
      NK=NCODE(J)+IJ
      B(NK)=B(NK)+(Y(IR,J)*V)
      GO TO 30
C
C     (AA I BB)
C
   66 NI=NCODE(I)+IQCODE(J)+J
      B(NI)=B(NI)+(Y(IR,I)*V)
      NK=NCODE(J)+IQCODE(I)+I
      B(NK)=B(NK)+(Y(IR,J)*V)
      GO TO 30
C
C     (AA I AB)
C
   67 NI=NCODE(I)+IQCODE(I)+J
      B(NI)=B(NI)+(Y(IR,I)*V)
      IJ=IQCODE(I)+I
      NK=NCODE(I)+IJ
      NL=NCODE(J)+IJ
      B(NK)=B(NK)+(Y(IR,J)*V)
      B(NL)=B(NL)+(Y(IR,I)*V)
      GO TO 30
C
C     (AA I AA)
C
  120 I=I+IOFF
  121 NI=NCODE(I)+IQCODE(I)+I
      B(NI)=B(NI)+(Y(IR,I)*V)
      GO TO 30
C
C     GET NEW ATOM OFFSET VALUES.
C
   90 JA = IV(1)
      IF (JA .EQ. 0) GO TO 140
C?GLD/GBR/IBM/VAX/CDC
C     CALL UNPACK
C??
C?UNX
      CALL UNPACK (JA, I, J, K, L)
C??
      IOFF=IAOFF(I)
      JOFF=IAOFF(J)
      KOFF=IAOFF(K)
      LOFF=IAOFF(L)
   30 CONTINUE
      GO TO 20
C
C     END OF ATOMIC INTEGRAL INPUT - START NEXT TRANSFORMATION STEP
C     FOR THIS MO.
C
C     WAIT FOR FINAL BUFFER TO BE READ - IT SHOULD BE AT END OF FILE.
C
  140 CALL NWIOWT (ITWOEL, 3072, .TRUE., 'GF1', IOP(1), *9000)
      REWIND ITWOEL
C
      DO 700 IS=1,IR
      DO 610 NKL=1,NCS
      SUM=ZERO
      DO 620 NJ=1,NBASIS
      NIX =(NJ-1)*NCS + NKL
  620 SUM=SUM+B(NIX)*Y(IS,NJ)
  610 G(NKL)=SUM
      WRITE(ISCRCH)(G(N),N=1,NCS)
  700 CONTINUE
C
  900 CONTINUE
      ENDFILE ISCRCH
      REWIND ISCRCH
 9000 RETURN
      END
      SUBROUTINE TR2
C
C     COMPUTE THE FINAL KET VECTORS FOR THE MO INTS.
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C#
C     PARAMETER (NA=#NA)
C     PARAMETER (NT=#NT)
C##
      PARAMETER (NA= 36)
      PARAMETER (NT= 70)
C###
      PARAMETER (NT1=NT*(NT+1)/2, NT3=NT*NT*(NT+1)/2)
      PARAMETER (ZERO=0.0D0)
C
      COMMON /A/ IOP(99)
      COMMON /A/ NATOMS,ICHARG,MULTIP,IAN(NA),NAE,NBE,NE,NBASIS,C(NA,3)
      COMMON /A/ CDUM(4),IDUM(401)
C
      COMMON/TRAN1/Y(NT,NT),NMO,NRS,NCS,IQCODE(NT),
     1 NCODE(NT),NMAX
      COMMON/TRAN2/DEL(NT),TINT(NT1),G(NT1),BUFF(900)
C
      COMMON/IO/IODUM1(5),IMOINT,ISCRCH,IODUMC(210)
C
      DIMENSION FILL2(NT3)
C
      EQUIVALENCE (FILL2(1),DEL(1))
C
      DATA TRESHI/1.0D-10/
C*
      NINT = 0
      DO 502 IR=1,NMO
      DO 501 IS=1,IR
      READ(ISCRCH)(G(N),N=1,NCS)
      ITS = 0
      DO 500 IT=1,IR
      DO 42 N=1,NBASIS
   42 DEL(N)=ZERO
      K = 0
      DO 43 NK=1,NBASIS
      DO 43 NL=1,NK
      K = K + 1
      IF(NK.EQ.NL) GO TO 43
      DEL(NK) = DEL(NK) + Y(IT,NL) * G(K)
   43 DEL(NL) = DEL(NL) + Y(IT,NK) * G(K)
      IUMAX=IT
      IF(IR.EQ.IT)IUMAX=IS
      DO 499 IU=1,IUMAX
      ITS = ITS + 1
      SUM=ZERO
      DO 60 NL=1,NBASIS
   60 SUM=SUM+Y(IU,NL)*DEL(NL)
      IF(DABS(SUM).GE.TRESHI) GO TO 10
      TINT(ITS)=ZERO
      GO TO 499
   10 TINT(ITS)=SUM
  499 CONTINUE
  500 CONTINUE
      DO 600 NCNT=1,ITS
      NINT = NINT + 1
      IF(NINT.LT.901)GO TO 600
      NINT = 1
      WRITE(IMOINT)BUFF
  600 BUFF(NINT)=TINT(NCNT)
  501 CONTINUE
  502 CONTINUE
      WRITE(IMOINT)BUFF
      REWIND ISCRCH
      ENDFILE IMOINT
      REWIND IMOINT
      RETURN
      END
      SUBROUTINE SET(I,J,K,L,MU)
C
      MU=4
      JEI=I-J
      KEI=I-K
      LEK=K-L
      LEJ=J-L
      I1=IABS(LEJ)+KEI
      IF(I1.NE.0)GO TO 4
      IF(JEI.NE.0)GO TO 3
      MU=1
      RETURN
C
    3 MU=2
      RETURN
C
    4 IF(JEI.NE.0)RETURN
      IF(LEK.NE.0)RETURN
      MU=3
      RETURN
      END
      SUBROUTINE INTPRT
C
C     PRINT TRANSFORMED INTEGRALS.
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C#
C     PARAMETER (NA=#NA)
C     PARAMETER (NT=#NT)
C##
      PARAMETER (NA= 36)
      PARAMETER (NT= 70)
C###
      PARAMETER (NT1=NT*(NT+1)/2, NT3=NT*NT*(NT+1)/2)
      PARAMETER (ZERO=0.0D0)
C
      COMMON /A/ IOP(99)
      COMMON /A/ NATOMS,ICHARG,MULTIP,IAN(NA),NAE,NBE,NE,NBASIS,C(NA,3)
      COMMON /A/ CDUM(4),IDUM(401)
      COMMON/TRAN1/Y(NT,NT),NMO,NRS,NCS,IQCODE(NT),
     1 NCODE(NT),NMAX
      COMMON/TRAN2/TWOINT(4),BUFF(900),
     1 H(NT1),HOUT(NT,NT)
C
      COMMON/IO/IN,IOUT,IPUNCH,IMAT,ITWOEL,
     1 IMOINT,IODUMC(211)
C
      DIMENSION II(4),JJ(4),KK(4),LL(4)
C
      DIMENSION FILL2(NT3)
C
      EQUIVALENCE (FILL2(1),TWOINT(1))
C
      DATA TWO/2.0D0/, FOUR/4.0D0/
C
 1010 FORMAT('1TRANSFORMED H INTEGRALS'//)
 1030 FORMAT('1TRANSFORMED TWO ELECTRON INTEGRALS'/'0   I   J   K   L',
     1 4X,'INTEGRAL',3(9X,'I   J   K   L',4X,'INTEGRAL')/)
 1040 FORMAT(//' THE TOTAL ELECTRONIC ENERGY IS ',F20.9)
 1050 FORMAT(1X,4I4,1PD14.6,3(I8,3I4,D14.6))
C
      IPRINT=IOP(14)
C
C     CALCULATE THE ENERGY FOR CLOSED SHELL CASES.
C
      ICALCE=0
      IF(IOP(13).EQ.1.AND.IOP(9).EQ.0)ICALCE=NAE
      IF(IPRINT.EQ.0.AND.ICALCE.LE.0)RETURN
      ETOT=ZERO
      READ(IMOINT)(H(K),K=1,NRS)
      NINT=0
      DO 10 I=1,NMO
      DO 10 J=1,I
      NINT=NINT+1
      HOUT(I,J)=H(NINT)
      HOUT(J,I)=H(NINT)
   10 IF(I.EQ.J.AND.I.LE.ICALCE)ETOT=ETOT+H(NINT)
      IF(IPRINT.NE.1)GO TO 20
      WRITE(IOUT,1010)
      CALL MATOUT(HOUT,NMAX,NMAX,NMO,NMO)
      WRITE(IOUT,1030)
C
   20 ETOT=ETOT+ETOT
      NINT=0
      ICOUNT = 0
      READ(IMOINT)BUFF
      DO 200 I=1,NMO
      DO 201 J=1,I
      DO 202 K=1,I
      LASTL=K
      IF(K.GE.I)LASTL=J
      DO 203 L=1,LASTL
      NINT=NINT+1
      IF(NINT.LT.901)GO TO 100
      NINT=1
      READ(IMOINT)BUFF
  100 VALINT=BUFF(NINT)
      IF(IPRINT.NE.1)GO TO 18
      ICOUNT = ICOUNT + 1
      IF(ICOUNT.LE.4)GO TO 110
      ICOUNT=1
      WRITE(IOUT,1050)(II(N),JJ(N),KK(N),LL(N),TWOINT(N),N=1,4)
  110 II(ICOUNT)=I
      JJ(ICOUNT)=J
      KK(ICOUNT)=K
      LL(ICOUNT)=L
      TWOINT(ICOUNT)=VALINT
   18 IF(I.GT.ICALCE)GO TO 203
      CALL SET(I,J,K,L,MU)
      GO TO (22,24,26,203),MU
   22 ETOT=ETOT+VALINT
      GO TO 203
   24 ETOT=ETOT-VALINT*TWO
      GO TO 203
   26 ETOT=ETOT+VALINT*FOUR
  203 CONTINUE
  202 CONTINUE
  201 CONTINUE
  200 CONTINUE
      REWIND IMOINT
      IF(IPRINT.NE.1)GO TO 208
      WRITE(IOUT,1050)(II(N),JJ(N),KK(N),LL(N),TWOINT(N),N=1,ICOUNT)
  208 IF(ICALCE.GT.0)WRITE(IOUT,1040)ETOT
      RETURN
      END
