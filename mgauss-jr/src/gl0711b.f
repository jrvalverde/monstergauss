C     GL0711B      29 MAY 91                                         MRP
      SUBROUTINE OC (NN, IOP, FCCONV)
C
C=OPTIMIZATION METHODS
C OPTIMALLY CONDITIONED (OC) METHOD, WITH GRADIENTS.
C **************************************************
C
C1OC
C     OPTCOND ... DAVIDON'S OPTIMALLY CONDITIONED OPTIMIZATION METHOD,
C     WITH DERIVATIVES.
C     (VERSION: JUL 13, 1988)
C
C     AUTHORS: W.C. DAVIDON AND L. NAZARETH, ARGONNE NATIONAL
C     LABORATORIES TECHNICAL MEMOS 303 AND 306, ARGONNE, ILLINOIS 60439.
C     THE ALGORITHM IS DESCRIBED IN W.C. DAVIDON, MATHEMATICAL
C     PROGRAMMING, 9, 1 (1975).
C     MODIFIED: MIKE AND KATHY PETERSON, U OF TORONTO CHEMISTRY DEPT,
C     CANADA.
C
C     INPUT (INITIAL ENTRY OR RESTART):
C
C     MAXIT,IPRINT,MODE,ITYPE (4I4).
C     MAXIT IS THE MAXIMUM NUMBER OF ITERATIONS.
C     A TRACE WILL BE PRINTED EVERY IPRINT ITERATIONS (0 FOR NO TRACE).
C     MODE IS 0 TO SET THE INITIAL INVERSE HESSIAN
C     FACTOR INTERNALLY, 1 TO READ THE DIAGONAL ELEMENTS OF THE
C     HESSIAN MATRIX - IT IS CONVERTED TO THE INVERSE FACTOR FORM
C     INTERNALLY. MODE IS IGNORED FOR RESTARTS SINCE THE HESSIAN FACTOR
C     FROM DISK IS ALWAYS USED.
C     NOTE THAT 'MODE' AS READ FROM CARDS IS NOT THE SAME AS THE USAGE
C     IN THE PROGRAM ITSELF.
C     ITYPE IS USED ONLY FOR RESTARTS: 0 FOR A NORMAL RESTART (CONTINUE
C     WITH THE CURRENT ITERATION), 1 TO START A NEW ITERATION WITH THE
C     CURRENT POINT. IF THE LAST STEP OF THE PREVIOUS JOB WAS A 'RESET
C     TO BEST PARAMETERS', NEW VALUES OF ACC AND EPS WILL BE IGNORED
C     FOR EXACT RESTARTS.
C
C     FMIN,ACC,EPS,FL0 (4F12.6) ... FMIN IS A GUARANTEED LOWER BOUND ON
C     THE FUNCTION VALUE. ACC IS THE REQUIRED MEAN GRADIENT LENGTH.
C     EPS IS THE TOLERANCE FOR THE FUNCTION VALUES, USED IN
C     CONVERGENCE AND OTHER TESTS - IT SHOULD BE LARGER THAN THE
C     ACCURACY OF THE FUNCTION VALUES, BUT A LITTLE SMALLER THAN THE
C     ACCURACY DESIRED IN THE FUNCTION VALUES. FL0 IS THE EXTRAPOLATION
C     LIMIT.
C     THE DEFAULT FOR ACC IS 5.0D-4 IF ONLY THE GEOMETRY IS OPTIMIZED,
C     ELSE 1.0D-4.
C     THE DEFAULT FOR EPS IS 1.0D-8.
C     THE DEFAULT FOR FL0 IS 10.0, OR 3.0 IF IOP(25) IS SET TO 1
C     ('RING' OPTION).
C     IF THE INITIAL ENERGY IS BELOW FMIN, FMIN IS RESET AS DESCRIBED
C     BELOW.
C     NOTE: THE DEFAULT FL0 VALUE MAY ALLOW THE OPTIMIZATION TO TAKE
C     LARGE STEPS AWAY FROM THE INITIAL PARAMETER VALUES - TO FORCE
C     THE OPTIMIZATION TO STAY IN THE IMMEDIATE REGION OF THE
C     INITIAL POINT, FL0 SHOULD BE DECREASED TO 2.0 OR 3.0.
C     NOTE: EPS SHOULD NOT BE CHANGED FOR EXACT RESTARTS.
C
C     DIAGM(I),I=1,N (6F12.6) ... N DIAGONAL ELEMENTS OF THE
C     HESSIAN MATRIX, ONLY IF MODE=1 AND THIS IS NOT AN EXACT RESTART.
C     THE UNITS FOR THE HESSIAN MATRIX ARE MDYNE/ANGSTROM FOR
C     GEOMETRICAL PARAMETERS. ONLY THE POSITIVE DIAGONAL ELEMENT
C     VALUES WILL REPLACE THE CORRESPONDING INTERNAL GUESS VALUE -
C     THIS PROVIDES A METHOD OF SUPPLYING ONLY CERTAIN DIAGONAL
C     ELEMENTS, USING THE INTERNAL GUESS FOR THE REMAINDER.
C*
C     THIS SUBROUTINE SEEKS A LOCAL MINIMUM OF A NON-LINEAR FUNCTIONAL
C     IN N UNKNOWNS, USING DAVIDON'S OPTIMALLY CONDITIONED METHOD. THE
C     IMPLEMENTATION USES FUNCTION VALUES AND FIRST DERIVATIVES.
C
C     THIS IS A BASIC IMPLEMENTATION OF THE ALGORITHM, DESIGNED TO
C     INCORPORATE A NUMBER OF INTERESTING IDEAS AND TO AID FURTHER
C     RESEARCH INTO THE ALGORITHM. WE EMPHASIZE THAT THE CURRENT
C     IMPLEMENTATION IS NOT A 'BLACK-BOX' ROUTINE.
C
C     PARAMETERS (PASSED IN COMMON MOSTLY):
C
C     GROUP 1: MAIN INPUT PARAMETERS DEFINING PROBLEM.
C
C     N ... IS THE NUMBER OF VARIABLES (MAXIMUM #NO).
C     X ... CONTAINS THE STARTING POINT (N VALUES).
C     ACC ... ROUTINE WILL TERMINATE WHEN MEAN GRADIENT LENGTH IS LESS
C     THAN OR EQUAL TO ACC. USED IN STEP 2A FOR CONVERGENCE TEST.
C     EPS ... IS THE ACCURACY SOUGHT IN THE FUNCTION. THE USER IS
C     CAUTIONED NOT TO SPECIFY AN ACCURACY BELOW THAT WHICH THE
C     FUNCTION CAN BE CALCULATED.
C     THE ROUTINE EXITS FROM ITS NORMAL CYCLE OF ITERATIONS WHEN THE
C     REDUCTION IN FUNCTION VALUE PREDICTED BY THE MODEL IS LESS THAN
C     EPS. TWO SUCCESSIVE STEPS WITH A FUNCTION REDUCTION LESS THAN
C     EPS WILL CAUSE TERMINATION.
C
C     GROUP 2: PARAMETERS TO SET INITIAL HESSIAN INVERSE (VARIANCE)
C     APPROXIMATION. THE ROUTINE MAINTAINS THIS IN FACTORED FORM
C     (FJ)(FJ)', AND KEEPS ONLY FJ AS A LOWER TRAPEZOIDAL MATRIX,
C     STORED IN A ONE DIMENSIONAL ARRAY.
C
C     MODE ... SPECIFIES HOW THE FACTOR FJ OF THE INITIAL HESSIAN
C     INVERSE APPROXIMATION IS OBTAINED.
C     MODE=0 THEN FJ IS SET BY THE USER.
C     MODE=1 THEN THE DIAGONAL ELEMENTS OF FJ ARE SET TO ROUGH ESTIMATES
C     FOR THE STANDARD DEVIATIONS IN THE PARAMETERS SPECIFIED BY THE
C     USER IN DIAGM. THE REST OF FJ IS SET TO ZERO. THE USER IS
C     ENCOURAGED TO USE HIS KNOWLEDGE OF THE PROBLEM TO INITIALIZE FJ
C     TO SOME VALUE OTHER THAN THE IDENTITY. AT THE VERY LEAST FJ SHOULD
C     INITIALIZED TO SOME MULTIPLE OF THE IDENTITY BY SETTING ALL
C     ELEMENTS OF DIAGM TO THIS MULTIPLE.
C     M ... IS THE DIMENSION OF THE SUBSPACE TO WHICH THE SEARCH IS
C     CONSTRAINED TO LIE. IF THERE ARE NO EQUALITY CONSTRAINTS, THEN
C     M SHOULD BE SET TO N. SEE ALSO FJ BELOW.
C     DIAGM ... SPECIFIES THE UNCERTAINTIES IN THE PARAMETERS WHEN
C     MODE=1. WHEN MODE=0, THIS IS A DUMMY VECTOR.
C     FJ ... CONTAINS THE LOWER TRAPEZOIDAL MATRIX, S.T. THE  HESSIAN
C     INVERSE APPROXIMATION IS GIVEN BY (FJ)(FJ)'. IF MODE=0, THEN FJ
C     MUST BE INITIALIZED BY THE USER. ON TERMINATION, THE FINAL
C     APPROXIMATION TO THE INVERSE HESSIAN (VARIANCE) MATRIX MAY BE
C     OBTAINED FROM (FJ)(FJ)' IF M<N THEN THE INITIAL FJ MUST BE CHOSEN
C     SO THAT ITS COLUMNS SPAN THE SUBSPACE TO WHICH THE
C     SEARCH IS CONSTRAINED TO LIE.
C
C     GROUP 3: PARAMETERS WHICH GUIDE THE SEARCH.
C
C     FMIN ... A GUARANTEED LOWER BOUND ON THE FUNCTION VALUE, EVEN IF
C     SIGNIFICANTLY MORE NEGATIVE THAN THE GREATEST LOWER BOUND. IN
C     THE EVENT THAT NOT EVEN A CRUDE ESTIMATE IS AVAILABLE, CHOOSE
C     -1.0D50.
C     IN THE CURRENT IMPLEMENTATION, FMIN IS RESET TO
C        ENERGY - 0.01 - 0.5*SUM(G(X)**2/H(X,X))
C     WHERE G(X) AND H(X,X) ARE THE GRADIENT COMPONENTS AND DIAGONAL
C     HESSIAN ELEMENT GUESSES, IF THE ENERGY GOES BELOW THE LOWER
C     BOUND FOR GEOMETRY OPTIMIZATIONS.
C     FOR BASIS SET (OR MIXED GEOMETRY / BASIS SET) OPTIMIZATIONS, FMIN
C     IS RESET TO
C        ENERGY-0.0119701-0.144386*N*GL**3
C     WHERE GL IS THE CURRENT GRADIENT LENGTH (WITH GL SET TO 1.0 IF
C     GL > 1.0), IF THE ENERGY GOES BELOW THE LOWER BOUND.
C     FL0 ... EXTRAPOLATION CONSTANT USED IN SEARCH. DEFAULT SET ABOVE.
C     IPRINT ... IF IPRINT=K, WHERE K>0, THE ROUTINE WILL PRINT OUT A
C     TRACE AFTER EACH SET OF K ITERATIONS. THE FORMAT FOR THE TRACE
C     AND THE LEGEND FOR INTERPRETING IT ARE GIVEN UNDER THE HEADING
C     'TRACE' BELOW. IF IPRINT=0, THEN NO TRACE IS OUTPUT.
C     IRSTBD ... IF THE ALGORITHM TERMINATES WITH ICONV=2, THEN IT IS
C     RESTARTED IRSTBD TIMES WITH THE DIAGONAL ELEMENTS OF FJ SET TO
C     DIAGM IF MODE=1, AND TO UNITY OTHERWISE. IF IRSTBD .LE. 0 THEN
C     NO RESTARTING IS DONE.
C
C     GROUP 4: OUTPUT VARIABLES.
C
C     X0 ... FINAL ESTIMATE OF THE SOLUTION.
C     F0 ... FUNCTION VALUE AT X0.
C     G0 ... GRADIENT AT X0.
C     FK0 ... EUCLIDEAN GRADIENT AT X0.
C
C     GROUP 5: WORKING ARRAYS.
C
C     FK,FN,FM,P,Q,S ... M DIMENSIONAL VECTORS.
C     G,WORK,V ... N DIMENSIONAL VECTORS.
C     ITRACE ... ARRAY OF DIMENSION 20.
C
C     TRACE INFORMATION.
C     THE LEGEND FOR THE TRACE LETTERS IS AS FOLLOWS:
C     U ... INITIAL STEP .EQ. 1 (STEP 2A OF DRVOCR).
C     T ... PREDICTED REDUCTION IN FUNCTION VALUE IN DIRECTION OF
C     SEARCH .LT. EPS (STEP 2 OF DSRCH).
C     H ... BISECT (STEP 2 OF DSRCH).
C     B ... MINIMUM BOUNDED (STEP 3 OF DSRCH).
C     P ... DIRECTIONAL DERIVATIVE POSITIVE (STEP 3 OF DSRCH).
C     E ... EXTRAPOLATION STEP GREATER THAN FL0.
C     N ... N**2 .LT. EPS (STEP 1 OF FORMPQ).
C     R ... RESET TO FULL VECTORS (STEP 3 OF FORMPQ).
C     1 ... RANK 1 UPDATE (STEP 4 OF FORMPQ).
C     X ... INDICATION THAT CONDITION NUMBER OF HESSIAN INVERSE
C     APPROXIMATION MAY BE IN REGION OF OVERFLOW THRESHOLD
C     (STEP 1 OF MODCON).
C     C ... FJ ALTERED (STEP 3 OF MODCON).
C==
C
C1
C     REQUIRED SUBROUTINES: DSRCH, FORMPQ, LTOLSP, LSPTOL, MODCON,
C     LTMVEC, LTTRVC, SETLT.
C*
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C#
C     PARAMETER (NA=#NA)
C     PARAMETER (NS=#NS, NP=#NP)
C     PARAMETER (NO=#NO)
C##
      PARAMETER (NA= 36)
      PARAMETER (NS=120, NP=300)
      PARAMETER (NO=125)
C###
      PARAMETER (NA3=3*NA, NA3SQ=NA3*NA3, NZ=NA3-6,
     1 NFOR=8+6*NA3+6*NP, NOO=NO*(NO+1)/2)
      PARAMETER (ZERO=0.0D0, ONE=1.0D0, TWO=2.0D0)
C
C     NOTE: THESE COMMON BLOCKS MUST MATCH THOSE USED BY THE DOC METHOD.
C     COMMON BLOCK /C711B/ HAS LENGTH NA3SQ - SEE EQUIVALENCE BELOW.
C     COMMON BLOCK /C711D/ HAS LENGTH NFOR - SEE EQUIVALENCE BELOW.
C     THIS EASES CONVERSION BETWEEN IBM AND CDC VERSIONS.
C
      COMMON/C711B/FK0(NO),N,MAXIT,IPRINT,MODE,IPT,NFCALL,M,LENFJ,
     1 FMIN,ACC,EPS,FL0,F0,ITRACE(20),
     2 IT,IRSTBD,IRST,NSTART,ICONV,ISTEP,F,FA,FB,FNS,A,FP0,B0,FMS,GL,
     3 L,ISW,DOC(3),FILL1(4),
     4 FJ(NOO)
      COMMON/C711C/IG(NZ),CG(NZ),IB(NS,5),X(NO),G(NO)
      COMMON/C711D/DIAGM(NO),X0(NO),G0(NO),FK(NO),FN(NO),FM(NO),
     1 P(NO),Q(NO),S(NO),WORK(NO),V(NO)
      COMMON/GEN/E1,E2,E3,EDUM(3),DCONV,SPIN(2),FIELD(3),FE,EMOL,ESOL,
     1 DPOLE(4),VCM
      COMMON/IO/IN,IOUT,IODUM(215)
C
      CHARACTER IARRAY*1, ZTRACE*20
C
      DIMENSION IARRAY(2), IOP(99), FILLB(NA3SQ), FILLF(NFOR)
C
      EQUIVALENCE (FILLB(1),FK0(1)), (FILLF(1),DIAGM(1))
C
      SAVE FMACH
C
      DATA THREE,TEN/3.0D0,10.0D0/
      DATA TENM4/1.0D-4/, EPSFAC/1.0D-8/, FIVM4/5.0D-4/
      DATA PT01/0.01D0/, PT5/0.5D0/
      DATA C0FMIN/0.0119701D0/, C1FMIN/0.144386D0/
      DATA IARRAY/' ','U'/
C
C     MACHINE DEPENDENT CONSTANTS.
C?IBM/GLD/GBR/CDC/UNX
      DATA FKDATA/1.0D70/
C??
C?VAX
C     DATA FKDATA/1.7D38/
C??
C?IBM/GLD/GBR/VAX/UNX
      DATA IREAL/2/, IINT/1/
C??
C?CDC
C     DATA IREAL/2/, IINT/2/
C??
      DATA FMACH/0.0D0/
C
      L11=((NO+21)*IREAL+36*IINT)/2
      FKBND=FKDATA
C
C     COMPUTE FMACH, THE RELATIVE MACHINE PRECISION, IF NECESSARY.
C
      IF (FMACH .EQ. ZERO) THEN
         EPSTST = ONE
C
    1    EPSTST = PT5 * EPSTST
         TOL1 = EPSTST + ONE
         IF ((TOL1.GT.ONE) .AND. (TOL1-EPSTST.EQ.ONE)) GO TO 1
         IF (TOL1-EPSTST .EQ. ONE) EPSTST = EPSTST + EPSTST
         FMACH = EPSTST
      END IF
C
C     STEP 1A: INITIALIZE AND SET DEFAULTS IF NECESSARY.
C     CHECK INPUT PARAMETERS.
C
      N=NN
      M=N
      LENFJ=(M*(2*N-M+1))/2
      IF(IOP(13).EQ.0)GO TO 100
C     RELOAD VARIABLES FROM DISK.
      CALL TREAD(10,DIAGM,11*NO,1,11*NO,1,0)
      CALL TREAD(11,FK0,LENFJ+L11,1,LENFJ+L11,1,0)
      IF(IOP(13).EQ.2)GO TO 100
   10 IF(ISTEP.EQ.0.OR.ISTEP.GE.3)GO TO 30
      F0=E3
      GL=ZERO
      DO 20 I=1,M
      G0(I)=G(I)
   20 GL=GL+G(I)*G(I)
      GL=DSQRT(GL/DFLOAT(M))
C     BRANCH DEPENDING ON ISTEP.
   30 MODE=1
      I=ISTEP+1
      GO TO (2000,425,470,115),I
C
C     INITIAL ENTRY.
C
  100 READ(IN,1200)MAXIT,IPRINT,MODE,ITYPE
      IF (IPRINT .LT. 0) IPRINT=0
      WRITE(IOUT,1210)N,MAXIT,IPRINT,MODE,ITYPE
      READ(IN,1220)FMININ,ACC,EPS,FL0
      IF(IOP(13).EQ.0.AND.MODE.NE.0)READ(IN,1220)(WORK(I),I=1,M)
      IF (IOP(13) .EQ. 2) FMININ = FMIN
      FMIN = FMININ
      IF(ACC.GT.ZERO)GO TO 106
      ACC=FIVM4
      IF(IOP(17).EQ.1)ACC=TENM4
  106 IF(EPS.LE.ZERO)EPS=EPSFAC
      IF (FL0.LE.ZERO .AND. IOP(25).NE.1) FL0 = TEN
      IF (FL0.LE.ZERO .AND. IOP(25).EQ.1) FL0 = THREE
      WRITE(IOUT,1230)FMIN,ACC,EPS,FL0
      IF(EPS.LT.FMACH)GO TO 500
      WRITE(IOUT,1250)(I,X(I),I=1,N)
      IF(IOP(13).EQ.2.AND.IOP(10).EQ.0)RETURN
C     EXACT RESTART.
      IF(IOP(13).EQ.2.AND.ITYPE.EQ.0)GO TO 10
C     SET STEP FLAG TO 3.
      ISTEP=3
      IF(IOP(13).EQ.2)GO TO 115
      IF (MODE .NE. 0) THEN
         WRITE(IOUT,1170)(I,WORK(I),I=1,M)
         DO 110 I=1,M
  110    IF (WORK(I) .GT. ZERO) DIAGM(I) = WORK(I)
      END IF
      WRITE(IOUT,1260)(I,DIAGM(I),I=1,M)
      DO 111 I=1,M
  111 DIAGM(I)=ONE/DSQRT(DABS(DIAGM(I)))
      MODE=1
      IF(IOP(10).EQ.0)RETURN
C     NFCALL COUNTS FUNCTION EVALUATIONS.
      NFCALL=1
      IT=0
C     ALLOW RESTARTS UNTIL MAXIMUM ITERATIONS EXCEEDED.
      IRSTBD=1000000
      IRST=0
C     NSTART COUNTS RESTARTS IF FUNCTION REDUCTION<EPS.
      NSTART=0
      IF(MODE.EQ.1)CALL SETLT(FJ,LENFJ,M,N,DIAGM)
  115 MODE=1
      F=E3
      WRITE(IOUT,1060)F,(I,G(I),I=1,N)
      F0=F
      DO 120 I=1,N
      G0(I)=G(I)
  120 X0(I)=X(I)
      CALL LTTRVC(FJ,LENFJ,M,N,G,FK0)
  130 FB=TWO*F0-FMIN
      FA=F0
C
C     STEP 1C:  INITIALIZE NORM OF UPDATING VECTOR TO ZERO.
C
  140 FNS=ZERO
C
C     STEP 2:  CONDUCT SEARCH. BEGIN BY PRINTING TRACE IF REQUESTED.
C
  200 A=ZERO
      DO 225 I=1,M
  225 A=A+FK0(I)*FK0(I)
      FP0=-A
      GL=ZERO
      DO 205 I=1,M
  205 GL=GL+G0(I)*G0(I)
      GL=DSQRT(GL/DFLOAT(M))
      IF (IPRINT.EQ.0 .OR. IT.EQ.0) GO TO 210
      IF(MOD(IT,IPRINT).NE.0) GO TO 210
      J=MIN0(N,10)
      DO 150 KL = 1,20
  150 ZTRACE(KL:KL) = CHAR(ITRACE(KL))
      WRITE(IOUT,1080)IT,F0,NFCALL,GL,ZTRACE,(X0(I),I=1,J)
      IF(N.GT.10)WRITE(IOUT,1081)(X0(I),I=11,N)
      WRITE(IOUT,1090)(G0(I),I=1,J)
      IF(N.GT.10)WRITE(IOUT,1081)(G0(I),I=11,N)
  210 DO 220 I=1,20
  220 ITRACE(I) = ICHAR(IARRAY(1))
C     IPT POINTS TO NEXT AVAILABLE 'TRACE' ELEMENT.
      IPT=1
      IF(IT.EQ.0.OR.IOP(13).EQ.2)WRITE(IOUT,1140)GL
C
C     STEP 2A:  MAIN CONVERGENCE TEST.
C
      IF(GL.LE.ACC)GO TO 460
      IF(A.LE.EPS)GO TO 420
      IF(IT.GE.MAXIT) GO TO 440
      IT=IT+1
C
C     STEP 2B:  COMPUTE EUCLIDEAN STEP, SEARCH DIRECTION AND DIRECTIONAL
C     DERIVATIVE.
C
      DO 230 J=1,M
  230 S(J)=-FK0(J)
      CALL LTMVEC(FJ,LENFJ,M,N,S,V)
C
C     STEP 2C:  COMPUTE INITIAL STEP ALONG V.
C
      IF ((F0-FMIN) .GT. ZERO) GO TO 240
C
C     RESET THE LOWER BOUND - USE THE SUM(G(X)**2/H(X,X,) FORMULA
C     FOR GEOMETRY OPTIMIZATIONS, GL**3 FORMULA FOR MIXED GEOMETRY OR
C     BASIS SET OPTIMIZATIONS.
C
      IF (IOP(17) .EQ. 0) THEN
         T = ZERO
         DO 235 I=1,M
  235    T = T + (G0(I)*DIAGM(I))**2
         FMIN = F0 - PT01 - PT5*T/FCCONV
         WRITE (IOUT,1180) FMIN
      ELSE
         GL3 = GL * GL * GL
         IF (GL .GT. ONE) GL3 = ONE
         FMIN = F0 - C0FMIN - C1FMIN*DFLOAT(M)*GL3
         WRITE(IOUT,1050)FMIN
      END IF
      FB=F0+F0-FMIN
C
  240 A=DMIN1(-TWO*(F0-FMIN)/FP0,-TWO*(FB-F0)/FP0)
      IF (A .LT. ONE) GO TO 250
      IF (IPT .LE. 20) ITRACE(IPT) = ICHAR(IARRAY(2))
      IPT=IPT+1
      A=ONE
  250 FB=FA
      FA=F0
      ICONV=0
      ISTEP=0
C
C     STEP 2D:  CALL LINE SEARCH ROUTINE.
C
 2000 CALL DSRCH(FP0,A,B0,ICONV)
      IF(ICONV.EQ.0)GO TO 300
      IF(ICONV.NE.1)GO TO 254
 2010 CALL TWRITE(10,DIAGM,11*NO,1,11*NO,1,0)
      CALL TWRITE(11,FK0,LENFJ+L11,1,LENFJ+L11,1,0)
      RETURN
C
C     STEP 2E:  RESTART, UNLESS TWO SUCCESSIVE RESTARTS.
C
  254 NSTART=NSTART+1
      IF(NSTART.LT.2) GO TO 255
      WRITE(IOUT,1130)
C
      IOP(1)=-1
      NSTART=0
      GO TO 430
  255 IRST=IRST+1
      IF (IRST .GT. IRSTBD) GO TO 450
      DO 260 I=1,M
      WORK(I)=ONE
  260 IF(MODE .EQ. 1) WORK(I)=DIAGM(I)
      CALL SETLT(FJ,LENFJ,M,N,WORK)
      GO TO 130
C     STEP 3A:  CHECK IF UPDATE IS NECESSARY.
C
  300 FMS=ZERO
      NSTART=0
      DO 305 I=1,M
  305 FMS=FMS+FM(I)*FM(I)
      IF (FMS .LT. EPS) GO TO 140
C
C     STEP 3B:  FORM VECTORS P AND Q.
C
      CALL FORMPQ(FNS,FMS,B0)
C
C     STEP 3C:  UPDATE FJ AND OTHER QUANTITIES.
C
      CALL LTMVEC(FJ,LENFJ,M,N,Q,X)
      ISW=1
      IF (FNS .GT. ZERO)ISW=2
      CALL LTOLSP(M,N,LENFJ,FJ,P,FK0,FN,ISW,WORK)
C     COMPUTE LAST COLUMN.
      DO 310 I=1,N
  310 WORK(I)=WORK(I)+X(I)*P(M)
      CALL LSPTOL(M,N,LENFJ,FJ,FK0,FN,FM,ISW,WORK)
      CALL MODCON(M,N,LENFJ,FJ,FKBND,CONDNO,IFLAG,IPT,ITRACE)
      IF (IFLAG .NE. 1) GO TO 200
C     DIAGONAL ELEMENTS OF FJ TOO SMALL.
      WRITE(IOUT,1110)
      IOP(1)=-1
      GO TO 430
C     FUNCTION VALUES CONVERGED WITHIN EPS - RESET TO BEST PARAMETERS.
  420 ISTEP=1
      IF(E3.NE.F0)GO TO 510
  425 WRITE(IOUT,1150)
      IOP(1)=1
  430 WRITE(IOUT,1020)IT,(I,X0(I),I=1,N)
      WRITE(IOUT,1030)F0,(I,G0(I),I=1,N)
      WRITE(IOUT,1140)GL
      WRITE(IOUT,1070)NFCALL,IRST
C     COPY PARAMETERS.
      DO 435 I=1,N
  435 X(I)=X0(I)
      ISTEP=3
      GO TO 2010
C     TOO MANY ITERATIONS.
  440 WRITE(IOUT,1100)
      IOP(1)=-1
      GO TO 430
C     TOO MANY RESTARTS - ALLOW CONVERGENCE IF GL <= 2*ACC.
  450 WRITE(IOUT,1120)
      IOP(1)=-1
      IF (GL .GT. TWO*ACC) GO TO 430
      WRITE (IOUT,1160)
      IOP(1) = 1
      GO TO 430
C     PARAMETER GRADIENT LENGTH CONVERGED - RESET TO BEST PARAMETERS.
  460 ISTEP=2
      IF(E3.NE.F0)GO TO 510
  470 WRITE(IOUT,1040)
      IOP(1)=1
      GO TO 430
C     INPUT PARAMETER ERROR.
  500 WRITE(IOUT,1000)
      IOP(1)=-1
      RETURN
C     RESET TO BEST PARAMETERS.
  510 NFCALL=NFCALL+1
      WRITE(IOUT,1010)
      DO 520 I=1,N
  520 X(I)=X0(I)
      GO TO 2010
C
 1000 FORMAT('0*** ERROR IN INPUT PARAMETERS')
 1010 FORMAT('0RESET TO BEST PARAMETERS')
 1020 FORMAT('0RESULTS AT ITERATION ',I4/'0FINAL PARAMETERS:'//
     1 (1X,6(I6,1PD16.7)))
 1030 FORMAT('0ENERGY =',F17.9,'  HARTREES'/
     1 '0GRADIENT:'//(1X,6(I6,1PD16.7)))
 1040 FORMAT('1*** PARAMETER GRADIENT LENGTH CONVERGED WITHIN ACC')
 1050 FORMAT('0*** ENERGY BELOW LOWER BOUND - LOWER BOUND',
     1 ' SET TO',F18.9,' BY THE DAMPED GL**3 FORMULA')
 1060 FORMAT('0INITIAL ENERGY =',F17.9/'0GRADIENT:'//
     1 (1X,6(I6,1PD16.7)))
 1070 FORMAT(' ',I7,' FUNCTION EVALUATIONS,',I10,' RESTARTS'/)
 1080 FORMAT('0ITERATION ',I5,',  E =',F17.9,I8,
     1' FUNCTION EVALUATIONS,  GRADIENT LENGTH =',1PD14.6,',   TRACE: ',
     2 A20/' X:',10D13.5)
 1081 FORMAT(3X,1PD13.5,9D13.5)
 1090 FORMAT(' G:',10(1PD13.5))
 1100 FORMAT('1*** MAXIMUM ITERATION COUNT EXCEEDED - OPTIMIZATION',
     1 ' TERMINATED')
 1110 FORMAT('1*** DIAGONAL ELEMENTS OF INVERSE HESSIAN TOO SMALL -',
     1 ' OPTIMIZATION TERMINATED')
 1120 FORMAT('1*** TOO MANY RESTARTS - OPTIMIZATION TERMINATED')
 1130 FORMAT('1*** 2 SUCCESSIVE ENERGY REDUCTIONS LESS THAN EPS - ',
     1 'OPTIMIZATION TERMINATED')
 1140 FORMAT('0GRADIENT LENGTH:',1PD14.6/)
 1150 FORMAT('1*** ENERGY VALUES CONVERGED WITHIN EPS')
 1160 FORMAT (' *** GRADIENT LENGTH CONVERGED WITHIN 2*ACC - ',
     1 'OPTIMIZATION CONSIDERED CONVERGED')
 1170 FORMAT(/'0USER-SUPPLIED HESSIAN DIAGONAL ELEMENTS ',
     1 '(MDYNE/ANGSTROM):'//
     2 (1X,6(I6,1PD16.7)))
 1180 FORMAT('0*** ENERGY BELOW LOWER BOUND - LOWER BOUND',
     1 ' SET TO',F18.9,' BY THE SUM(G**2/H) FORMULA')
 1200 FORMAT(4I4)
 1210 FORMAT('1OPTIMALLY CONDITIONED OPTIMIZATION ',
     1 '(VER: JUL 13, 1988)'/'0',I3,' PARAMETERS,',I7,' ITERATIONS,',
     2 '    PRINT MODULUS ',I4,',   MODE =',I4,',   ITYPE =',I4)
 1220 FORMAT(6F12.6)
 1230 FORMAT('0LOWER BOUND =',F17.9,10X,'ACCURACY =',1PD13.5,10X,
     1 'EPS =',D13.5,10X,'EXTRAPOLATION FACTOR =',0PF9.5)
 1250 FORMAT(/'0INITIAL PARAMETERS:'//(1X,6(I6,1PD16.7)))
 1260 FORMAT(/'0HESSIAN DIAGONAL ELEMENTS (MDYNE/ANGSTROM):'//
     1 (1X,6(I6,1PD16.7)))
      END
      SUBROUTINE DSRCH(FP0,T,B0,IFLAG)
C
C     THIS SUBROUTINE USES FUNCTION AND DERIVATIVE EVALUATIONS TO
C     FIND A POINT X0+FJ*S ALONG THE LINE THROUGH X0 IN THE
C     DIRECTION OF FJ*S WHERE
C     A) THE VALUE F(X0+FJ*S) OF THE OBJECTIVE FUNCTION IS LESS
C     THAN ITS STARTING VALUE F(X0) AND
C     B) A "REASONABLE" LINEAR APPROXIMATION CAN BE MADE TO THE
C     DEPENDENCE OF THE EUCLIDEAN GRADIENT FK(X0+FJ*S*T) ON T NEAR
C     THE T FOR WHICH F(X0+FJ*S*T) IS A MINIMUM.
C     THIS SUBROUTINE DOES NOT SEEK ACCURATE APPROXIMATIONS TO THE
C     LOCATION OF A MINIMUM.
C
C     X0...ON INPUT CONTAINS THE STARTING POINT OF THE SEARCH.
C     ON OUTPUT IT CONTAINS THE NEW POINT DEVELOPED BY THE
C     SEARCH.
C     S...ON INPUT CONTAINS THE EUCLIDEAN SEARCH DIRECTION. ON
C     OUTPUT CONTAINS THE EUCLIDEAN STEP.
C     V...ON INPUT CONTAINS THE PARAMETER SEARCH DIRECTION. ON
C     OUTPUT CONTAINS THE PARAMETER STEP.
C     F0...ALWAYS CONTAINS THE VALUE OF THE FUNCTION AT THE POINT
C     HELD IN X0.
C     G0...ALWAYS CONTAINS THE GRADIENT OF THE FUNCTION AT THE
C     POINT HELD IN X0.
C     FK0...ALWAYS CONTAINS THE EUCLIDEAN GRADIENT OF THE FUNCTION
C     AT THE POINT HELD IN X0.
C     FP0...ALWAYS CONTAINS THE ESTIMATE OF THE DIRECTIONAL DERIVATIVE
C     AT THE POINT HELD IN X0 ALONG THE DIRECTION V.
C     T...ON INPUT IS THE INITIAL STEP.
C     B0 ... ON OUTPUT GIVES THE AVERAGE FROM 0 TO 1 OF THE SECOND
C     DERIVATIVE OF F(X0+V*T) WITH RESPECT TO T (THIS IS ALSO THE
C     CHANGE IN DIRECTIONAL DERIVATIVE CORRESPONDING TO THE CURRENT
C     STEP V).
C     FM ... ON OUTPUT IS THE DIFFERENCE VECTOR S-K' WHERE K' IS AN
C     ESTIMATE OF THE RATE OF CHANGE OF K=X0+V*T WITH RESPECT TO T.
C     IFLAG ... ON INPUT, IFLAG=0 INDICATES THIS IS THE FIRST CALL.
C     IFLAG=1 INDICATES SUBSEQUENT CALLS DURING THE SAME LINE SEARCH.
C     ON OUTPUT IFLAG=0 SPECIFIES NORMAL TERMINATION.
C     IFLAG=1 INDICATES THAT ANOTHER FUNCTION EVALUATION HAS BEEN
C     REQUESTED.
C     IFLAG=2 SPECIFIES THAT THE REDUCTION IN FUNCTION VALUE NOT
C     SIGNIFICANT.
C
C     X,G ... N DIMENSIONAL WORK VECTORS.
C     FK ... M DIMENSIONAL WORK VECTOR.
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C#
C     PARAMETER (NA=#NA)
C     PARAMETER (NS=#NS, NP=#NP)
C     PARAMETER (NO=#NO)
C##
      PARAMETER (NA= 36)
      PARAMETER (NS=120, NP=300)
      PARAMETER (NO=125)
C###
      PARAMETER (NA3=3*NA, NA3SQ=NA3*NA3, NZ=NA3-6,
     1 NFOR=8+6*NA3+6*NP, NOO=NO*(NO+1)/2)
      PARAMETER (ZERO=0.0D0)
C
      COMMON/C711B/FK0(NO),N,MAXIT,IPRINT,MODE,IPT,NFCALL,M,LENFJ,
     1 FMIN,ACC,EPS,FL0,F0,ITRACE(20),
     2 IFILL1(8),FILL1(12),FL,FMINUS,F,FP,
     3 FJ(NOO)
      COMMON/C711C/IG(NZ),CG(NZ),IB(NS,5),X(NO),G(NO)
      COMMON/C711D/DIAGM(NO),X0(NO),G0(NO),FK(NO),FN(NO),FM(NO),
     1 P(NO),Q(NO),S(NO),WORK(NO),V(NO)
      COMMON/GEN/E1,E2,E3,EDUM(3),DCONV,SPIN(2),FIELD(3),FE,EMOL,ESOL,
     1 DPOLE(4),VCM
C
      CHARACTER*1 IARRAY
C
      DIMENSION IARRAY(5), FILLB(NA3SQ), FILLF(NFOR)
C
      EQUIVALENCE (FILLB(1),FK0(1)), (FILLF(1),DIAGM(1))
C
      DATA PT5/0.5D0/
      DATA IARRAY/'H','B','P','E','T'/
C*
      IF(IFLAG.NE.0)GO TO 700
C
C     STEP 1: INITIALIZE.
C
      FL=FL0
      FMINUS=F0
C
C     STEP 2: DEVELOP NEXT ITERATE.
C
  200 DO 210 J=1,M
  210 S(J)=S(J)*T
      DO 215 I=1,N
  215 V(I)=V(I)*T
      FP0=FP0*T
      DO 220 I=1,N
  220 X(I)=X0(I)+V(I)
C     EXIT IF EXPECTED REDUCTION BASED UPON LINEAR APPROX. < EPS.
      IF (-FP0 .LT. EPS) GO TO 600
      IFLAG=1
      RETURN
C     RE-ENTRY.
  700 IFLAG=0
      F=E3
      NFCALL=NFCALL+1
      IF (F .LT. FMINUS) GO TO 300
      FL=PT5
      T=FL
      IF (IPT .LE. 20) ITRACE(IPT) = ICHAR(IARRAY(1))
      IPT=IPT+1
      GO TO 200
C
C     STEP 3:  COMPUTE EUCLIDEAN GRADIENT, AND DEVELOP FP, B0 AND
C     FM (SEE OUTPUT PARAMETERS ABOVE).
C
  300 CALL LTTRVC(FJ,LENFJ,M,N,G,FK)
      FP=ZERO
      DO 310 I=1,M
  310 FP=FP+FK(I)*S(I)
      B0=FP-FP0
      DO 330 J=1,M
  330 FM(J)=S(J)+FK0(J)-FK(J)
      IF (F .LT. F0) GO TO 350
      FMINUS=F
      FL=PT5
      IF (IPT .LE. 20) ITRACE(IPT) = ICHAR(IARRAY(2))
      IPT=IPT+1
      GO TO 400
C
C     STEP 3A:  FURTHER REDUCTION HAS BEEN OBTAINED.
C     COPY X AND G TO X0 AND G0.
C
  350 DO 355 I=1,N
      X0(I)=X(I)
  355 G0(I)=G(I)
      F0=F
C     COPY FK TO FK0.
      DO 356 I=1,M
  356 FK0(I)=FK(I)
      FP0=FP
      IF (FP0 .LT. ZERO) GO TO 400
      FL=PT5
      DO 360 J=1,M
      S(J)=-S(J)
  360 FM(J)=-FM(J)
      DO 370 I=1,N
  370 V(I)=-V(I)
      FP0=-FP0
      IF (IPT .LE. 20) ITRACE(IPT) = ICHAR(IARRAY(3))
      IPT=IPT+1
C
C     STEP 4:  EXIT IF MINIMUM OF QUADRATIC APPROXIMATION WITHIN THE
C     EXTRAPOLATION BOUND.
C
  400 IF (FP0+B0*FL .GE. ZERO) RETURN
      T=FL
      IF (IPT .LE. 20) ITRACE(IPT) = ICHAR(IARRAY(4))
      IPT=IPT+1
      GO TO 200
  600 IFLAG=2
      IF (IPT .LE. 20) ITRACE(IPT) = ICHAR(IARRAY(5))
      IPT=IPT+1
      RETURN
      END
      SUBROUTINE FORMPQ(FNS,FMS,B0)
C
C     THIS SUBROUTINE DEVELOPS THE VECTORS P AND Q THAT ARE USED TO
C     UPDATE THE JACOBIAN MATRIX FJ WHERE (FJ) (FJ)' IS THE
C     APPROXIMATION TO THE INVERSE HESSIAN. THE UPDATED JACOBIAN
C     MATRIX IS GIVEN BY (FJ)*(I+Q*P'). THE CALLING SEQUENCE IS AS
C     FOLLOWS:
C
C     M ... ON INPUT IS THE DIMENSION OF EUCLIDEAN SPACE.
C     S ... ON INPUT IS THE EUCLIDEAN STEP.
C     FK0 ... ON INPUT IS THE EUCLIDEAN GRADIENT AT THE CURRENT ITERATE.
C     ON OUTPUT IT CONTAINS THE UPDATED EUCLIDEAN GRADIENT AT
C     THE CURRENT ITERATE.
C     FN ... ON INPUT IS THE UPDATING VECTOR, WHICH IN THE QUADRATIC
C     CASE IS ORTHOGONAL TO PROCEEDING EUCLIDEAN STEPS. ON
C     OUTPUT FN CONTAINS THE NEW UPDATING VECTOR.
C     FNS ... ON INPUT IS THE EUCLIDEAN NORM OF FN. ON OUTPUT CONTAINS
C     THE EUCLIDEAN NORM OF UPDATED FN.
C     FM ... ON INPUT IS THE DIFFERENCE VECTOR S-K' WHERE K' IS
C     AN ESTIMATE OF THE RATE OF CHANGE OF EUCLIDEAN GRADIENT
C     ALONG THE SEARCH DIRECTION.
C     FMS ... ON INPUT IS THE EUCLIDEAN NORM OF FM.
C     B0 ... ON INPUT IS THE QUANTITY B0 RETURNED BY THE SEARCH ROUTINE.
C     P ... ON OUTPUT IS THE FIRST VECTOR USED TO DETERMINE THE
C     RANK 1 UPDATE.
C     Q ... ON OUTPUT IS THE VECTOR USED TO DETERMINE THE
C     RANK 1 UPDATE.
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C#
C     PARAMETER (NA=#NA)
C     PARAMETER (NS=#NS, NP=#NP)
C     PARAMETER (NO=#NO)
C##
      PARAMETER (NA= 36)
      PARAMETER (NS=120, NP=300)
      PARAMETER (NO=125)
C###
      PARAMETER (NA3=3*NA, NA3SQ=NA3*NA3,
     1 NFOR=8+6*NA3+6*NP, NOO=NO*(NO+1)/2)
      PARAMETER (ZERO=0.0D0, ONE=1.0D0)
C
      COMMON/C711B/FK0(NO),N,MAXIT,IPRINT,MODE,IPT,NFCALL,M,LENFJ,
     1 FMIN,ACC,EPS,FL0,F0,ITRACE(20),
     2 IFILL(8),FILL(16),
     3 FJ(NOO)
      COMMON/C711D/DIAGM(NO),X0(NO),G0(NO),FK(NO),FN(NO),FM(NO),
     1 P(NO),Q(NO),S(NO),WORK(NO),V(NO)
C
      CHARACTER*1 IARRAY
C
      DIMENSION IARRAY(3),FILLB(NA3SQ),FILLF(NFOR)
C
      EQUIVALENCE (FILLB(1),FK0(1)), (FILLF(1),DIAGM(1))
C
      DATA IARRAY/'N','R','1'/
C
C     STEP 1: COMPUTE INITIAL QUANTITIES AND CHECK IF M AND N
C     DEFINE A PLANE.
C
      FNU=ZERO
      DO 10 J=1,M
   10 FNU=FNU+FM(J)*S(J)
      FMU=FNU-FMS
      IF (FNS .EQ. ZERO) GO TO 300
      A=ZERO
      DO 20 J=1,M
   20 A=A+FM(J)*FN(J)
      B=A/FMS
      FNS=FNS-A*B
      IF (FNS .GE. EPS) GO TO 100
      A=ZERO
      IF (IPT .LE. 20) ITRACE(IPT) = ICHAR(IARRAY(1))
      IPT=IPT+1
      GO TO 200
  100 DO 110 J=1,M
  110 FN(J)=FN(J)-FM(J)*B
      A=ZERO
      DO 120 J=1,M
  120 A=A+FN(J)*S(J)
      A=A/FNS
C
C     STEP 2:  CHECK IF PROJECTED VECTORS CAN BE USED.
C
  200 DO 210 J=1,M
  210 FN(J)=FN(J)*A
      FNS=ZERO
      DO 220 J=1,M
  220 FNS=FNS+FN(J)*FN(J)
      B=FMU*FNU/FMS+FNS
      IF (EPS .LE. B) GO TO 400
C
C     STEP 3:  CHANGE TO FULL VECTORS.
C
  300 TEMP=FNU/FMS
      DO 310 J=1,M
  310 FN(J)=S(J)-FM(J)*TEMP
      FNS=ZERO
      DO 320 J=1,M
  320 FNS=FNS+FN(J)*FN(J)
      B=B0
      IF (IPT .LE. 20) ITRACE(IPT) = ICHAR(IARRAY(2))
      IPT=IPT+1
C
C     STEP 4:  SET PARAMETERS FOR OPTIMALLY CONDITIONED UPDATE.
C
  400 IF (FMS*FNS .GT. FMU*FNU) GO TO 410
      IF (IPT .LE. 20) ITRACE(IPT) = ICHAR(IARRAY(3))
      IPT=IPT+1
      DEL=DSQRT(FNU/FMU)
      GA=ZERO
      GO TO 500
  410 A=B-FMU
      C=B+FNU
      DEL=DSQRT(C/A)
      GA=DSQRT((ONE-(FMU/FMS)*(FNU/FNS))*(B/A))/B
      IF (C .LT. A) GA=-GA
C
C     STEP 5:  FORM P, Q AND FK0.
C
  500 FL=FNU+FMU*DEL+FMS*(FNS*GA)
      TEMP1=DEL-FNS*GA
      TEMP2=GA*FNU
      TEMP3=(ONE+FNS*GA)/FL
      TEMP4=GA*FMU/FL
      DO 510 J=1,M
      P(J)=FM(J)*TEMP1+FN(J)*TEMP2
  510 Q(J)=FM(J)*TEMP3-FN(J)*TEMP4
      TEMP1=ZERO
      DO 515 J=1,M
  515 TEMP1=TEMP1+Q(J)*FK0(J)
      DO 520 J=1,M
  520 FK0(J)=FK0(J)+P(J)*TEMP1
      IF (FNS .EQ. ZERO) RETURN
      TEMP1=FNS*(ONE+GA*FMU*(FNU/FL))
      TEMP2=(ONE+DEL)*FMU*(FNU/FL)
      DO 530 J=1,M
  530 FN(J)=FM(J)*TEMP1-FN(J)*TEMP2
      FNS=ZERO
      DO 540 J=1,M
  540 FNS=FNS+FN(J)*FN(J)
      RETURN
      END
      SUBROUTINE LTOLSP(M,N,LENFL,FL,Q,FK,FN,ISW,W)
C
C     GIVEN A LOWER TRIANGULAR MATRIX AND A VECTOR Q, THIS
C     SUBROUTINE REDUCES Q TO THE MULTIPLE OF THE M'TH UNIT VECTOR
C     WHICH HAS THE SAME FORM AS Q, USING A SEQUENCE OF GIVENS
C     TRANSFORMATIONS. THESE ARE CHOSEN SO THAT WHEN THE LOWER TRIANGULA
C     MATRIX IS POST-MULTIPLIED BY THE SAME SEQUENCE, ONLY THE
C     LAST COLUMN OF THE LOWER TRIANGULAR MATRIX FILLS IN. THE GIVENS
C     TRANSFORMATIONS ARE NOT STORED. INSTEAD THE SUBROUTINE PROVIDES
C     THE OPTION OF APPLYING THE SEQUENCE OF ROTATIONS TO UP TO TWO
C     ADDITIONAL VECTORS PASSED TO IT.
C
C     FL ... ON INPUT STORES THE NXM LOWER TRIANGULAR JACOBIAN
C     MATRIX BY COLUMNS. ON OUTPUT IT STORES THE FIRST M-1
C     COLUMNS OF THE UPDATED JACOBIAN MATRIX.
C     Q ... CONTAINS THE VECTOR TO BE REDUCED TO THE MULTIPLE OF
C     THE M'TH UNIT VECTOR OF THE SAME NORM.
C     FK,FN ... ARE TWO M DIMENSIONAL VECTORS WHICH CAN ALSO BE
C     ROTATED USING THE SEQUENCE OF GIVENS TRANSFORMATIONS
C     GENERATED.
C     ISW ... COUNTER GIVING THE NUMBER OF VECTORS IN THE ABOVE LIST
C     TO BE ROTATED .E.G. IF ISW=1, THEN FK IS TO BE
C     ROTATED AND FN IS A DUMMY VECTOR.
C     W ... ON OUTPUT CONTAINS THE LAST COLUMN OF THE UPDATED
C     JACOBIAN MATRIX.
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      DIMENSION FL(LENFL),Q(M),FK(M),FN(M),W(N)
C
      DATA ZERO/0.0D0/,ONE/1.0D0/
C
C     INITIALIZE VARIABLES.
      NM=N-M
      MM1=M-1
      NM1=NM+1
      LPNTR=LENFL-NM1
      IF(M.EQ.1)GO TO 15
C     INITIALIZE POINTERS INTO FL.
      LENGTH=2+NM
      LPT1=LENFL-3-2*NM
      LWPT=M-2
C     INITIALIZE VECTOR W TO LAST COLUMN OF FL.
      DO 10 I=1,MM1
   10 W(I)=ZERO
   15 DO 20 I=1,NM1
   20 W(MM1+I)=FL(LPNTR+I)
      IF(M.EQ.1)GO TO 100
C     START PROCESS.
      DO 50 JJ=1,MM1
      J=M-JJ
      ALPHA=Q(J)
      BETA=Q(M)
C     DEVELOP GIVEN'S TRANSFORMATION.
      ETA=DMAX1(DABS(ALPHA),DABS(BETA))
      IF (ETA .EQ. ZERO) GO TO 40
      ALPHA1=ALPHA/ETA
      BETA1=BETA/ETA
      DELTA=DSQRT(ALPHA1*ALPHA1+BETA1*BETA1)
      GAMMA=-BETA1/DELTA
      SIGMA=ALPHA1/DELTA
      ENU=ETA*DELTA
C     UPDATE Q.
      Q(J)=ZERO
      Q(M)=ENU
C     UPDATE FL.
      DO 30 I=1,LENGTH
      SAVE1=FL(LPT1+I)
      SAVE2=W(LWPT+I)
      FL(LPT1+I)=GAMMA*SAVE1+SIGMA*SAVE2
   30 W(LWPT+I)=SIGMA*SAVE1-GAMMA*SAVE2
C     UPDATE FN AND FK.
      IF(ISW.LE.0) GO TO 40
      SAVE1=FK(J)
      SAVE2=FK(M)
      FK(J)=GAMMA*SAVE1+SIGMA*SAVE2
      FK(M)=SIGMA*SAVE1-GAMMA*SAVE2
      IF(ISW.LE.1) GO TO 40
      SAVE1=FN(J)
      SAVE2=FN(M)
      FN(J)=GAMMA*SAVE1+SIGMA*SAVE2
      FN(M)=SIGMA*SAVE1-GAMMA*SAVE2
C     UPDATE POINTERS AND JUMP BACK.
   40 LENGTH=LENGTH+1
      LWPT=LWPT-1
   50 LPT1=LPT1-LENGTH
      RETURN
C     SPECIAL SECTION FOR M=1, ADDED BY MIKE PETERSON.
  100 IF(Q(1))110,200,120
  110 T=-ONE
      GO TO 130
  120 T=ONE
  130 Q(1)=DABS(Q(1))
      W(1)=T*W(1)
      IF(ISW.LE.0)GO TO 200
      FK(1)=T*FK(1)
      IF(ISW.EQ.2)FN(1)=T*FN(1)
  200 RETURN
      END
      SUBROUTINE LSPTOL(M,N,LENFL,FL,FK,FN,FM,ISW,W)
C
C     GIVEN A MATRIX WHICH IS LOWER TRIANGULAR EXCEPT FOR ITS LAST
C     COLUMN WHICH IS FULL, THIS SUBROUTINE POST-MULTIPLIES THE
C     MATRIX BY A SEQUENCE OF GIVENS ROTATIONS CHOSEN SO THAT THE MATRIX
C     IS REDUCED TO A LOWER TRIANGULAR MATRIX. THE ROTATIONS ARE NOT
C     STORED. INSTEAD, THE SUBROUTINE PROVIDES THE OPTION OF APPLYING
C     THE ROTATIONS TO UP TO TWO ADDITIONAL VECTORS PASSED TO IT.
C
C     FL ... ON INPUT STORES THE FIRST M-1 COLUMNS OF THE JACOBIAN
C     MATRIX IN COLUMN ORDER. ON OUTPUT STORES THE UPDATED
C     JACOBIAN MATRIX, NOW LOWER TRIANGULAR.
C     FK,FN,FM  ... ARE THREE M DIMENSIONAL VECTORS WHICH CAN ALSO BE
C     ROTATED USING THE SEQUENCE OF GIVENS ROTATIONS GENERATED.
C     ISW ... COUNTER GIVING THE NUMBER OF VECTORS IN THE ABOVE LIST
C     TO BE ROTATED E.G. IF ISW=2 THEN FK AND FN ARE TO BE
C     ROTATED AND FM IS A DUMMY VECTOR.
C     W ... ON INPUT STORES THE LAST COLUMN OF JACOBIAN MATRIX.
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      DIMENSION FL(LENFL),FK(M),FN(M),FM(M),W(N)
C
      DATA ZERO/0.0D0/,ONE/1.0D0/
C
C     INITIALIZE VARIABLES.
      NM=N-M
      MM1=M-1
      NM1=NM+1
      LPNTR=LENFL-NM1
      IF(M.EQ.1)GO TO 35
C     INITIALIZE POINTERS.
      LENGTH=N
      LPT1=0
      LWPT=0
C     FIND TRANSFORMATION.
      DO 30 J=1,MM1
      ALPHA=FL(LPT1+1)
      BETA=W(J)
C     COMPUTE GIVEN'S TRANSFORMATION.
      ETA=DMAX1(DABS(ALPHA),DABS(BETA))
      IF (ETA .EQ. ZERO) GO TO 20
      ALPHA1=ALPHA/ETA
      BETA1=BETA/ETA
      DELTA=DSQRT(ALPHA1*ALPHA1+BETA1*BETA1)
      SIGMA=BETA1/DELTA
      GAMMA=ALPHA1/DELTA
      DO 10 I=1, LENGTH
      SAVE1=FL(LPT1+I)
      SAVE2=W(LWPT+I)
      FL(LPT1+I)=GAMMA*SAVE1+SIGMA*SAVE2
   10 W(LWPT+I)=SIGMA*SAVE1-GAMMA*SAVE2
C     UPDATE FK, FN AND FM.
      IF(ISW.LE.0) GO TO 20
      SAVE1=FK(J)
      SAVE2=FK(M)
      FK(J)=GAMMA*SAVE1+SIGMA*SAVE2
      FK(M)=SIGMA*SAVE1-GAMMA*SAVE2
      IF(ISW.LE.1) GO TO 20
      SAVE1=FN(J)
      SAVE2=FN(M)
      FN(J)=GAMMA*SAVE1+SIGMA*SAVE2
      FN(M)=SIGMA*SAVE1-GAMMA*SAVE2
      IF(ISW.LE.2)GO TO 20
      SAVE1=FM(J)
      SAVE2=FM(M)
      FM(J)=GAMMA*SAVE1+SIGMA*SAVE2
      FM(M)=SIGMA*SAVE1-GAMMA*SAVE2
C     UPDATE POINTERS AND JUMP BACK.
   20 LENGTH=LENGTH-1
      LPT1=LPT1+LENGTH+1
   30 LWPT=LWPT+1
C     SET LAST COLUMN FL SUITABLY.
   35 DO 40 I=1,NM1
   40 FL(LPNTR+I)=W(MM1+I)
      IF(M.GT.1)RETURN
C     SPECIAL SECTION FOR M=1, ADDED BY MIKE PETERSON.
      IF(W(1))110,200,120
  110 T=-ONE
      GO TO 130
  120 T=ONE
  130 FL(1)=T*FL(1)
      IF(ISW.LE.0)GO TO 200
      FK(1)=T*FK(1)
      IF(ISW.GE.2)FN(1)=T*FN(1)
      IF(ISW.EQ.3)FM(1)=T*FM(1)
  200 RETURN
      END
      SUBROUTINE MODCON(M,N,LENFL,FL,FKBND,CONDNO,IFLAG,IPT,ITRACE)
C
C     THIS SUBROUTINE MODIFIES THE JACOBIAN MATRIX IF AN ESTIMATE
C     OF ITS CONDITION NUMBER EXCEEDS A SPECIFIED LOWER BOUND.
C
C     FKBND ... ON INPUT AN UPPER BOUND. IF THE ESTIMATE OF THE CONDITIO
C     NUMBER EXCEEDS FKBND THEN THIS SUBROUTINE MODIFIES THE
C     MATRIX CONTAINED IN FL.
C     CONDNO ... ON OUTPUT CONTAINS THE SQUARE OF THE LARGEST TO THE
C     SMALLEST DIAGONAL ELEMENT OF THE JACOBIAN MATRIX ON ENTRY TO
C     THIS SUBROUTINE. THIS IS AN ESTIMATE OF THE CONDITION
C     NUMBER OF THE INVERSE HESSIAN APPROXIMATION.
C     IFLAG ... ON OUTPUT IFLAG=0 THEN FL UNMODIFIED.
C     IFLAG=1 THEN THE LARGEST ELEMENT ON DIAGONAL
C     IS .LT. 1.0D-35.
C     IFLAG=2 THEN MATRIX MODIFIED.
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      CHARACTER*1 IARRAY
C
      DIMENSION IARRAY(2),ITRACE(20),FL(LENFL)
C
      DATA ZERO,ONE/0.0D0,1.0D0/
      DATA TEN35/1.0D35/, TENM35/1.0D-35/
      DATA IARRAY/'X','C'/
C
C     MACHINE DEPENDENT CONSTANTS.
C
      OVERFL = TEN35
      UNDFL = TENM35
      OVFL2 = OVERFL * OVERFL
C
C     STEP 0: INITIALIZE.
C
      IFLAG=0
C
C     STEP 1: FIND LARGEST AND SMALLEST ELEMENTS OF FL.
C
      BIG=DABS(FL(1))
      SMALL=BIG
      IF(M.EQ.1)GO TO 12
      ILB=N+1
      DO 10 J=2,M
      TEMP=DABS(FL(ILB))
      IF (BIG .LT. TEMP) BIG=TEMP
      IF (SMALL .GT. TEMP) SMALL=TEMP
   10 ILB=ILB+(N-J+1)
   12 IF (BIG .GT. UNDFL) GO TO 15
      IFLAG=1
      RETURN
   15 IF (SMALL .GE. ONE) GO TO 20
      IF (BIG .LT. SMALL*OVERFL) GO TO 20
      IF (IPT .LE. 20) ITRACE(IPT) = ICHAR(IARRAY(1))
      IPT=IPT+1
      CONDNO=OVFL2
      GO TO 30
C
C     STEP 2: ESTIMATE CONDITION NUMBER AND RETURN IT BELOW BOUND.
C
   20 CONDNO=(BIG/SMALL)**2
      IF (FKBND .GE. CONDNO) RETURN
C
C     STEP 3: MODIFY CONDITION NUMBER.
C
   30 IF (IPT .LE. 20) ITRACE(IPT) = ICHAR(IARRAY(2))
      IPT=IPT+1
      IFLAG=2
      W=DLOG(FKBND)/DLOG(CONDNO)
      ILB=1
      DO 50 J=1,M
      NUM=-1
      IF(FL(ILB) .GE. ZERO) NUM=1
      TEMP1=DABS(FL(ILB))
      IF (BIG .GT. TEMP1*OVERFL) TEMP1=BIG*UNDFL
      TEMP2=TEMP1**W
      FL(ILB)=NUM*TEMP2
      TEMP3=TEMP2/TEMP1
      IUB=ILB+(N-J)
   40 ILB=ILB+1
      IF (ILB .GT. IUB) GO TO 50
      FL(ILB)=FL(ILB)*TEMP3
      GO TO 40
   50 CONTINUE
      RETURN
      END
      SUBROUTINE LTMVEC(FL,LENFL,M,N,VEC,RES)
C
C     SUBROUTINE LTMVEC MULTIPLIES FL INTO THE VECTOR VEC AND
C     RETURNS THE RESULT IN RES.
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      DIMENSION FL(LENFL),VEC(M),RES(N)
C
      DATA ZERO/0.0D0/
C
      DO 20 I=1,N
      T=ZERO
      IPTFL=I
      IUB=MIN0(I,M)
      DO 10 J=1,IUB
      T=T+FL(IPTFL)*VEC(J)
   10 IPTFL=IPTFL+(N-J)
   20 RES(I)=T
      RETURN
      END
      SUBROUTINE LTTRVC(FL,LENFL,M,N,VEC,RES)
C
C     SUBROUTINE LTTRVC MULTIPLIES THE TRANSPOSE OF FL INTO
C     THE VECTOR VEC AND RETURNS THE RESULT IN RES.
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      DIMENSION FL(LENFL),VEC(N),RES(M)
C
      DATA ZERO/0.0D0/
C
      IPNTR=1
      DO 110 I=1,M
      T=ZERO
      DO 100 J=I,N
      T=T+FL(IPNTR)*VEC(J)
  100 IPNTR=IPNTR+1
  110 RES(I)=T
      RETURN
      END
      SUBROUTINE SETLT(FL,LENFL,M,N,DIAGM)
C
C     SUBROUTINE SETLT SETS THE DIAGONAL ELEMENTS OF FL TO
C     THE VALUES IN DIAGM AND THE REMAINDER OF FL TO ZERO.
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      DIMENSION FL(LENFL),DIAGM(M)
C
      DATA ZERO/0.0D0/
C
      DO 10 I=1,LENFL
   10 FL(I)=ZERO
      IPTFL=1
      DO 20 ICOL=1,M
      FL(IPTFL)=DIAGM(ICOL)
   20 IPTFL=IPTFL+(N-ICOL+1)
      RETURN
      END
      SUBROUTINE DOC(NN,IOP)
C
C=OPTIMIZATION METHODS
C OPTIMALLY CONDITIONED (DOC) METHOD, WITHOUT GRADIENTS.
C ******************************************************
C
C1DOC
C     OCOPTR ... DAVIDON'S OPTIMALLY CONDITIONED OPTIMIZATION METHOD,
C     WITHOUT DERIVATIVES.
C     (VERSION: DEC 04, 1988)
C
C     AUTHORS: W.C. DAVIDON AND L. NAZARETH, ARGONNE NATIONAL
C     LABORATORIES TECHNICAL MEMOS 303 AND 306, ARGONNE, ILLINOIS 60439.
C     THE ALGORITHM IS DESCRIBED IN W.C. DAVIDON, MATHEMATICAL
C     PROGRAMMING, 9, 1 (1975).
C     MODIFIED: MIKE AND KATHY PETERSON, U OF TORONTO CHEMISTRY DEPT,
C     CANADA.
C
C     IMPORTANT NOTE: THIS METHOD IS INTENDED TO BE USED ONLY WHEN THE
C     MORE EFFICIENT GRADIENT METHODS CAN NOT BE APPLIED, OR WHEN ONLY
C     A *VERY* SMALL SUBSET OF ALL THE PARAMETERS IS BEING OPTIMIZED.
C     THIS METHOD IS STILL UNDER DEVELOPMENT AND THE VALUES OF H AND
C     EPS MAY AFFECT THE EFFICIENCY SUBSTANTIALLY. THE CURRENT DEFAULT
C     VALUES ARE INTENDED AS A GUIDE ONLY. THIS METHOD IS NOT
C     GUARANTEED TO BE BETTER THAN THE Z MATRIX OPTIMIZATION METHOD.
C
C     INPUT (INITIAL ENTRY OR RESTART):
C
C     MAXIT,IPRINT,MODE,ITYPE (4I4).
C     MAXIT IS THE MAXIMUM NUMBER OF ITERATIONS.
C     A TRACE WILL BE PRINTED EVERY IPRINT ITERATIONS (0 FOR NO TRACE).
C     MODE IS 0 TO SET THE INITIAL INVERSE HESSIAN
C     FACTOR INTERNALLY, 1 TO READ THE DIAGONAL ELEMENTS OF THE
C     HESSIAN MATRIX - IT IS CONVERTED TO THE INVERSE FACTOR FORM
C     INTERNALLY. MODE IS IGNORED FOR RESTARTS SINCE THE HESSIAN FACTOR
C     FROM DISK IS ALWAYS USED.
C     NOTE THAT 'MODE' AS READ FROM CARDS IS NOT THE SAME AS THE USAGE
C     IN THE PROGRAM ITSELF.
C     ITYPE IS USED ONLY FOR RESTARTS: 0 FOR A NORMAL RESTART (CONTINUE
C     WITH THE CURRENT ITERATION), 1 TO START A NEW ITERATION WITH THE
C     CURRENT POINT. IF THE LAST STEP OF THE PREVIOUS JOB WAS THE
C     'SPECIAL ITERATION' OR 'RESET TO BEST PARAMETERS', NEW VALUES OF
C     H AND EPS WILL BE IGNORED FOR EXACT RESTARTS.
C
C     FMIN,H,EPS,FL0 (4F12.6) ... FMIN IS A GUARANTEED LOWER BOUND ON
C     THE FUNCTION VALUE. H IS THE STEP LENGTH USED TO ESTIMATE THE
C     GRADIENT COMPONENTS BY FINITE DIFFERENCES.
C     EPS IS THE TOLERANCE FOR THE FUNCTION VALUES, USED IN
C     CONVERGENCE AND OTHER TESTS - IT SHOULD BE LARGER THAN THE
C     ACCURACY OF THE FUNCTION VALUES, BUT A LITTLE SMALLER THAN THE
C     ACCURACY DESIRED IN THE FUNCTION VALUES. FL0 IS THE EXTRAPOLATION
C     LIMIT.
C     IF THE INITIAL ENERGY IS BELOW FMIN, FMIN IS RESET AS DESCRIBED
C     BELOW.
C     THE DEFAULT FOR H IS 0.001.
C     THE DEFAULT FOR EPS IS 1.0D-8.
C     THE DEFAULT FOR FL0 IS 10.0, OR 3.0 IF IOP(25) IS SET TO 1
C     ('RING' OPTION).
C     NOTE: THE DEFAULT FL0 VALUE MAY ALLOW THE OPTIMIZATION TO TAKE
C     LARGE STEPS AWAY FROM THE INITIAL PARAMETER VALUES - TO FORCE
C     THE OPTIMIZATION TO STAY IN THE IMMEDIATE REGION OF THE
C     INITIAL POINT, FL0 SHOULD BE DECREASED TO 2.0 OR 3.0.
C     NOTE: H AND EPS SHOULD NOT BE CHANGED FOR EXACT RESTARTS.
C
C     DIAGM(I),I=1,N (6F12.6) ... N DIAGONAL ELEMENTS OF THE
C     HESSIAN MATRIX, ONLY IF MODE=1 AND THIS IS NOT A RESTART RUN.
C     THE UNITS FOR THE HESSIAN MATRIX ARE HARTREE/ANGSTROM**2 FOR
C     GEOMETRICAL PARAMETERS. ONLY THE POSITIVE DIAGONAL ELEMENT
C     VALUES WILL REPLACE THE CORRESPONDING INTERNAL GUESS VALUE -
C     THIS PROVIDES A METHOD OF SUPPLYING ONLY CERTAIN DIAGONAL
C     ELEMENTS, USING THE INTERNAL GUESS FOR THE REMAINDER.
C*
C     THIS SUBROUTINE SEEKS A LOCAL MINIMUM OF A NON-LINEAR FUNCTIONAL
C     IN N UNKNOWNS, USING DAVIDON'S OPTIMALLY CONDITIONED METHOD. THE
C     IMPLEMENTATION USES FUNCTION VALUES ONLY.
C
C     THIS IS A BASIC IMPLEMENTATION OF THE ALGORITHM, DESIGNED TO
C     INCORPORATE A NUMBER OF INTERESTING IDEAS AND TO AID FURTHER
C     RESEARCH INTO THE ALGORITHM. WE EMPHASIZE THAT THE CURRENT
C     IMPLEMENTATION IS NOT A 'BLACK-BOX' ROUTINE.
C
C     PARAMETERS (PASSED IN COMMON MOSTLY):
C
C     GROUP 1: MAIN INPUT PARAMETERS DEFINING PROBLEM.
C
C     N ... IS THE NUMBER OF VARIABLES (MAXIMUM #NO).
C     X ... CONTAINS THE STARTING POINT (N VALUES).
C     H ... STEP LENGTH USED TO ESTIMATE GRADIENT COMPONENTS BY
C     FINITE DIFFERENCES.
C     EPS ... IS THE ACCURACY SOUGHT IN THE FUNCTION. THE USER IS
C     CAUTIONED NOT TO SPECIFY AN ACCURACY BELOW THAT WHICH THE
C     FUNCTION CAN BE CALCULATED IN THE USER SUPPLIED ROUTINE FEVAL.
C     THE ROUTINE EXITS FROM ITS NORMAL CYCLE OF ITERATIONS WHEN THE
C     REDUCTION IN FUNCTION VALUE PREDICTED BY THE MODEL IS LESS THAN
C     EPS. TWO SUCCESSIVE STEPS WITH A FUNCTION REDUCTION LESS THAN
C     EPS WILL CAUSE TERMINATION.
C
C     GROUP 2: PARAMETERS TO SET INITIAL HESSIAN INVERSE (VARIANCE)
C     APPROXIMATION. THE ROUTINE MAINTAINS THIS IN FACTORED FORM
C     (FJ)(FJ)', AND KEEPS ONLY FJ AS A LOWER TRAPEZOIDAL MATRIX,
C     STORED IN A ONE DIMENSIONAL ARRAY.
C
C     MODE ... SPECIFIES HOW THE FACTOR FJ OF THE INITIAL HESSIAN
C     INVERSE APPROXIMATION IS OBTAINED.
C     MODE=0 THEN FJ IS SET BY THE USER.
C     MODE=1 THEN THE DIAGONAL ELEMENTS OF FJ ARE SET TO ROUGH ESTIMATES
C     FOR THE STANDARD DEVIATIONS IN THE PARAMETERS SPECIFIED BY THE
C     USER IN DIAGM. THE REST OF FJ IS SET TO ZERO. THE USER IS
C     ENCOURAGED TO USE HIS KNOWLEDGE OF THE PROBLEM TO INITIALIZE FJ
C     TO SOME VALUE OTHER THAN THE IDENTITY. AT THE VERY LEAST FJ SHOULD
C     INITIALIZED TO SOME MULTIPLE OF THE IDENTITY BY SETTING ALL
C     ELEMENTS OF DIAGM TO THIS MULTIPLE.
C     M ... IS THE DIMENSION OF THE SUBSPACE TO WHICH THE SEARCH IS
C     CONSTRAINED TO LIE. IF THERE ARE NO EQUALITY CONSTRAINTS, THEN
C     M SHOULD BE SET TO N. SEE ALSO FJ BELOW.
C     DIAGM ... SPECIFIES THE UNCERTAINTIES IN THE PARAMETERS WHEN
C     MODE=1. WHEN MODE=0, THIS IS A DUMMY VECTOR.
C     FJ ... CONTAINS THE LOWER TRAPEZOIDAL MATRIX, S.T. THE HESSIAN
C     INVERSE APPROXIMATION IS GIVEN BY (FJ)(FJ)'. IF MODE=0, THEN FJ
C     MUST BE INITIALIZED BY THE USER. ON TERMINATION, THE FINAL
C     APPROXIMATION TO THE INVERSE HESSIAN (VARIANCE) MATRIX MAY BE
C     OBTAINED FROM (FJ)(FJ)' IF M<N THEN THE INITIAL FJ MUST BE CHOSEN
C     APPROXIMATELY SO THAT ITS COLUMNS SPAN THE SUBSPACE TO WHICH THE
C     SEARCH IS CONSTRAINED TO LIE.
C
C     GROUP 3: PARAMETERS WHICH GUIDE THE SEARCH.
C
C     FMIN ... A GUARANTEED LOWER BOUND ON THE FUNCTION VALUE, EVEN IF
C     SIGNIFICANTLY MORE NEGATIVE THAN THE GREATEST LOWER BOUND. IN
C     THE EVENT THAT NOT EVEN A CRUDE ESTIMATE IS AVAILABLE, CHOOSE
C     -1.0D50.
C     IN THE CURRENT IMPLEMENTATION, FMIN IS RESET TO
C        ENERGY-0.0119701-11.9655*N*GL**3
C     WHERE GL IS THE CURRENT GRADIENT LENGTH (WITH GL SET TO 0.23 IF
C     GL > 0.23), IF THE ENERGY GOES BELOW THE LOWER BOUND.
C     NOTE: THIS IS THE SAME AS FOR THE OC METHOD, EXCEPT THE GRADIENT
C     IS NOW IN UNITS OF HARTREE/ANGSTROM INSTEAD OF MDYNE.
C     FL0 ... EXTRAPOLATION CONSTANT USED IN SEARCH. DEFAULT SET ABOVE.
C     IPRINT ... IF IPRINT=K, WHERE K>0, THE ROUTINE WILL PRINT OUT A
C     TRACE AFTER EACH SET OF K ITERATIONS. THE FORMAT FOR THE TRACE
C     AND THE LEGEND FOR INTERPRETING IT ARE GIVEN UNDER THE HEADING
C     'TRACE' BELOW. IF IPRINT=0, THEN NO TRACE IS OUTPUT.
C     IRSTBD ... IF THE ALGORITHM TERMINATES WITH ICONV=-1, THEN IT IS
C     RESTARTED IRSTBD TIMES WITH THE DIAGONAL ELEMENTS OF FJ SET TO
C     DIAGM IF MODE=1, AND TO UNITY OTHERWISE. IF IRSTBD .LE. 0 THEN
C     NO RESTARTING IS DONE.
C
C     GROUP 4: OUTPUT VARIABLES.
C
C     X0 ... FINAL ESTIMATE OF THE SOLUTION (N DIMENSIONAL VECTOR).
C     F0 ... FUNCTION VALUE AT X0.
C
C     GROUP 5: WORKING ARRAYS.
C
C     FK,FN,FM,P,Q,FS,GR ... M DIMENSIONAL VECTORS.
C     WORK,V ... N DIMENSIONAL VECTORS.
C     ITRACE ... ARRAY OF DIMENSION 20.
C
C     TRACE INFORMATION.
C     THE LEGEND FOR THE TRACE LETTERS IS AS FOLLOWS:
C     U ... INITIAL STEP .EQ. 1 (STEP 2B OF OCOPTR).
C     T ... PREDICTED REDUCTION IN FUNCTION VALUE IN DIRECTION OF
C     SEARCH .LT. EPS (STEP 1 OF SEARCH).
C     H ... BISECT (STEP 1 OF SEARCH).
C     E ... EXTRAPOLATION (STEP 2 OF SEARCH).
C     M ... EXTRAPOLATION (STEP 3 OF SEARCH).
C     N ... N**2 .LT. EPS (STEP 1 OF FORMPQ).
C     R ... RESET TO FULL VECTORS (STEP 3 OF FORMPQ).
C     1 ... RANK 1 UPDATE (STEP 4 OF FORMPQ).
C     X ... INDICATION THAT CONDITION NUMBER OF HESSIAN INVERSE
C     APPROXIMATION MAY BE IN REGION OF OVERFLOW THRESHOLD
C     (STEP 1 OF MODCON).
C     C ... FJ ALTERED (STEP 3 OF MODCON).
C==
C
C/
C     REQUIRED SUBROUTINES: SEARCH, FORMPQ, LTOLSP, LSPTOL,
C     MODCON, LTMVEC, LSPVEC, SETLT, PICK.
C*
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C#
C     PARAMETER (NA=#NA)
C     PARAMETER (NS=#NS, NP=#NP)
C     PARAMETER (NO=#NO)
C##
      PARAMETER (NA= 36)
      PARAMETER (NS=120, NP=300)
      PARAMETER (NO=125)
C###
      PARAMETER (NA3=3*NA, NA3SQ=NA3*NA3, NZ=NA3-6,
     1 NFOR=8+6*NA3+6*NP, NOO=NO*(NO+1)/2)
      PARAMETER (ZERO=0.0D0, ONE=1.0D0, TWO=2.0D0)
C
C     NOTE: THESE COMMON BLOCKS MUST MATCH THOSE USED BY THE OC METHOD.
C     COMMON BLOCK /C711B/ HAS LENGTH NA3SQ - SEE EQUIVALENCE BELOW.
C     COMMON BLOCK /C711D/ HAS LENGTH NFOR - SEE EQUIVALENCE BELOW.
C     THIS EASES CONVERSION BETWEEN IBM AND CDC VERSIONS.
C
      COMMON/C711B/FK(NO),N,MAXIT,IPRINT,MODE,IPT,NFCALL,M,LENFJ,
     1 FMIN,ACC,EPS,FL0,F0,ITRACE(20),
     2 IT,IRSTBD,IRST,NSTART,ICONV,ISTEP,F,FA,FB,FNS,A,FP0,B0,FMS,GL,
     3 L,ISW,S,T,H,FILL1(4),
     4 FJ(NOO)
      COMMON/C711C/IG(NZ),CG(NZ),IB(NS,5),X(NO),G(NO)
      COMMON/C711D/DIAGM(NO),X0(NO),GR(NO),F1(NO),FN(NO),FM(NO),
     1 P(NO),Q(NO),FS(NO),WORK(NO),V(NO)
      COMMON/GEN/E1,E2,E3,EDUM(3),DCONV,SPIN(2),FIELD(3),FE,EMOL,ESOL,
     1 DPOLE(4),VCM
      COMMON/IO/IN,IOUT,IODUM(215)
C
      CHARACTER IARRAY*1, ZTRACE*20
C
      DIMENSION IARRAY(2), IOP(99), FILLB(NA3SQ), FILLF(NFOR)
C
      EQUIVALENCE (FILLB(1),FK(1)), (FILLF(1),DIAGM(1))
C
      DATA TEN/10.0D0/, PT001/0.001D0/, PT5/0.5D0/
      DATA IARRAY/' ','U'/, EPSFAC/1.0D-8/, THREE/3.0D0/, PT23/0.23D0/
      DATA C0FMIN/0.0119701D0/, C1FMIN/11.9655D0/
C
C     MACHINE DEPENDENT CONSTANTS.
C?IBM/GLD/GBR/CDC/UNX
      DATA FKDATA/1.0D70/
C??
C?VAX
C     DATA FKDATA/1.7D38/
C??
C?IBM/GLD/GBR/VAX/UNX
      DATA IREAL/2/, IINT/1/
C??
C?CDC
C     DATA IREAL/2/, IINT/2/
C??
      DATA FMACH/0.0D0/
C
      L11=((NO+21)*IREAL+36*IINT)/2
      FKBND=FKDATA
C
C     COMPUTE FMACH, THE RELATIVE MACHINE PRECISION, IF NECESSARY.
C
      IF (FMACH .EQ. ZERO) THEN
         EPSTST = ONE
C
    1    EPSTST = PT5 * EPSTST
         TOL1 = EPSTST + ONE
         IF ((TOL1.GT.ONE) .AND. (TOL1-EPSTST.EQ.ONE)) GO TO 1
         IF (TOL1-EPSTST .EQ. ONE) EPSTST = EPSTST + EPSTST
         FMACH = EPSTST
      END IF
C
C     STEP 1A: INITIALIZE AND SET DEFAULTS IF NECESSARY.
C     CHECK INPUT PARAMETERS.
C
      N=NN
      M=N
      LENFJ=(M*(2*N-M+1))/2
      MM1=M-1
      IF(IOP(13).EQ.0)GO TO 100
C     RELOAD VARIABLES FROM DISK.
      CALL TREAD(10,DIAGM,11*NO,1,11*NO,1,0)
      CALL TREAD(11,FK,LENFJ+L11,1,LENFJ+L11,1,0)
      IF(IOP(13).EQ.2)GO TO 100
    2 MODE=1
C     BRANCH DEPENDING ON ISTEP.
      I=ISTEP+1
      GO TO (2000,3010,3030,3040,3050,115),I
C
C     INITIAL ENTRY.
C
  100 READ(IN,1200)MAXIT,IPRINT,MODE,ITYPE
      IF (IPRINT .LT. 0) IPRINT=0
      WRITE(IOUT,1010)N,MAXIT,IPRINT,MODE,ITYPE
      READ(IN,1190)FMININ,H,EPS,FL0
      IF(IOP(13).EQ.0.AND.MODE.NE.0)READ(IN,1190)(WORK(I),I=1,M)
      IF (IOP(13) .EQ. 2) FMININ = FMIN
      FMIN = FMININ
      IF(H.EQ.ZERO)H=PT001
      IF(EPS.LE.ZERO)EPS=EPSFAC
      IF (FL0.LE.ZERO .AND. IOP(25).NE.1) FL0 = TEN
      IF (FL0.LE.ZERO .AND. IOP(25).EQ.1) FL0 = THREE
      WRITE(IOUT,1160)FMIN,H,EPS,FL0
      IF(EPS.LT.FMACH)GO TO 700
      WRITE(IOUT,1170)(I,X(I),I=1,N)
      IF(IOP(13).EQ.2.AND.IOP(10).EQ.0)RETURN
C     EXACT RESTART.
      IF(IOP(13).EQ.2.AND.ITYPE.EQ.0)GO TO 2
C     SET STEP FLAG TO 5.
      ISTEP=5
      IF(IOP(13).EQ.2)GO TO 115
      IF (MODE .NE. 0) THEN
         WRITE(IOUT,1210)(I,WORK(I),I=1,M)
         DO 110 I=1,M
  110    IF (WORK(I) .GT. ZERO) DIAGM(I) = WORK(I)
      END IF
      WRITE(IOUT,1180)(I,DIAGM(I),I=1,M)
      DO 10 I=1,M
   10 DIAGM(I)=ONE/DSQRT(DABS(DIAGM(I)))
      MODE=1
      IF(IOP(10).EQ.0)RETURN
C     NFCALL COUNTS FUNCTION EVALUATIONS.
      NFCALL=1
      IT=0
C     ALLOW RESTARTS UNTIL MAXIMUM ITERATIONS EXCEEDED.
      IRSTBD=1000000
      IRST=0
C     NSTART COUNTS RESTARTS IF FUNCTION REDUCTION<EPS.
      NSTART=0
      IF(MODE.NE.0)CALL SETLT(FJ,LENFJ,M,N,DIAGM)
  115 F=E3
      WRITE(IOUT,1060)F
      F0=F
      DO 118 I=1,N
  118 X0(I)=X(I)
      L=1
      ISTEP=1
      IF(IT.GE.MAXIT)GO TO 640
 3000 CALL PICK(FJ,LENFJ,WORK,N,L)
      DO 120 J=1,N
  120 X(J)=X0(J)+WORK(J)*H
      GO TO 2010
C     RE-ENTRY (ISTEP=1).
 3010 F=E3
      NFCALL=NFCALL+1
      FK(L)=(F-F0)/H
      L=L+1
      IF(L.LE.M)GO TO 3000
C
C     STEP 1C: SET VARIABLES FOR INITIAL STEP.
C
  135 FB=TWO*F0-FMIN
      FA=F0
C
C     STEP 1D: INDICATE INITIALIZATION OF UPDATING VECTOR.
C
  140 FNS=ZERO
C
C     STEP 2: CONDUCT SEARCH. BEGIN BY PRINTING TRACE IF REQUESTED.
C
  200 IF (IPRINT .EQ. 0 .OR. IT .EQ. 0) GO TO 210
      IF(MOD(IT,IPRINT).NE.0) GO TO 210
      J=MIN0(N,10)
      DO 205 KL = 1,20
  205 ZTRACE(KL:KL) = CHAR(ITRACE(KL))
      WRITE(IOUT,1080)IT,F0,NFCALL,ZTRACE,(X0(I),I=1,J)
      IF(N.GT.10)WRITE(IOUT,1081)(X0(I),I=11,N)
  210 DO 220 I=1,20
  220 ITRACE(I) = ICHAR(IARRAY(1))
C     IPT POINTS TO NEXT AVAILABLE 'TRACE' ELEMENT.
      IPT=1
C
C     STEP 2A: MAIN CONVERGENCE TEST.
C
      A=ZERO
      DO 225 I=1,M
      T=FK(I)
      FS(I)=-T
  225 A=A+T*T
      IF(A.LE.EPS)GO TO 520
      IF(IT.GE.MAXIT) GO TO 640
      IT=IT+1
C
C     STEP 2B: SET EUCLIDEAN SEARCH DIRECTION AND COMPUTE INITIAL STEP.
C
      T=DSQRT(A)
      FP0=-T
      IF ((F0-FMIN) .GE. ZERO) GO TO 240
C
C     RESET THE LOWER BOUND.
C
      GL1 = DSQRT(A/DFLOAT(M))
      IF (GL1 .GT. PT23) GL1 = PT23
      FMIN=E3-C0FMIN-C1FMIN*DFLOAT(M)*GL1*GL1*GL1
      FB=F0+F0-FMIN
      WRITE(IOUT,1050)FMIN
  240 TEMP1=DMIN1(TWO*(FB-F0)/A,TWO*(F0-FMIN)/A)
      IF(TEMP1.LT.ONE)GO TO 250
      IF (IPT .LE. 20) ITRACE(IPT) = ICHAR(IARRAY(2))
      IPT=IPT+1
      TEMP1=ONE
  250 FB=FA
      FA=F0
      T=T*TEMP1
C
C     STEP 2C: TRANSFORM SO LAST COLUMN OF FJ LIES ALONG SEARCH DIRN.
C
      ISW=1
      IF(FNS.GT.ZERO)ISW=2
      CALL LTOLSP(M,N,LENFJ,FJ,FS,FK,FN,ISW,V)
C
C     STEP 3: CONDUCT SEARCH.
C
      ICONV=0
      ISTEP=0
 2000 CALL SEARCH(FP0,T,B0,S,ICONV)
      IF(ICONV)254,320,2010
 2010 CALL TWRITE(10,DIAGM,11*NO,1,11*NO,1,0)
      CALL TWRITE(11,FK,LENFJ+L11,1,LENFJ+L11,1,0)
      RETURN
C     RESTART, UNLESS TWO SUCCESSIVE RESTARTS.
  254 NSTART=NSTART+1
      IF(NSTART.LT.2) GO TO 255
      WRITE(IOUT,1130)
      IOP(1)=-1
      NSTART=0
      GO TO 630
  255 IRST=IRST+1
      IF (IRST .GT. IRSTBD)GO TO 650
      DO 260 I=1,N
      WORK(I)=ONE
  260 IF(MODE .EQ. 1) WORK(I)=DIAGM(I)
      CALL SETLT(FJ,LENFJ,M,N,WORK)
      GO TO 135
C
C     STEP 4: ESTIMATE REMAINING M-1 COMPONENTS OF EUCLIDEAN GRADIENT.
C
  320 NSTART=0
      T=ONE-B0
      FM(M)=T
      FK(M)=FP0
      FMS=T*T
      IF(M.LT.2)GO TO 420
      L=1
 3020 CALL PICK(FJ,LENFJ,WORK,N,L)
      DO 400 J=1,N
  400 X(J)=X0(J)+WORK(J)*H
      ISTEP=2
      GO TO 2010
C     RE-ENTRY (ISTEP=2).
 3030 F=E3
      NFCALL=NFCALL+1
      T=(F-F0)/H
      FK(L)=T
      T=T/S
      FM(L)=-T
      FMS=FMS+T*T
      FS(L)=ZERO
      L=L+1
      IF(L.LE.MM1)GO TO 3020
  420 FS(M)=ONE
C
C     STEP 5A: CHECK IF UPDATE IS NECESSARY.
C
      IF(FMS.GE.EPS)GO TO 500
      CALL LSPTOL(M,N,LENFJ,FJ,FK,FN,FN,ISW,V)
      GO TO 140
C
C     STEP 5B: FORM QUANTITIES P AND Q.
C
  500 CALL FORMPQ(FNS,FMS,B0)
C
C     STEP 5C: UPDATE FJ AND OTHER QUANTITIES.
C
      CALL LSPVEC(FJ,LENFJ,M,N,V,Q,X)
      ISW=2
      IF(FNS.GT.ZERO)ISW=3
      CALL LSPTOL(M,N,LENFJ,FJ,FK,P,FN,ISW,V)
      ISW=ISW-1
      CALL LTOLSP(M,N,LENFJ,FJ,P,FK,FN,ISW,WORK)
C     COMPUTE LAST COLUMN.
      T=P(M)
      DO 510 I=1,N
  510 WORK(I)=WORK(I)+X(I)*T
      CALL LSPTOL(M,N,LENFJ,FJ,FK,FN,FN,ISW,WORK)
      CALL MODCON(M,N,LENFJ,FJ,FKBND,CONDNO,IFLAG,IPT,ITRACE)
      IF (IFLAG .NE. 1) GO TO 200
C     DIAGONAL ELEMENTS OF FJ TOO SMALL.
      WRITE(IOUT,1110)
      IOP(1)=-1
      GO TO 630
C
C     STEP 6: DO SPECIAL STEP IF THIS GIVES AN IMPROVEMENT.
C
  520 WRITE(IOUT,1150)
      CALL LTMVEC(FJ,LENFJ,M,N,FK,V)
      DO 540 J=1,N
  540 X(J)=X0(J)-V(J)
      ISTEP=3
      GO TO 2010
C     RE-ENTRY (ISTEP=3).
 3040 F=E3
      NFCALL=NFCALL+1
      IF(F0.LT.F)GO TO 560
      DO 550 J=1,N
  550 X0(J)=X(J)
      F0=F
      WRITE(IOUT,1040)
      IOP(1)=1
      GO TO 630
  560 WRITE(IOUT,1090)
C     RESET TO BEST PARAMETER SET.
      DO 570 I=1,N
  570 X(I)=X0(I)
      ISTEP=4
      GO TO 2010
C     RE-ENTRY (ISTEP=4).
 3050 F0=E3
      IOP(1)=1
      NFCALL=NFCALL+1
  630 WRITE(IOUT,1020)IT,(I,X0(I),I=1,N)
      WRITE(IOUT,1030)F0
      WRITE(IOUT,1070)NFCALL,IRST
C     COPY PARAMETERS BACK TO X.
      DO 636 I=1,N
  636 X(I)=X0(I)
      ISTEP=5
      GO TO 2010
C     TOO MANY ITERATIONS.
  640 WRITE(IOUT,1100)
      IOP(1)=-1
      GO TO 630
C     TOO MANY RESTARTS.
  650 WRITE(IOUT,1120)
      IOP(1)=-1
      GO TO 630
C     INPUT PARAMETER ERROR.
  700 WRITE(IOUT,1000)
      IOP(1)=-1
      RETURN
C
 1000 FORMAT('0*** ERROR IN INPUT PARAMETERS')
 1010 FORMAT('1DERIVATIVE-FREE OPTIMALLY CONDITIONED OPTIMIZATION ',
     1 '(VER: DEC 04, 1988)'/'0',I3,' PARAMETERS,',I7,' ITERATIONS,',
     2 '    PRINT MODULUS ',I4,',   MODE =',I4,',   ITYPE =',I4)
 1020 FORMAT('0RESULTS AT ITERATION ',I4/'0FINAL PARAMETERS:'//
     1 (1X,6(I6,1PD16.7)))
 1030 FORMAT('0ENERGY =',F17.9)
 1040 FORMAT('0SPECIAL STEP GAVE IMPROVEMENT')
 1050 FORMAT('0*** ENERGY BELOW LOWER BOUND - LOWER BOUND RESET TO',
     1 F18.9,' BY THE DAMPED GL**3 FORMULA')
 1060 FORMAT('0INITIAL ENERGY =',F17.9)
 1070 FORMAT('0',I7,' FUNCTION EVALUATIONS,',I10,' RESTARTS'/)
 1080 FORMAT('0ITERATION ',I5,',  E =',F17.9,I8,
     1 ' FUNCTION EVALUATIONS,   TRACE: ',A20/' X:',10(1PD13.5))
 1081 FORMAT(3X,1PD13.5,9D13.5)
 1090 FORMAT('0SPECIAL STEP GAVE NO IMPROVEMENT - RESET TO BEST ',
     1 'PARAMETER SET')
 1100 FORMAT('1*** MAXIMUM ITERATION COUNT EXCEEDED - OPTIMIZATION',
     1 ' TERMINATED')
 1110 FORMAT('1*** DIAGONAL ELEMENTS OF INVERSE HESSIAN TOO SMALL -',
     1 ' OPTIMIZATION TERMINATED')
 1120 FORMAT('1*** TOO MANY RESTARTS - OPTIMIZATION TERMINATED')
 1130 FORMAT('1*** 2 SUCCESSIVE ENERGY REDUCTIONS LESS THAN EPS - ',
     1 'OPTIMIZATION TERMINATED')
 1150 FORMAT('1*** ENERGY VALUES CONVERGED WITHIN EPS - TRY SPECIAL ',
     1 'STEP')
 1160 FORMAT('0LOWER BOUND =',F17.9,10X,'STEP =',1PD13.5,10X,'EPS =',
     1 D13.5,10X,'EXTRAPOLATION FACTOR =',0PF9.5)
 1170 FORMAT(/'0INITIAL PARAMETERS:'//(1X,6(I6,1PD16.7)))
 1180 FORMAT(/'0HESSIAN DIAGONAL ELEMENTS (HARTREE/ANGSTROM**2):'//
     1 (1X,6(I6,1PD16.7)))
 1190 FORMAT(6F12.6)
 1200 FORMAT(4I4)
 1210 FORMAT(/'0USER-SUPPLIED HESSIAN DIAGONAL ELEMENTS ',
     1 '(MDYNE/ANGSTROM):'//
     2 (1X,6(I6,1PD16.7)))
      END
      SUBROUTINE SEARCH(FP0,T,B0,S,IFLAG)
C
C     THIS SUBROUTINE USES JUST FUNCTION EVALUATIONS TO FIND A POINT
C     X0+V*T ALONG THE LINE THROUGH X0 IN THE DIRECTION V WHERE
C     A) THE VALUE F(X0+V*T) OF THE OBJECTIVE FUNCTION IS LESS THAN THE
C     STARTING VALUE F(X0), AND
C     B) A "REASONABLE" QUADRATIC APPROXIMATION CAN BE MADE FOR THE
C     DEPENDENCE OF F(X0+V*T) ON T NEAR TNE MINIMUM.
C     THIS SUBROUTINE DOES NOT SEEK AN ACCURATE APPROXIMATION TO THE
C     MINIMUM ALONG THIS LINE.
C
C     N ... ON INPUT GIVES THE NUMBER OF VARIABLES.
C     X0 ... ON INPUT CONTAINS THE STARTING POINT OF THE SEARCH. ON
C     OUTPUT IT CONTAINS THE NEW POINT DEVELOPED BY THE SEARCH (N
C     DIMENSIONAL VECTOR).
C     V ... ON INPUT GIVES THE DIRECTION OF SEARCH (N DIMENSIONAL
C     VECTOR).
C     F0 ... ALWAYS CONTAINS THE VALUE OF THE FUNCTION AT X0.
C     FP0 ... ALWAYS CONTAINS AN ESTIMATE OF THE DERIVATIVE ALONG V
C     AT X0. ASSUMED NEGATIVE ON INPUT.
C     T ... ON INPUT IS THE INITIAL STEP.
C     EPS ... ON INPUT IS A NUMBER SPECIFYING A LOWER BOUND ON
C     DECREASES IN THE OBJECTIVE FUNCTION WHICH ARE DEEMED SIGNIFICANT.
C     H ... ON INPUT IS A NUMBER SPECIFYING THE LENGTH OF THE STEPS IN
C     EUCLIDEAN SPACE USED TO ESTIMATE COMPONENTS OF THE GRADIENT.
C     FL0 ... ON INPUT IS A NUMBER SPECIFYING THE MAXIMUM FACTOR BY
C     WHICH THE STEP LENGTH CAN BE INCREASED WHEN EXTRAPOLATING.
C     B0 ... ON OUTPUT GIVES THE SECOND DERIVATIVE OF A QUADRATIC
C     APPROXIMATION TO THE FUNCTION ALONG THE LINE X0+V*T.
C     S ... ON OUTPUT IS THE NUMBER WHICH WHEN MULTIPLIED BY V GIVES
C     THE STEP TAKEN.
C     IFLAG ... ON INPUT, IFLAG=0 INDICATES THIS IS THE FIRST CALL.
C     IFLAG>0 INDICATES SUBSEQUENT CALLS DURING THE SAME LINE SEARCH.
C     ON OUTPUT IFLAG=0 SPECIFIES NORMAL TERMINATION.
C     IFLAG>1 INDICATES THAT ANOTHER FUNCTION EVALUATION HAS BEEN
C     REQUESTED.
C     IFLAG=-1 SPECIFIES THAT THE REDUCTION IN FUNCTION VALUE IS NOT
C     SIGNIFICANT.
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C#
C     PARAMETER (NA=#NA)
C     PARAMETER (NS=#NS, NP=#NP)
C     PARAMETER (NO=#NO)
C##
      PARAMETER (NA= 36)
      PARAMETER (NS=120, NP=300)
      PARAMETER (NO=125)
C###
      PARAMETER (NA3=3*NA, NA3SQ=NA3*NA3, NZ=NA3-6,
     1 NFOR=8+6*NA3+6*NP, NOO=NO*(NO+1)/2)
      PARAMETER (ZERO=0.0D0, ONE=1.0D0, TWO=2.0D0)
C
      COMMON/C711B/FK(NO),N,MAXIT,IPRINT,MODE,IPT,NFCALL,M,LENFJ,
     1 FMIN,ACC,EPS,FL0,F0,ITRACE(20),
     2 IFILL1(8),FILL1(11),H,FL,FA,A,C,
     3 FJ(NOO)
      COMMON/C711C/IG(NZ),CG(NZ),IB(NS,5),X(NO),G(NO)
      COMMON/C711D/DIAGM(NO),X0(NO),GR(NO),F1(NO),FN(NO),FM(NO),
     1 P(NO),Q(NO),FS(NO),WORK(NO),V(NO)
      COMMON/GEN/E1,E2,E3,EDUM(3),DCONV,SPIN(2),FIELD(3),FE,EMOL,ESOL,
     1 DPOLE(4),VCM
C
      CHARACTER*1 IARRAY
C
      DIMENSION IARRAY(4), FILLB(NA3SQ), FILLF(NFOR)
C
      EQUIVALENCE (FILLB(1),FK(1)), (FILLF(1),DIAGM(1))
C
      DATA PT5/0.5D0/
      DATA IARRAY/'H','E','M','T'/
C
C     STEP 0: INITIALIZE.
C
      IF(IFLAG-1)10,115,320
   10 FL=FL0
      S=ZERO
      FA=F0
C
C     STEP 1: OBTAIN BETTER POINT.
C
  100 IF(-FP0*T.LT.EPS)GO TO 500
      DO 110 I=1,N
  110 X(I)=X0(I)+V(I)*T
      IFLAG=1
      RETURN
C     RE-ENTRY (IFLAG=1).
  115 IFLAG=0
      F=E3
      NFCALL=NFCALL+1
      IF(F.LT.F0)GO TO 200
      T=T/TWO
      FL=PT5
      IF(F.LT.FA)GO TO 300
      IF(IPT.LE.20)ITRACE(IPT) = ICHAR(IARRAY(1))
      IPT=IPT+1
      GO TO 100
C
C     STEP 2: LAY BASIS FOR SUITABLE QUADRATIC INTERPOLATION.
C
  200 A=(F-F0)/T
      B=(A-FP0)/T
      C=T
      S=S+T
      T=T*FL
      DO 210 I=1,N
  210 X0(I)=X(I)
      F0=F
      FP0=TWO*A-FP0
      IF(FL.LT.ONE)GO TO 300
      IF(FP0/T+TWO*B.GE.ZERO)GO TO 300
      IF(IPT.LE.20)ITRACE(IPT) = ICHAR(IARRAY(2))
      IPT=IPT+1
      GO TO 100
C
C     STEP 3: ESTIMATE DIRECTIONAL DERIVATIVE AT NEW POINT, COMPUTE
C     QUADRATIC FIT AND EXIT IF SATISFACTORY FIT HAS BEEN MADE.
C
  300 DO 310 I=1,N
  310 X(I)=X0(I)+V(I)*H
      IFLAG=2
      RETURN
C     RE-ENTRY (IFLAG=2).
  320 IFLAG=0
      F=E3
      NFCALL=NFCALL+1
      FP0=(F-F0)/H
      B=(FP0-A)/(H+C)
      FP0=FP0-B*H
      IF(FP0/T+TWO*B.GE.ZERO)GO TO 520
      IF(FL.LT.ONE)GO TO 400
      IF(IPT.LE.20)ITRACE(IPT) = ICHAR(IARRAY(3))
      IPT=IPT+1
      GO TO 100
C
C     STEP 4: MINIMUM BOUNDED.
C
  400 B=-FP0/C
      GO TO 520
C
C     STEP 5: TIDY UP.
C
  500 IFLAG=-1
      IF(IPT.LE.20)ITRACE(IPT) = ICHAR(IARRAY(4))
      IPT=IPT+1
  520 B0=TWO*B
      RETURN
      END
      SUBROUTINE LSPVEC(FL,LENFL,M,N,SPIKE,VEC,RES)
C
C     SUBROUTINE LSPVEC MULTIPLIES A MATRIX WHICH IS LOWER TRAPEZOIDAL
C     IN ALL BUT THE LAST COLUMN, WHICH IS DENSE, INTO THE VECTOR VEC
C     AND RETURNS THE RESULT IN RES. THE FIRST M-1 COLUMNS OF THE
C     MATRIX ARE STORED BY COLUMNS IN THE ONE DIMENSIONAL ARRAY FL AND
C     THE LAST COLUMN IN SPIKE.
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      DIMENSION FL(LENFL),VEC(M),SPIKE(N),RES(N)
C
      DATA ZERO/0.0D0/
C*
      VM=VEC(M)
      DO 20 I=1,N
      T=ZERO
      IPTFL=I
      IUB=MIN0(I,M-1)
      DO 10 J=1,IUB
      T=T+FL(IPTFL)*VEC(J)
   10 IPTFL=IPTFL+N-J
   20 RES(I)=T+SPIKE(I)*VM
      RETURN
      END
      SUBROUTINE PICK(FL,LENFL,COLI,N,I)
C
C     SUBROUTINE PICK PICKS THE I'TH COLUMN OF FL AND RETURNS THE
C     RESULT IN COLI.
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      DIMENSION FL(LENFL),COLI(N)
C
      DATA ZERO/0.0D0/
C*
      IF(I.GT.1)GO TO 5
      IPT=0
      GO TO 15
    5 IM1=I-1
      DO 10 J=1,IM1
   10 COLI(J)=ZERO
      IPT=IM1*(2*N-I+2)/2
   15 ICT=1
      DO 20 J=I,N
      COLI(J)=FL(IPT+ICT)
   20 ICT=ICT+1
      RETURN
      END
