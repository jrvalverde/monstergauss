      SUBROUTINE CRITIC (NA,NB,NS,NP,NF,NC,NO,NT,MA,
     1 NZ,NA3,NBB,NB1,NB2,NF2,NFOR,NV,MA1,MV1,
     2 NFILE,IREAL,IINT,IRECL,IRECSZ,NTBLKS,ERROR,LFC,IOUT)
C*
C     --------------
C     U OF T VERSION
C     JULY 1987
C     --------------
C*
C     THIS ROUTINE SETS UP CERTAIN CRITICAL CODE SECTIONS THAT MUST
C     BE SHARED BETWEEN MONSTERGAUSS AND THE CONVERSION PROGRAM
C     'CONVERT2' (IN 'GCONVERT'). IF THIS ROUTINE IS CHANGED, BOTH
C     MONSTERGAUSS AND GCONVERT MUST BE RECATALOGUED. CHANGES IN THE
C     ARGUMENT LIST WILL NECESSITATE CHANGES IN BOTH PLACES ALSO.
C
C     ARGUMENT DESCRIPTIONS:
C     NA-MV1 - PARAMETERS DEFINING THE SIZE OF CALCULATION TO BE
C              HANDLED (MAXIMUM).
C     NFILE  - ARRAY TO RECEIVE THE PARTITION LENGTHS AND START
C              BLOCK NUMBERS (DIMENSION: (100,2)).
C     IREAL  - ALWAYS SET TO 2 (NUMBER OF WORDS PER DOUBLE PRECISION
C              VARIABLE ON THE IBM/GLD/GBR/VAX/UNX).
C     IINT   - SET TO LENGTH OF AN INTEGER(*4) VARIABLE RELATIVE TO A
C              DOUBLE PRECISION VARIABLE. IINT=1 ON IBM/GLD/GBR/VAX/UNX;
C              =2 ON CDC SINCE DOUBLE PRECISION VARIABLES ARE REPLACED
C              BY 'REAL' VARIABLES AND BOTH 'REAL' AND 'INTEGER' DATA
C              OCCUPY THE SAME AMOUNT OF MEMORY ON CDC MACHINES.
C     IRECL  - BLOCK SIZE IN BYTES FOR THE RANDOM ACCESS FILE
C              (MUST BE DIVISIBLE BY 8).
C     IRECSZ - CONVERSION FACTOR BETWEEN BLOCKS OF LENGTH 'IRECL'
C              AND PHYSICAL BLOCKS NEEDED ON A SPECIFIC MACHINE.
C     NTBLKS - TOTAL NUMBER OF BLOCKS REQUIRED FOR THE RANDOM ACCESS
C              FILE (RETURNED BY CRITIC).
C     ERROR  - LOGICAL VARIABLE RETURNED BY CRITIC THAT IS NORMALLY
C              SET FALSE (NO ERRORS FOUND), BUT IS SET TRUE IF AN
C              ERROR WAS FOUND.
C     LFC    - LOGICAL FILE CODE FOR THE TABLE OF PARTITION DATA.
C     IOUT   - LOGICAL FILE CODE FOR A MESSAGE TELLING THE USER
C              TO LOOK ON FILE 'LFC' FOR A DETAILED ERROR REPORT.
C
      DIMENSION NFILE(100,2), NDISK(100)
C
      LOGICAL ERROR
C
C     DISK FILE MAP - THE VALUE OF NDISK GIVES THE START
C     RECORD NUMBER FOR EACH PARTITION ON THE DIRECT-ACCESS UNIT
C     (UNIT 'IMAT'). ALTHOUGH THE ACTUAL VALUES GIVEN HERE ARE FOR
C     THE SPECIFIC CASE DETAILED IN 'SETUP', AND ARE NOT USED AS SUCH,
C     THE SEQUENCE OF VALUES IS USED TO DETERMINE THE MOST
C     EFFICIENT SEQUENCE OF PARTITIONS TO MINIMIZE DISK HEAD
C     MOVEMENT (AND HENCE REDUCE DISK I/O WAIT TIME), ALTHOUGH
C     THIS MAY BE A TOTAL WASTE OF TIME ON LARGE MULTI-PROCESSING
C     COMPUTERS, AS SOME OTHER USER MAY COME ALONG AND USE THE
C     SAME DISK DRIVE AS MONSTERGAUSS (INCONSIDERATE LITTLE BUGGERS).
C
      DATA NDISK/120,12,1,74,83,11,137,13,134,121,123,136,59,154,64,
     1 0,69,0,18,0,23,3*0,84,0,93,3*0,28,39,50,138,143,148,3*0,
     2 102,157,111,166,175,0,187,188,0,153,176,50*0/
C
C
      ERROR = .FALSE.
C
C     SET MAXIMUM PARTITION LENGTHS.
C
      DO 300 I=1,100
      NFILE(I,1) = 0
  300 NFILE(I,2) = -NDISK(I)
C
      NFILE(1,1) = ((NZ+6*NA)*IREAL+(NZ+5*NS)*IINT) / 2
      NFILE(2,1) = (NS+2*NP)*IREAL / 2
      NFILE(3,1) = (7200*IREAL) / 2
      NFILE(4,1) = (NB2*IREAL) / 2
      NFILE(5,1) = ((2*NB+NF+NC+137)*IREAL+(NC+10)*IINT) / 2
      NFILE(6,1) = (3*NP*IREAL+(6*NS+2)*IINT) / 2
      NFILE(7,1) = (12*IREAL+204*IINT) / 2
      NFILE(8,1) = (NBB*IREAL) / 2
      NFILE(9,1) = ((NT*(NT+2*MA+5)+34)*IINT) / 2
      NFILE(10,1) = (11*NO*IREAL) / 2
      NFILE(11,1) = (NA3*NA3*IREAL) / 2
      NFILE(12,1) = (NT*IREAL+NT*IINT) / 2
      NFILE(13,1) = (NBB*IREAL) / 2
      NFILE(14,1) = (NFOR*IREAL) / 2
      NFILE(15,1) = (NBB*IREAL) / 2
      NFILE(17,1) = (NBB*IREAL) / 2
      NFILE(19,1) = (NBB*IREAL) / 2
      NFILE(21,1) = (NBB*IREAL) / 2
      NFILE(25,1) = (NB2*IREAL) / 2
      NFILE(27,1) = (NB2*IREAL) / 2
      NFILE(31,1) = (NB1*IREAL) / 2
      NFILE(32,1) = (NB1*IREAL) / 2
      NFILE(33,1) = (NB1*IREAL) / 2
      NFILE(34,1) = (NBB*IREAL) / 2
      NFILE(35,1) = (NBB*IREAL) / 2
      NFILE(36,1) = (NBB*IREAL) / 2
      NFILE(40,1) = (NB2*IREAL) / 2
      NFILE(41,1) = (NB2*IREAL) / 2
      NFILE(42,1) = (NB2*IREAL) / 2
      NFILE(43,1) = (NB2*IREAL) / 2
      NFILE(44,1) = (24*IREAL+(2*NA+NB+28)*IINT) / 2
      NFILE(46,1) = NFILE(5,1)
      NFILE(47,1) = NFILE(5,1)
      NFILE(49,1) = (290*IREAL+270*IINT) / 2
      NFILE(50,1) = (NA3*NA3*IREAL) / 2
C
C     FILE 10 IS ALSO USED BY THE VA05 OPTIMIZATION METHOD.
C     TAKE MAXIMUM LENGTH.
C
      ITEMP = ((8*NV+34)*IREAL+20*IINT) / 2
      IF (ITEMP .GT. NFILE(10,1)) NFILE(10,1) = ITEMP
C
C     FILE 17 IS ALSO USED BY THE RHF SCF ROUTINE.
C     TAKE MAXIMUM LENGTH.
C
      ITEMP = (NF*NF2*IREAL) / 2
      IF (ITEMP .GT. NFILE(17,1)) NFILE(17,1) = ITEMP
C
C     FILES 31, AND 32 ON IBM/GLD/GBR/VAX/UNX, ARE ALSO USED BY THE CI
C     ROUTINES - TAKE MAXIMUM LENGTH.
C*IBM/GLD/GBR/VAX/UNX
      IF (IINT .EQ. 1) ITEMP = (((MA1*MV1+1)/2+1)*IINT) / 2
C*CDC
      IF (IINT .EQ. 2) ITEMP = (MA1*MV1*IINT) / 2
C*
      IF (ITEMP .GT. NFILE(31,1)) NFILE(31,1) = ITEMP
C*IBM/GLD/GBR/VAX/UNX
      IF  (IINT.EQ.1 .AND. ITEMP.GT.NFILE(32,1)) NFILE(32,1) = ITEMP
C
C     CALCULATE STARTING DISK RECORD NUMBERS, BASED ON A RECORD
C     SIZE OF IRECL BYTES. FIRST, CONVERT IRECL TO DOUBLEWORDS -
C     CURRENTLY THIS SECTION OF CODE IS NOT IMPORTANT ON THE
C     CDC MACHINE, BUT DO IT ANYWAYS.
C
      IREC = IRECL / 8
      IF (8*IREC .EQ. IRECL) GO TO 320
      WRITE (LFC,310) IRECL
  310 FORMAT ('0*** ERROR IN CRITIC: RECORD LENGTH ON UNIT IMAT (=',I8,
     1 ' BYTES) IS NOT DIVISIBLE BY 8.')
      IF (IOUT.NE.LFC .AND. .NOT.ERROR) WRITE (IOUT,540) LFC
      ERROR = .TRUE.
C
  320 IREC1 = IREC - 1
      NTRECS = 0
C
C     LOOP OVER THE DISK FILES, LOOKING FOR THE LEAST NEGATIVE
C     VALUE OF NFILE(I,2), WHICH WAS SET TO -NDISK(I) ABOVE.
C     WHEN THE NEXT FILE IN SEQUENCE IS FOUND, CALCULATE THE
C     NUMBER OF RECORDS REQUIRED, AND SET NFILE(I,2) TO POINT
C     TO THE FIRST RECORD NUMBER.
C
  400 II = 0
      IBEST = -1000000
      DO 410 I=1,100
      NFILEI = NFILE(I,2)
      IF (NFILEI.GE.0 .OR. NFILEI.LE.IBEST) GO TO 410
      II = I
      IBEST = NFILEI
  410 CONTINUE
C
      IF (II .EQ. 0) GO TO 500
      NFILE(II,2) = NTRECS + 1
      IF (NFILE(II,1) .LE. 0) GO TO 400
      NREC = (NFILE(II,1)+IREC1) / IREC
      NTRECS = NTRECS + NREC
      GO TO 400
C
C     PRINT SUMMARY TABLE AND PERFORM CONSISTENCY CHECKS.
C
  500 WRITE (LFC,510)
  510 FORMAT ('0FILE    LENGTH    START RECORD #    # RECORDS'/)
      DO 550 I=1,100
      N1 = NFILE(I,1)
      N2 = NFILE(I,2)
      N3 = (N1+IREC1) / IREC
      WRITE (LFC,520) I,N1,N2,N3
  520 FORMAT (1X,I3,3X,I8,5X,I8,7X,I8)
      IF (N1.EQ.0 .AND. N2.EQ.0) GO TO 550
      IF (N1.GT.0 .AND. N2.GT.0) GO TO 550
      WRITE (LFC,530)
  530 FORMAT (' *** ERROR IN CRITIC: INVALID DATA FOR ABOVE FILE: ',
     1 'BOTH VALUES MUST BE ZERO, OR BOTH MUST BE POSITIVE.')
      IF (IOUT.NE.LFC .AND. .NOT.ERROR) WRITE (IOUT,540) LFC
  540 FORMAT ('0FATAL ERROR IN CRITIC ROUTINE - SEE DEBUG OUTPUT (',
     1 'FILE CODE',I3,').')
      ERROR = .TRUE.
  550 CONTINUE
C
      NTBLKS = NTRECS * IRECSZ
      WRITE (LFC,560) IRECL,NTRECS,NTBLKS
  560 FORMAT ('0IN ABOVE TABLE, LENGTH IS IN DOUBLEWORDS ON ',
     1 'IBM/GLD/GBR/VAX/UNX, WORDS ON CDC.'/
     2 ' THE TOTAL NUMBER OF',I6,' BYTE RECORDS IS',I6,' (',I6,
     3 ' BLOCKS).')
      RETURN
      END
